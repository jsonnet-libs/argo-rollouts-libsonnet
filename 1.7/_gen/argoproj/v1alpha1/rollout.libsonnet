{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='rollout', url='', help=''),
  '#metadata':: d.obj(help='"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."'),
  metadata: {
    '#withAnnotations':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { metadata+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
    '#withClusterName':: d.fn(help='"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { metadata+: { clusterName: clusterName } },
    '#withCreationTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='creationTimestamp', type=d.T.string)]),
    withCreationTimestamp(creationTimestamp): { metadata+: { creationTimestamp: creationTimestamp } },
    '#withDeletionGracePeriodSeconds':: d.fn(help='"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."', args=[d.arg(name='deletionGracePeriodSeconds', type=d.T.integer)]),
    withDeletionGracePeriodSeconds(deletionGracePeriodSeconds): { metadata+: { deletionGracePeriodSeconds: deletionGracePeriodSeconds } },
    '#withDeletionTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='deletionTimestamp', type=d.T.string)]),
    withDeletionTimestamp(deletionTimestamp): { metadata+: { deletionTimestamp: deletionTimestamp } },
    '#withFinalizers':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizers(finalizers): { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withFinalizersMixin':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizersMixin(finalizers): { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withGenerateName':: d.fn(help='"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"', args=[d.arg(name='generateName', type=d.T.string)]),
    withGenerateName(generateName): { metadata+: { generateName: generateName } },
    '#withGeneration':: d.fn(help='"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."', args=[d.arg(name='generation', type=d.T.integer)]),
    withGeneration(generation): { metadata+: { generation: generation } },
    '#withLabels':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
    withLabels(labels): { metadata+: { labels: labels } },
    '#withLabelsMixin':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
    withLabelsMixin(labels): { metadata+: { labels+: labels } },
    '#withName':: d.fn(help='"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { metadata+: { name: name } },
    '#withNamespace':: d.fn(help='"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\"default\\" namespace, but \\"default\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { metadata+: { namespace: namespace } },
    '#withOwnerReferences':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferences(ownerReferences): { metadata+: { ownerReferences: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withOwnerReferencesMixin':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferencesMixin(ownerReferences): { metadata+: { ownerReferences+: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withResourceVersion':: d.fn(help='"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
    withResourceVersion(resourceVersion): { metadata+: { resourceVersion: resourceVersion } },
    '#withSelfLink':: d.fn(help='"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."', args=[d.arg(name='selfLink', type=d.T.string)]),
    withSelfLink(selfLink): { metadata+: { selfLink: selfLink } },
    '#withUid':: d.fn(help='"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"', args=[d.arg(name='uid', type=d.T.string)]),
    withUid(uid): { metadata+: { uid: uid } },
  },
  '#new':: d.fn(help='new returns an instance of Rollout', args=[d.arg(name='name', type=d.T.string)]),
  new(name): {
    apiVersion: 'argoproj.io/v1alpha1',
    kind: 'Rollout',
  } + self.metadata.withName(name=name),
  '#spec':: d.obj(help=''),
  spec: {
    '#analysis':: d.obj(help=''),
    analysis: {
      '#withSuccessfulRunHistoryLimit':: d.fn(help='', args=[d.arg(name='successfulRunHistoryLimit', type=d.T.integer)]),
      withSuccessfulRunHistoryLimit(successfulRunHistoryLimit): { spec+: { analysis+: { successfulRunHistoryLimit: successfulRunHistoryLimit } } },
      '#withUnsuccessfulRunHistoryLimit':: d.fn(help='', args=[d.arg(name='unsuccessfulRunHistoryLimit', type=d.T.integer)]),
      withUnsuccessfulRunHistoryLimit(unsuccessfulRunHistoryLimit): { spec+: { analysis+: { unsuccessfulRunHistoryLimit: unsuccessfulRunHistoryLimit } } },
    },
    '#rollbackWindow':: d.obj(help=''),
    rollbackWindow: {
      '#withRevisions':: d.fn(help='', args=[d.arg(name='revisions', type=d.T.integer)]),
      withRevisions(revisions): { spec+: { rollbackWindow+: { revisions: revisions } } },
    },
    '#selector':: d.obj(help=''),
    selector: {
      '#matchExpressions':: d.obj(help=''),
      matchExpressions: {
        '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { key: key },
        '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
        withOperator(operator): { operator: operator },
        '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
        withValues(values): { values: if std.isArray(v=values) then values else [values] },
        '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
        withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
      },
      '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
      withMatchExpressions(matchExpressions): { spec+: { selector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
      '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
      withMatchExpressionsMixin(matchExpressions): { spec+: { selector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
      '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
      withMatchLabels(matchLabels): { spec+: { selector+: { matchLabels: matchLabels } } },
      '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
      withMatchLabelsMixin(matchLabels): { spec+: { selector+: { matchLabels+: matchLabels } } },
    },
    '#strategy':: d.obj(help=''),
    strategy: {
      '#blueGreen':: d.obj(help=''),
      blueGreen: {
        '#activeMetadata':: d.obj(help=''),
        activeMetadata: {
          '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
          withAnnotations(annotations): { spec+: { strategy+: { blueGreen+: { activeMetadata+: { annotations: annotations } } } } },
          '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
          withAnnotationsMixin(annotations): { spec+: { strategy+: { blueGreen+: { activeMetadata+: { annotations+: annotations } } } } },
          '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
          withLabels(labels): { spec+: { strategy+: { blueGreen+: { activeMetadata+: { labels: labels } } } } },
          '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
          withLabelsMixin(labels): { spec+: { strategy+: { blueGreen+: { activeMetadata+: { labels+: labels } } } } },
        },
        '#antiAffinity':: d.obj(help=''),
        antiAffinity: {
          '#preferredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
          preferredDuringSchedulingIgnoredDuringExecution: {
            '#withWeight':: d.fn(help='', args=[d.arg(name='weight', type=d.T.integer)]),
            withWeight(weight): { spec+: { strategy+: { blueGreen+: { antiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: { weight: weight } } } } } },
          },
          '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.object)]),
          withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { strategy+: { blueGreen+: { antiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: requiredDuringSchedulingIgnoredDuringExecution } } } } },
          '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.object)]),
          withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { strategy+: { blueGreen+: { antiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution } } } } },
        },
        '#postPromotionAnalysis':: d.obj(help=''),
        postPromotionAnalysis: {
          '#analysisRunMetadata':: d.obj(help=''),
          analysisRunMetadata: {
            '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotations(annotations): { spec+: { strategy+: { blueGreen+: { postPromotionAnalysis+: { analysisRunMetadata+: { annotations: annotations } } } } } },
            '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotationsMixin(annotations): { spec+: { strategy+: { blueGreen+: { postPromotionAnalysis+: { analysisRunMetadata+: { annotations+: annotations } } } } } },
            '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
            withLabels(labels): { spec+: { strategy+: { blueGreen+: { postPromotionAnalysis+: { analysisRunMetadata+: { labels: labels } } } } } },
            '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
            withLabelsMixin(labels): { spec+: { strategy+: { blueGreen+: { postPromotionAnalysis+: { analysisRunMetadata+: { labels+: labels } } } } } },
          },
          '#args':: d.obj(help=''),
          args: {
            '#valueFrom':: d.obj(help=''),
            valueFrom: {
              '#fieldRef':: d.obj(help=''),
              fieldRef: {
                '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
                withFieldPath(fieldPath): { valueFrom+: { fieldRef+: { fieldPath: fieldPath } } },
              },
              '#withPodTemplateHashValue':: d.fn(help='', args=[d.arg(name='podTemplateHashValue', type=d.T.string)]),
              withPodTemplateHashValue(podTemplateHashValue): { valueFrom+: { podTemplateHashValue: podTemplateHashValue } },
            },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
            withValue(value): { value: value },
          },
          '#dryRun':: d.obj(help=''),
          dryRun: {
            '#withMetricName':: d.fn(help='', args=[d.arg(name='metricName', type=d.T.string)]),
            withMetricName(metricName): { metricName: metricName },
          },
          '#measurementRetention':: d.obj(help=''),
          measurementRetention: {
            '#withLimit':: d.fn(help='', args=[d.arg(name='limit', type=d.T.integer)]),
            withLimit(limit): { limit: limit },
            '#withMetricName':: d.fn(help='', args=[d.arg(name='metricName', type=d.T.string)]),
            withMetricName(metricName): { metricName: metricName },
          },
          '#templates':: d.obj(help=''),
          templates: {
            '#withClusterScope':: d.fn(help='', args=[d.arg(name='clusterScope', type=d.T.boolean)]),
            withClusterScope(clusterScope): { clusterScope: clusterScope },
            '#withTemplateName':: d.fn(help='', args=[d.arg(name='templateName', type=d.T.string)]),
            withTemplateName(templateName): { templateName: templateName },
          },
          '#withArgs':: d.fn(help='', args=[d.arg(name='args', type=d.T.array)]),
          withArgs(args): { spec+: { strategy+: { blueGreen+: { postPromotionAnalysis+: { args: if std.isArray(v=args) then args else [args] } } } } },
          '#withArgsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='args', type=d.T.array)]),
          withArgsMixin(args): { spec+: { strategy+: { blueGreen+: { postPromotionAnalysis+: { args+: if std.isArray(v=args) then args else [args] } } } } },
          '#withDryRun':: d.fn(help='', args=[d.arg(name='dryRun', type=d.T.array)]),
          withDryRun(dryRun): { spec+: { strategy+: { blueGreen+: { postPromotionAnalysis+: { dryRun: if std.isArray(v=dryRun) then dryRun else [dryRun] } } } } },
          '#withDryRunMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='dryRun', type=d.T.array)]),
          withDryRunMixin(dryRun): { spec+: { strategy+: { blueGreen+: { postPromotionAnalysis+: { dryRun+: if std.isArray(v=dryRun) then dryRun else [dryRun] } } } } },
          '#withMeasurementRetention':: d.fn(help='', args=[d.arg(name='measurementRetention', type=d.T.array)]),
          withMeasurementRetention(measurementRetention): { spec+: { strategy+: { blueGreen+: { postPromotionAnalysis+: { measurementRetention: if std.isArray(v=measurementRetention) then measurementRetention else [measurementRetention] } } } } },
          '#withMeasurementRetentionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='measurementRetention', type=d.T.array)]),
          withMeasurementRetentionMixin(measurementRetention): { spec+: { strategy+: { blueGreen+: { postPromotionAnalysis+: { measurementRetention+: if std.isArray(v=measurementRetention) then measurementRetention else [measurementRetention] } } } } },
          '#withTemplates':: d.fn(help='', args=[d.arg(name='templates', type=d.T.array)]),
          withTemplates(templates): { spec+: { strategy+: { blueGreen+: { postPromotionAnalysis+: { templates: if std.isArray(v=templates) then templates else [templates] } } } } },
          '#withTemplatesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='templates', type=d.T.array)]),
          withTemplatesMixin(templates): { spec+: { strategy+: { blueGreen+: { postPromotionAnalysis+: { templates+: if std.isArray(v=templates) then templates else [templates] } } } } },
        },
        '#prePromotionAnalysis':: d.obj(help=''),
        prePromotionAnalysis: {
          '#analysisRunMetadata':: d.obj(help=''),
          analysisRunMetadata: {
            '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotations(annotations): { spec+: { strategy+: { blueGreen+: { prePromotionAnalysis+: { analysisRunMetadata+: { annotations: annotations } } } } } },
            '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotationsMixin(annotations): { spec+: { strategy+: { blueGreen+: { prePromotionAnalysis+: { analysisRunMetadata+: { annotations+: annotations } } } } } },
            '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
            withLabels(labels): { spec+: { strategy+: { blueGreen+: { prePromotionAnalysis+: { analysisRunMetadata+: { labels: labels } } } } } },
            '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
            withLabelsMixin(labels): { spec+: { strategy+: { blueGreen+: { prePromotionAnalysis+: { analysisRunMetadata+: { labels+: labels } } } } } },
          },
          '#args':: d.obj(help=''),
          args: {
            '#valueFrom':: d.obj(help=''),
            valueFrom: {
              '#fieldRef':: d.obj(help=''),
              fieldRef: {
                '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
                withFieldPath(fieldPath): { valueFrom+: { fieldRef+: { fieldPath: fieldPath } } },
              },
              '#withPodTemplateHashValue':: d.fn(help='', args=[d.arg(name='podTemplateHashValue', type=d.T.string)]),
              withPodTemplateHashValue(podTemplateHashValue): { valueFrom+: { podTemplateHashValue: podTemplateHashValue } },
            },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
            withValue(value): { value: value },
          },
          '#dryRun':: d.obj(help=''),
          dryRun: {
            '#withMetricName':: d.fn(help='', args=[d.arg(name='metricName', type=d.T.string)]),
            withMetricName(metricName): { metricName: metricName },
          },
          '#measurementRetention':: d.obj(help=''),
          measurementRetention: {
            '#withLimit':: d.fn(help='', args=[d.arg(name='limit', type=d.T.integer)]),
            withLimit(limit): { limit: limit },
            '#withMetricName':: d.fn(help='', args=[d.arg(name='metricName', type=d.T.string)]),
            withMetricName(metricName): { metricName: metricName },
          },
          '#templates':: d.obj(help=''),
          templates: {
            '#withClusterScope':: d.fn(help='', args=[d.arg(name='clusterScope', type=d.T.boolean)]),
            withClusterScope(clusterScope): { clusterScope: clusterScope },
            '#withTemplateName':: d.fn(help='', args=[d.arg(name='templateName', type=d.T.string)]),
            withTemplateName(templateName): { templateName: templateName },
          },
          '#withArgs':: d.fn(help='', args=[d.arg(name='args', type=d.T.array)]),
          withArgs(args): { spec+: { strategy+: { blueGreen+: { prePromotionAnalysis+: { args: if std.isArray(v=args) then args else [args] } } } } },
          '#withArgsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='args', type=d.T.array)]),
          withArgsMixin(args): { spec+: { strategy+: { blueGreen+: { prePromotionAnalysis+: { args+: if std.isArray(v=args) then args else [args] } } } } },
          '#withDryRun':: d.fn(help='', args=[d.arg(name='dryRun', type=d.T.array)]),
          withDryRun(dryRun): { spec+: { strategy+: { blueGreen+: { prePromotionAnalysis+: { dryRun: if std.isArray(v=dryRun) then dryRun else [dryRun] } } } } },
          '#withDryRunMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='dryRun', type=d.T.array)]),
          withDryRunMixin(dryRun): { spec+: { strategy+: { blueGreen+: { prePromotionAnalysis+: { dryRun+: if std.isArray(v=dryRun) then dryRun else [dryRun] } } } } },
          '#withMeasurementRetention':: d.fn(help='', args=[d.arg(name='measurementRetention', type=d.T.array)]),
          withMeasurementRetention(measurementRetention): { spec+: { strategy+: { blueGreen+: { prePromotionAnalysis+: { measurementRetention: if std.isArray(v=measurementRetention) then measurementRetention else [measurementRetention] } } } } },
          '#withMeasurementRetentionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='measurementRetention', type=d.T.array)]),
          withMeasurementRetentionMixin(measurementRetention): { spec+: { strategy+: { blueGreen+: { prePromotionAnalysis+: { measurementRetention+: if std.isArray(v=measurementRetention) then measurementRetention else [measurementRetention] } } } } },
          '#withTemplates':: d.fn(help='', args=[d.arg(name='templates', type=d.T.array)]),
          withTemplates(templates): { spec+: { strategy+: { blueGreen+: { prePromotionAnalysis+: { templates: if std.isArray(v=templates) then templates else [templates] } } } } },
          '#withTemplatesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='templates', type=d.T.array)]),
          withTemplatesMixin(templates): { spec+: { strategy+: { blueGreen+: { prePromotionAnalysis+: { templates+: if std.isArray(v=templates) then templates else [templates] } } } } },
        },
        '#previewMetadata':: d.obj(help=''),
        previewMetadata: {
          '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
          withAnnotations(annotations): { spec+: { strategy+: { blueGreen+: { previewMetadata+: { annotations: annotations } } } } },
          '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
          withAnnotationsMixin(annotations): { spec+: { strategy+: { blueGreen+: { previewMetadata+: { annotations+: annotations } } } } },
          '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
          withLabels(labels): { spec+: { strategy+: { blueGreen+: { previewMetadata+: { labels: labels } } } } },
          '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
          withLabelsMixin(labels): { spec+: { strategy+: { blueGreen+: { previewMetadata+: { labels+: labels } } } } },
        },
        '#withAbortScaleDownDelaySeconds':: d.fn(help='', args=[d.arg(name='abortScaleDownDelaySeconds', type=d.T.integer)]),
        withAbortScaleDownDelaySeconds(abortScaleDownDelaySeconds): { spec+: { strategy+: { blueGreen+: { abortScaleDownDelaySeconds: abortScaleDownDelaySeconds } } } },
        '#withActiveService':: d.fn(help='', args=[d.arg(name='activeService', type=d.T.string)]),
        withActiveService(activeService): { spec+: { strategy+: { blueGreen+: { activeService: activeService } } } },
        '#withAutoPromotionEnabled':: d.fn(help='', args=[d.arg(name='autoPromotionEnabled', type=d.T.boolean)]),
        withAutoPromotionEnabled(autoPromotionEnabled): { spec+: { strategy+: { blueGreen+: { autoPromotionEnabled: autoPromotionEnabled } } } },
        '#withAutoPromotionSeconds':: d.fn(help='', args=[d.arg(name='autoPromotionSeconds', type=d.T.integer)]),
        withAutoPromotionSeconds(autoPromotionSeconds): { spec+: { strategy+: { blueGreen+: { autoPromotionSeconds: autoPromotionSeconds } } } },
        '#withMaxUnavailable':: d.fn(help='', args=[d.arg(name='maxUnavailable', type=d.T.any)]),
        withMaxUnavailable(maxUnavailable): { spec+: { strategy+: { blueGreen+: { maxUnavailable: maxUnavailable } } } },
        '#withPreviewReplicaCount':: d.fn(help='', args=[d.arg(name='previewReplicaCount', type=d.T.integer)]),
        withPreviewReplicaCount(previewReplicaCount): { spec+: { strategy+: { blueGreen+: { previewReplicaCount: previewReplicaCount } } } },
        '#withPreviewService':: d.fn(help='', args=[d.arg(name='previewService', type=d.T.string)]),
        withPreviewService(previewService): { spec+: { strategy+: { blueGreen+: { previewService: previewService } } } },
        '#withScaleDownDelayRevisionLimit':: d.fn(help='', args=[d.arg(name='scaleDownDelayRevisionLimit', type=d.T.integer)]),
        withScaleDownDelayRevisionLimit(scaleDownDelayRevisionLimit): { spec+: { strategy+: { blueGreen+: { scaleDownDelayRevisionLimit: scaleDownDelayRevisionLimit } } } },
        '#withScaleDownDelaySeconds':: d.fn(help='', args=[d.arg(name='scaleDownDelaySeconds', type=d.T.integer)]),
        withScaleDownDelaySeconds(scaleDownDelaySeconds): { spec+: { strategy+: { blueGreen+: { scaleDownDelaySeconds: scaleDownDelaySeconds } } } },
      },
      '#canary':: d.obj(help=''),
      canary: {
        '#analysis':: d.obj(help=''),
        analysis: {
          '#analysisRunMetadata':: d.obj(help=''),
          analysisRunMetadata: {
            '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotations(annotations): { spec+: { strategy+: { canary+: { analysis+: { analysisRunMetadata+: { annotations: annotations } } } } } },
            '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
            withAnnotationsMixin(annotations): { spec+: { strategy+: { canary+: { analysis+: { analysisRunMetadata+: { annotations+: annotations } } } } } },
            '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
            withLabels(labels): { spec+: { strategy+: { canary+: { analysis+: { analysisRunMetadata+: { labels: labels } } } } } },
            '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
            withLabelsMixin(labels): { spec+: { strategy+: { canary+: { analysis+: { analysisRunMetadata+: { labels+: labels } } } } } },
          },
          '#args':: d.obj(help=''),
          args: {
            '#valueFrom':: d.obj(help=''),
            valueFrom: {
              '#fieldRef':: d.obj(help=''),
              fieldRef: {
                '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
                withFieldPath(fieldPath): { valueFrom+: { fieldRef+: { fieldPath: fieldPath } } },
              },
              '#withPodTemplateHashValue':: d.fn(help='', args=[d.arg(name='podTemplateHashValue', type=d.T.string)]),
              withPodTemplateHashValue(podTemplateHashValue): { valueFrom+: { podTemplateHashValue: podTemplateHashValue } },
            },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
            withValue(value): { value: value },
          },
          '#dryRun':: d.obj(help=''),
          dryRun: {
            '#withMetricName':: d.fn(help='', args=[d.arg(name='metricName', type=d.T.string)]),
            withMetricName(metricName): { metricName: metricName },
          },
          '#measurementRetention':: d.obj(help=''),
          measurementRetention: {
            '#withLimit':: d.fn(help='', args=[d.arg(name='limit', type=d.T.integer)]),
            withLimit(limit): { limit: limit },
            '#withMetricName':: d.fn(help='', args=[d.arg(name='metricName', type=d.T.string)]),
            withMetricName(metricName): { metricName: metricName },
          },
          '#templates':: d.obj(help=''),
          templates: {
            '#withClusterScope':: d.fn(help='', args=[d.arg(name='clusterScope', type=d.T.boolean)]),
            withClusterScope(clusterScope): { clusterScope: clusterScope },
            '#withTemplateName':: d.fn(help='', args=[d.arg(name='templateName', type=d.T.string)]),
            withTemplateName(templateName): { templateName: templateName },
          },
          '#withArgs':: d.fn(help='', args=[d.arg(name='args', type=d.T.array)]),
          withArgs(args): { spec+: { strategy+: { canary+: { analysis+: { args: if std.isArray(v=args) then args else [args] } } } } },
          '#withArgsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='args', type=d.T.array)]),
          withArgsMixin(args): { spec+: { strategy+: { canary+: { analysis+: { args+: if std.isArray(v=args) then args else [args] } } } } },
          '#withDryRun':: d.fn(help='', args=[d.arg(name='dryRun', type=d.T.array)]),
          withDryRun(dryRun): { spec+: { strategy+: { canary+: { analysis+: { dryRun: if std.isArray(v=dryRun) then dryRun else [dryRun] } } } } },
          '#withDryRunMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='dryRun', type=d.T.array)]),
          withDryRunMixin(dryRun): { spec+: { strategy+: { canary+: { analysis+: { dryRun+: if std.isArray(v=dryRun) then dryRun else [dryRun] } } } } },
          '#withMeasurementRetention':: d.fn(help='', args=[d.arg(name='measurementRetention', type=d.T.array)]),
          withMeasurementRetention(measurementRetention): { spec+: { strategy+: { canary+: { analysis+: { measurementRetention: if std.isArray(v=measurementRetention) then measurementRetention else [measurementRetention] } } } } },
          '#withMeasurementRetentionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='measurementRetention', type=d.T.array)]),
          withMeasurementRetentionMixin(measurementRetention): { spec+: { strategy+: { canary+: { analysis+: { measurementRetention+: if std.isArray(v=measurementRetention) then measurementRetention else [measurementRetention] } } } } },
          '#withStartingStep':: d.fn(help='', args=[d.arg(name='startingStep', type=d.T.integer)]),
          withStartingStep(startingStep): { spec+: { strategy+: { canary+: { analysis+: { startingStep: startingStep } } } } },
          '#withTemplates':: d.fn(help='', args=[d.arg(name='templates', type=d.T.array)]),
          withTemplates(templates): { spec+: { strategy+: { canary+: { analysis+: { templates: if std.isArray(v=templates) then templates else [templates] } } } } },
          '#withTemplatesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='templates', type=d.T.array)]),
          withTemplatesMixin(templates): { spec+: { strategy+: { canary+: { analysis+: { templates+: if std.isArray(v=templates) then templates else [templates] } } } } },
        },
        '#antiAffinity':: d.obj(help=''),
        antiAffinity: {
          '#preferredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
          preferredDuringSchedulingIgnoredDuringExecution: {
            '#withWeight':: d.fn(help='', args=[d.arg(name='weight', type=d.T.integer)]),
            withWeight(weight): { spec+: { strategy+: { canary+: { antiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: { weight: weight } } } } } },
          },
          '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.object)]),
          withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { strategy+: { canary+: { antiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: requiredDuringSchedulingIgnoredDuringExecution } } } } },
          '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.object)]),
          withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { strategy+: { canary+: { antiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution } } } } },
        },
        '#canaryMetadata':: d.obj(help=''),
        canaryMetadata: {
          '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
          withAnnotations(annotations): { spec+: { strategy+: { canary+: { canaryMetadata+: { annotations: annotations } } } } },
          '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
          withAnnotationsMixin(annotations): { spec+: { strategy+: { canary+: { canaryMetadata+: { annotations+: annotations } } } } },
          '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
          withLabels(labels): { spec+: { strategy+: { canary+: { canaryMetadata+: { labels: labels } } } } },
          '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
          withLabelsMixin(labels): { spec+: { strategy+: { canary+: { canaryMetadata+: { labels+: labels } } } } },
        },
        '#pingPong':: d.obj(help=''),
        pingPong: {
          '#withPingService':: d.fn(help='', args=[d.arg(name='pingService', type=d.T.string)]),
          withPingService(pingService): { spec+: { strategy+: { canary+: { pingPong+: { pingService: pingService } } } } },
          '#withPongService':: d.fn(help='', args=[d.arg(name='pongService', type=d.T.string)]),
          withPongService(pongService): { spec+: { strategy+: { canary+: { pingPong+: { pongService: pongService } } } } },
        },
        '#stableMetadata':: d.obj(help=''),
        stableMetadata: {
          '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
          withAnnotations(annotations): { spec+: { strategy+: { canary+: { stableMetadata+: { annotations: annotations } } } } },
          '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
          withAnnotationsMixin(annotations): { spec+: { strategy+: { canary+: { stableMetadata+: { annotations+: annotations } } } } },
          '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
          withLabels(labels): { spec+: { strategy+: { canary+: { stableMetadata+: { labels: labels } } } } },
          '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
          withLabelsMixin(labels): { spec+: { strategy+: { canary+: { stableMetadata+: { labels+: labels } } } } },
        },
        '#steps':: d.obj(help=''),
        steps: {
          '#analysis':: d.obj(help=''),
          analysis: {
            '#analysisRunMetadata':: d.obj(help=''),
            analysisRunMetadata: {
              '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
              withAnnotations(annotations): { analysis+: { analysisRunMetadata+: { annotations: annotations } } },
              '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
              withAnnotationsMixin(annotations): { analysis+: { analysisRunMetadata+: { annotations+: annotations } } },
              '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
              withLabels(labels): { analysis+: { analysisRunMetadata+: { labels: labels } } },
              '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
              withLabelsMixin(labels): { analysis+: { analysisRunMetadata+: { labels+: labels } } },
            },
            '#args':: d.obj(help=''),
            args: {
              '#valueFrom':: d.obj(help=''),
              valueFrom: {
                '#fieldRef':: d.obj(help=''),
                fieldRef: {
                  '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
                  withFieldPath(fieldPath): { valueFrom+: { fieldRef+: { fieldPath: fieldPath } } },
                },
                '#withPodTemplateHashValue':: d.fn(help='', args=[d.arg(name='podTemplateHashValue', type=d.T.string)]),
                withPodTemplateHashValue(podTemplateHashValue): { valueFrom+: { podTemplateHashValue: podTemplateHashValue } },
              },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#dryRun':: d.obj(help=''),
            dryRun: {
              '#withMetricName':: d.fn(help='', args=[d.arg(name='metricName', type=d.T.string)]),
              withMetricName(metricName): { metricName: metricName },
            },
            '#measurementRetention':: d.obj(help=''),
            measurementRetention: {
              '#withLimit':: d.fn(help='', args=[d.arg(name='limit', type=d.T.integer)]),
              withLimit(limit): { limit: limit },
              '#withMetricName':: d.fn(help='', args=[d.arg(name='metricName', type=d.T.string)]),
              withMetricName(metricName): { metricName: metricName },
            },
            '#templates':: d.obj(help=''),
            templates: {
              '#withClusterScope':: d.fn(help='', args=[d.arg(name='clusterScope', type=d.T.boolean)]),
              withClusterScope(clusterScope): { clusterScope: clusterScope },
              '#withTemplateName':: d.fn(help='', args=[d.arg(name='templateName', type=d.T.string)]),
              withTemplateName(templateName): { templateName: templateName },
            },
            '#withArgs':: d.fn(help='', args=[d.arg(name='args', type=d.T.array)]),
            withArgs(args): { analysis+: { args: if std.isArray(v=args) then args else [args] } },
            '#withArgsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='args', type=d.T.array)]),
            withArgsMixin(args): { analysis+: { args+: if std.isArray(v=args) then args else [args] } },
            '#withDryRun':: d.fn(help='', args=[d.arg(name='dryRun', type=d.T.array)]),
            withDryRun(dryRun): { analysis+: { dryRun: if std.isArray(v=dryRun) then dryRun else [dryRun] } },
            '#withDryRunMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='dryRun', type=d.T.array)]),
            withDryRunMixin(dryRun): { analysis+: { dryRun+: if std.isArray(v=dryRun) then dryRun else [dryRun] } },
            '#withMeasurementRetention':: d.fn(help='', args=[d.arg(name='measurementRetention', type=d.T.array)]),
            withMeasurementRetention(measurementRetention): { analysis+: { measurementRetention: if std.isArray(v=measurementRetention) then measurementRetention else [measurementRetention] } },
            '#withMeasurementRetentionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='measurementRetention', type=d.T.array)]),
            withMeasurementRetentionMixin(measurementRetention): { analysis+: { measurementRetention+: if std.isArray(v=measurementRetention) then measurementRetention else [measurementRetention] } },
            '#withTemplates':: d.fn(help='', args=[d.arg(name='templates', type=d.T.array)]),
            withTemplates(templates): { analysis+: { templates: if std.isArray(v=templates) then templates else [templates] } },
            '#withTemplatesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='templates', type=d.T.array)]),
            withTemplatesMixin(templates): { analysis+: { templates+: if std.isArray(v=templates) then templates else [templates] } },
          },
          '#experiment':: d.obj(help=''),
          experiment: {
            '#analyses':: d.obj(help=''),
            analyses: {
              '#args':: d.obj(help=''),
              args: {
                '#valueFrom':: d.obj(help=''),
                valueFrom: {
                  '#fieldRef':: d.obj(help=''),
                  fieldRef: {
                    '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
                    withFieldPath(fieldPath): { valueFrom+: { fieldRef+: { fieldPath: fieldPath } } },
                  },
                  '#withPodTemplateHashValue':: d.fn(help='', args=[d.arg(name='podTemplateHashValue', type=d.T.string)]),
                  withPodTemplateHashValue(podTemplateHashValue): { valueFrom+: { podTemplateHashValue: podTemplateHashValue } },
                },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#withArgs':: d.fn(help='', args=[d.arg(name='args', type=d.T.array)]),
              withArgs(args): { args: if std.isArray(v=args) then args else [args] },
              '#withArgsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='args', type=d.T.array)]),
              withArgsMixin(args): { args+: if std.isArray(v=args) then args else [args] },
              '#withClusterScope':: d.fn(help='', args=[d.arg(name='clusterScope', type=d.T.boolean)]),
              withClusterScope(clusterScope): { clusterScope: clusterScope },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withRequiredForCompletion':: d.fn(help='', args=[d.arg(name='requiredForCompletion', type=d.T.boolean)]),
              withRequiredForCompletion(requiredForCompletion): { requiredForCompletion: requiredForCompletion },
              '#withTemplateName':: d.fn(help='', args=[d.arg(name='templateName', type=d.T.string)]),
              withTemplateName(templateName): { templateName: templateName },
            },
            '#analysisRunMetadata':: d.obj(help=''),
            analysisRunMetadata: {
              '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
              withAnnotations(annotations): { experiment+: { analysisRunMetadata+: { annotations: annotations } } },
              '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
              withAnnotationsMixin(annotations): { experiment+: { analysisRunMetadata+: { annotations+: annotations } } },
              '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
              withLabels(labels): { experiment+: { analysisRunMetadata+: { labels: labels } } },
              '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
              withLabelsMixin(labels): { experiment+: { analysisRunMetadata+: { labels+: labels } } },
            },
            '#dryRun':: d.obj(help=''),
            dryRun: {
              '#withMetricName':: d.fn(help='', args=[d.arg(name='metricName', type=d.T.string)]),
              withMetricName(metricName): { metricName: metricName },
            },
            '#templates':: d.obj(help=''),
            templates: {
              '#metadata':: d.obj(help=''),
              metadata: {
                '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotations(annotations): { metadata+: { annotations: annotations } },
                '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
                withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
                '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
                withLabels(labels): { metadata+: { labels: labels } },
                '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
                withLabelsMixin(labels): { metadata+: { labels+: labels } },
              },
              '#selector':: d.obj(help=''),
              selector: {
                '#matchExpressions':: d.obj(help=''),
                matchExpressions: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                  withOperator(operator): { operator: operator },
                  '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                  withValues(values): { values: if std.isArray(v=values) then values else [values] },
                  '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                  withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                },
                '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressions(matchExpressions): { selector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressionsMixin(matchExpressions): { selector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabels(matchLabels): { selector+: { matchLabels: matchLabels } },
                '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabelsMixin(matchLabels): { selector+: { matchLabels+: matchLabels } },
              },
              '#service':: d.obj(help=''),
              service: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { service+: { name: name } },
              },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.integer)]),
              withReplicas(replicas): { replicas: replicas },
              '#withSpecRef':: d.fn(help='', args=[d.arg(name='specRef', type=d.T.string)]),
              withSpecRef(specRef): { specRef: specRef },
              '#withWeight':: d.fn(help='', args=[d.arg(name='weight', type=d.T.integer)]),
              withWeight(weight): { weight: weight },
            },
            '#withAnalyses':: d.fn(help='', args=[d.arg(name='analyses', type=d.T.array)]),
            withAnalyses(analyses): { experiment+: { analyses: if std.isArray(v=analyses) then analyses else [analyses] } },
            '#withAnalysesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='analyses', type=d.T.array)]),
            withAnalysesMixin(analyses): { experiment+: { analyses+: if std.isArray(v=analyses) then analyses else [analyses] } },
            '#withDryRun':: d.fn(help='', args=[d.arg(name='dryRun', type=d.T.array)]),
            withDryRun(dryRun): { experiment+: { dryRun: if std.isArray(v=dryRun) then dryRun else [dryRun] } },
            '#withDryRunMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='dryRun', type=d.T.array)]),
            withDryRunMixin(dryRun): { experiment+: { dryRun+: if std.isArray(v=dryRun) then dryRun else [dryRun] } },
            '#withDuration':: d.fn(help='', args=[d.arg(name='duration', type=d.T.string)]),
            withDuration(duration): { experiment+: { duration: duration } },
            '#withTemplates':: d.fn(help='', args=[d.arg(name='templates', type=d.T.array)]),
            withTemplates(templates): { experiment+: { templates: if std.isArray(v=templates) then templates else [templates] } },
            '#withTemplatesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='templates', type=d.T.array)]),
            withTemplatesMixin(templates): { experiment+: { templates+: if std.isArray(v=templates) then templates else [templates] } },
          },
          '#pause':: d.obj(help=''),
          pause: {
            '#withDuration':: d.fn(help='', args=[d.arg(name='duration', type=d.T.any)]),
            withDuration(duration): { pause+: { duration: duration } },
          },
          '#setCanaryScale':: d.obj(help=''),
          setCanaryScale: {
            '#withMatchTrafficWeight':: d.fn(help='', args=[d.arg(name='matchTrafficWeight', type=d.T.boolean)]),
            withMatchTrafficWeight(matchTrafficWeight): { setCanaryScale+: { matchTrafficWeight: matchTrafficWeight } },
            '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.integer)]),
            withReplicas(replicas): { setCanaryScale+: { replicas: replicas } },
            '#withWeight':: d.fn(help='', args=[d.arg(name='weight', type=d.T.integer)]),
            withWeight(weight): { setCanaryScale+: { weight: weight } },
          },
          '#setHeaderRoute':: d.obj(help=''),
          setHeaderRoute: {
            '#match':: d.obj(help=''),
            match: {
              '#headerValue':: d.obj(help=''),
              headerValue: {
                '#withExact':: d.fn(help='', args=[d.arg(name='exact', type=d.T.string)]),
                withExact(exact): { headerValue+: { exact: exact } },
                '#withPrefix':: d.fn(help='', args=[d.arg(name='prefix', type=d.T.string)]),
                withPrefix(prefix): { headerValue+: { prefix: prefix } },
                '#withRegex':: d.fn(help='', args=[d.arg(name='regex', type=d.T.string)]),
                withRegex(regex): { headerValue+: { regex: regex } },
              },
              '#withHeaderName':: d.fn(help='', args=[d.arg(name='headerName', type=d.T.string)]),
              withHeaderName(headerName): { headerName: headerName },
            },
            '#withMatch':: d.fn(help='', args=[d.arg(name='match', type=d.T.array)]),
            withMatch(match): { setHeaderRoute+: { match: if std.isArray(v=match) then match else [match] } },
            '#withMatchMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='match', type=d.T.array)]),
            withMatchMixin(match): { setHeaderRoute+: { match+: if std.isArray(v=match) then match else [match] } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { setHeaderRoute+: { name: name } },
          },
          '#setMirrorRoute':: d.obj(help=''),
          setMirrorRoute: {
            '#match':: d.obj(help=''),
            match: {
              '#method':: d.obj(help=''),
              method: {
                '#withExact':: d.fn(help='', args=[d.arg(name='exact', type=d.T.string)]),
                withExact(exact): { method+: { exact: exact } },
                '#withPrefix':: d.fn(help='', args=[d.arg(name='prefix', type=d.T.string)]),
                withPrefix(prefix): { method+: { prefix: prefix } },
                '#withRegex':: d.fn(help='', args=[d.arg(name='regex', type=d.T.string)]),
                withRegex(regex): { method+: { regex: regex } },
              },
              '#path':: d.obj(help=''),
              path: {
                '#withExact':: d.fn(help='', args=[d.arg(name='exact', type=d.T.string)]),
                withExact(exact): { path+: { exact: exact } },
                '#withPrefix':: d.fn(help='', args=[d.arg(name='prefix', type=d.T.string)]),
                withPrefix(prefix): { path+: { prefix: prefix } },
                '#withRegex':: d.fn(help='', args=[d.arg(name='regex', type=d.T.string)]),
                withRegex(regex): { path+: { regex: regex } },
              },
              '#withHeaders':: d.fn(help='', args=[d.arg(name='headers', type=d.T.object)]),
              withHeaders(headers): { headers: headers },
              '#withHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='headers', type=d.T.object)]),
              withHeadersMixin(headers): { headers+: headers },
            },
            '#withMatch':: d.fn(help='', args=[d.arg(name='match', type=d.T.array)]),
            withMatch(match): { setMirrorRoute+: { match: if std.isArray(v=match) then match else [match] } },
            '#withMatchMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='match', type=d.T.array)]),
            withMatchMixin(match): { setMirrorRoute+: { match+: if std.isArray(v=match) then match else [match] } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { setMirrorRoute+: { name: name } },
            '#withPercentage':: d.fn(help='', args=[d.arg(name='percentage', type=d.T.integer)]),
            withPercentage(percentage): { setMirrorRoute+: { percentage: percentage } },
          },
          '#withSetWeight':: d.fn(help='', args=[d.arg(name='setWeight', type=d.T.integer)]),
          withSetWeight(setWeight): { setWeight: setWeight },
        },
        '#trafficRouting':: d.obj(help=''),
        trafficRouting: {
          '#alb':: d.obj(help=''),
          alb: {
            '#stickinessConfig':: d.obj(help=''),
            stickinessConfig: {
              '#withDurationSeconds':: d.fn(help='', args=[d.arg(name='durationSeconds', type=d.T.integer)]),
              withDurationSeconds(durationSeconds): { spec+: { strategy+: { canary+: { trafficRouting+: { alb+: { stickinessConfig+: { durationSeconds: durationSeconds } } } } } } },
              '#withEnabled':: d.fn(help='', args=[d.arg(name='enabled', type=d.T.boolean)]),
              withEnabled(enabled): { spec+: { strategy+: { canary+: { trafficRouting+: { alb+: { stickinessConfig+: { enabled: enabled } } } } } } },
            },
            '#withAnnotationPrefix':: d.fn(help='', args=[d.arg(name='annotationPrefix', type=d.T.string)]),
            withAnnotationPrefix(annotationPrefix): { spec+: { strategy+: { canary+: { trafficRouting+: { alb+: { annotationPrefix: annotationPrefix } } } } } },
            '#withIngress':: d.fn(help='', args=[d.arg(name='ingress', type=d.T.string)]),
            withIngress(ingress): { spec+: { strategy+: { canary+: { trafficRouting+: { alb+: { ingress: ingress } } } } } },
            '#withIngresses':: d.fn(help='', args=[d.arg(name='ingresses', type=d.T.array)]),
            withIngresses(ingresses): { spec+: { strategy+: { canary+: { trafficRouting+: { alb+: { ingresses: if std.isArray(v=ingresses) then ingresses else [ingresses] } } } } } },
            '#withIngressesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ingresses', type=d.T.array)]),
            withIngressesMixin(ingresses): { spec+: { strategy+: { canary+: { trafficRouting+: { alb+: { ingresses+: if std.isArray(v=ingresses) then ingresses else [ingresses] } } } } } },
            '#withRootService':: d.fn(help='', args=[d.arg(name='rootService', type=d.T.string)]),
            withRootService(rootService): { spec+: { strategy+: { canary+: { trafficRouting+: { alb+: { rootService: rootService } } } } } },
            '#withServicePort':: d.fn(help='', args=[d.arg(name='servicePort', type=d.T.integer)]),
            withServicePort(servicePort): { spec+: { strategy+: { canary+: { trafficRouting+: { alb+: { servicePort: servicePort } } } } } },
          },
          '#ambassador':: d.obj(help=''),
          ambassador: {
            '#withMappings':: d.fn(help='', args=[d.arg(name='mappings', type=d.T.array)]),
            withMappings(mappings): { spec+: { strategy+: { canary+: { trafficRouting+: { ambassador+: { mappings: if std.isArray(v=mappings) then mappings else [mappings] } } } } } },
            '#withMappingsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='mappings', type=d.T.array)]),
            withMappingsMixin(mappings): { spec+: { strategy+: { canary+: { trafficRouting+: { ambassador+: { mappings+: if std.isArray(v=mappings) then mappings else [mappings] } } } } } },
          },
          '#apisix':: d.obj(help=''),
          apisix: {
            '#route':: d.obj(help=''),
            route: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { strategy+: { canary+: { trafficRouting+: { apisix+: { route+: { name: name } } } } } } },
              '#withRules':: d.fn(help='', args=[d.arg(name='rules', type=d.T.array)]),
              withRules(rules): { spec+: { strategy+: { canary+: { trafficRouting+: { apisix+: { route+: { rules: if std.isArray(v=rules) then rules else [rules] } } } } } } },
              '#withRulesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='rules', type=d.T.array)]),
              withRulesMixin(rules): { spec+: { strategy+: { canary+: { trafficRouting+: { apisix+: { route+: { rules+: if std.isArray(v=rules) then rules else [rules] } } } } } } },
            },
          },
          '#appMesh':: d.obj(help=''),
          appMesh: {
            '#virtualNodeGroup':: d.obj(help=''),
            virtualNodeGroup: {
              '#canaryVirtualNodeRef':: d.obj(help=''),
              canaryVirtualNodeRef: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { spec+: { strategy+: { canary+: { trafficRouting+: { appMesh+: { virtualNodeGroup+: { canaryVirtualNodeRef+: { name: name } } } } } } } },
              },
              '#stableVirtualNodeRef':: d.obj(help=''),
              stableVirtualNodeRef: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { spec+: { strategy+: { canary+: { trafficRouting+: { appMesh+: { virtualNodeGroup+: { stableVirtualNodeRef+: { name: name } } } } } } } },
              },
            },
            '#virtualService':: d.obj(help=''),
            virtualService: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { strategy+: { canary+: { trafficRouting+: { appMesh+: { virtualService+: { name: name } } } } } } },
              '#withRoutes':: d.fn(help='', args=[d.arg(name='routes', type=d.T.array)]),
              withRoutes(routes): { spec+: { strategy+: { canary+: { trafficRouting+: { appMesh+: { virtualService+: { routes: if std.isArray(v=routes) then routes else [routes] } } } } } } },
              '#withRoutesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='routes', type=d.T.array)]),
              withRoutesMixin(routes): { spec+: { strategy+: { canary+: { trafficRouting+: { appMesh+: { virtualService+: { routes+: if std.isArray(v=routes) then routes else [routes] } } } } } } },
            },
          },
          '#istio':: d.obj(help=''),
          istio: {
            '#destinationRule':: d.obj(help=''),
            destinationRule: {
              '#withCanarySubsetName':: d.fn(help='', args=[d.arg(name='canarySubsetName', type=d.T.string)]),
              withCanarySubsetName(canarySubsetName): { spec+: { strategy+: { canary+: { trafficRouting+: { istio+: { destinationRule+: { canarySubsetName: canarySubsetName } } } } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { strategy+: { canary+: { trafficRouting+: { istio+: { destinationRule+: { name: name } } } } } } },
              '#withStableSubsetName':: d.fn(help='', args=[d.arg(name='stableSubsetName', type=d.T.string)]),
              withStableSubsetName(stableSubsetName): { spec+: { strategy+: { canary+: { trafficRouting+: { istio+: { destinationRule+: { stableSubsetName: stableSubsetName } } } } } } },
            },
            '#virtualService':: d.obj(help=''),
            virtualService: {
              '#tcpRoutes':: d.obj(help=''),
              tcpRoutes: {
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
                withPort(port): { port: port },
              },
              '#tlsRoutes':: d.obj(help=''),
              tlsRoutes: {
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
                withPort(port): { port: port },
                '#withSniHosts':: d.fn(help='', args=[d.arg(name='sniHosts', type=d.T.array)]),
                withSniHosts(sniHosts): { sniHosts: if std.isArray(v=sniHosts) then sniHosts else [sniHosts] },
                '#withSniHostsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sniHosts', type=d.T.array)]),
                withSniHostsMixin(sniHosts): { sniHosts+: if std.isArray(v=sniHosts) then sniHosts else [sniHosts] },
              },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { strategy+: { canary+: { trafficRouting+: { istio+: { virtualService+: { name: name } } } } } } },
              '#withRoutes':: d.fn(help='', args=[d.arg(name='routes', type=d.T.array)]),
              withRoutes(routes): { spec+: { strategy+: { canary+: { trafficRouting+: { istio+: { virtualService+: { routes: if std.isArray(v=routes) then routes else [routes] } } } } } } },
              '#withRoutesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='routes', type=d.T.array)]),
              withRoutesMixin(routes): { spec+: { strategy+: { canary+: { trafficRouting+: { istio+: { virtualService+: { routes+: if std.isArray(v=routes) then routes else [routes] } } } } } } },
              '#withTcpRoutes':: d.fn(help='', args=[d.arg(name='tcpRoutes', type=d.T.array)]),
              withTcpRoutes(tcpRoutes): { spec+: { strategy+: { canary+: { trafficRouting+: { istio+: { virtualService+: { tcpRoutes: if std.isArray(v=tcpRoutes) then tcpRoutes else [tcpRoutes] } } } } } } },
              '#withTcpRoutesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tcpRoutes', type=d.T.array)]),
              withTcpRoutesMixin(tcpRoutes): { spec+: { strategy+: { canary+: { trafficRouting+: { istio+: { virtualService+: { tcpRoutes+: if std.isArray(v=tcpRoutes) then tcpRoutes else [tcpRoutes] } } } } } } },
              '#withTlsRoutes':: d.fn(help='', args=[d.arg(name='tlsRoutes', type=d.T.array)]),
              withTlsRoutes(tlsRoutes): { spec+: { strategy+: { canary+: { trafficRouting+: { istio+: { virtualService+: { tlsRoutes: if std.isArray(v=tlsRoutes) then tlsRoutes else [tlsRoutes] } } } } } } },
              '#withTlsRoutesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlsRoutes', type=d.T.array)]),
              withTlsRoutesMixin(tlsRoutes): { spec+: { strategy+: { canary+: { trafficRouting+: { istio+: { virtualService+: { tlsRoutes+: if std.isArray(v=tlsRoutes) then tlsRoutes else [tlsRoutes] } } } } } } },
            },
            '#virtualServices':: d.obj(help=''),
            virtualServices: {
              '#tcpRoutes':: d.obj(help=''),
              tcpRoutes: {
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
                withPort(port): { port: port },
              },
              '#tlsRoutes':: d.obj(help=''),
              tlsRoutes: {
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
                withPort(port): { port: port },
                '#withSniHosts':: d.fn(help='', args=[d.arg(name='sniHosts', type=d.T.array)]),
                withSniHosts(sniHosts): { sniHosts: if std.isArray(v=sniHosts) then sniHosts else [sniHosts] },
                '#withSniHostsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sniHosts', type=d.T.array)]),
                withSniHostsMixin(sniHosts): { sniHosts+: if std.isArray(v=sniHosts) then sniHosts else [sniHosts] },
              },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withRoutes':: d.fn(help='', args=[d.arg(name='routes', type=d.T.array)]),
              withRoutes(routes): { routes: if std.isArray(v=routes) then routes else [routes] },
              '#withRoutesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='routes', type=d.T.array)]),
              withRoutesMixin(routes): { routes+: if std.isArray(v=routes) then routes else [routes] },
              '#withTcpRoutes':: d.fn(help='', args=[d.arg(name='tcpRoutes', type=d.T.array)]),
              withTcpRoutes(tcpRoutes): { tcpRoutes: if std.isArray(v=tcpRoutes) then tcpRoutes else [tcpRoutes] },
              '#withTcpRoutesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tcpRoutes', type=d.T.array)]),
              withTcpRoutesMixin(tcpRoutes): { tcpRoutes+: if std.isArray(v=tcpRoutes) then tcpRoutes else [tcpRoutes] },
              '#withTlsRoutes':: d.fn(help='', args=[d.arg(name='tlsRoutes', type=d.T.array)]),
              withTlsRoutes(tlsRoutes): { tlsRoutes: if std.isArray(v=tlsRoutes) then tlsRoutes else [tlsRoutes] },
              '#withTlsRoutesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlsRoutes', type=d.T.array)]),
              withTlsRoutesMixin(tlsRoutes): { tlsRoutes+: if std.isArray(v=tlsRoutes) then tlsRoutes else [tlsRoutes] },
            },
            '#withVirtualServices':: d.fn(help='', args=[d.arg(name='virtualServices', type=d.T.array)]),
            withVirtualServices(virtualServices): { spec+: { strategy+: { canary+: { trafficRouting+: { istio+: { virtualServices: if std.isArray(v=virtualServices) then virtualServices else [virtualServices] } } } } } },
            '#withVirtualServicesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='virtualServices', type=d.T.array)]),
            withVirtualServicesMixin(virtualServices): { spec+: { strategy+: { canary+: { trafficRouting+: { istio+: { virtualServices+: if std.isArray(v=virtualServices) then virtualServices else [virtualServices] } } } } } },
          },
          '#managedRoutes':: d.obj(help=''),
          managedRoutes: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
          },
          '#nginx':: d.obj(help=''),
          nginx: {
            '#withAdditionalIngressAnnotations':: d.fn(help='', args=[d.arg(name='additionalIngressAnnotations', type=d.T.object)]),
            withAdditionalIngressAnnotations(additionalIngressAnnotations): { spec+: { strategy+: { canary+: { trafficRouting+: { nginx+: { additionalIngressAnnotations: additionalIngressAnnotations } } } } } },
            '#withAdditionalIngressAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='additionalIngressAnnotations', type=d.T.object)]),
            withAdditionalIngressAnnotationsMixin(additionalIngressAnnotations): { spec+: { strategy+: { canary+: { trafficRouting+: { nginx+: { additionalIngressAnnotations+: additionalIngressAnnotations } } } } } },
            '#withAnnotationPrefix':: d.fn(help='', args=[d.arg(name='annotationPrefix', type=d.T.string)]),
            withAnnotationPrefix(annotationPrefix): { spec+: { strategy+: { canary+: { trafficRouting+: { nginx+: { annotationPrefix: annotationPrefix } } } } } },
            '#withStableIngress':: d.fn(help='', args=[d.arg(name='stableIngress', type=d.T.string)]),
            withStableIngress(stableIngress): { spec+: { strategy+: { canary+: { trafficRouting+: { nginx+: { stableIngress: stableIngress } } } } } },
            '#withStableIngresses':: d.fn(help='', args=[d.arg(name='stableIngresses', type=d.T.array)]),
            withStableIngresses(stableIngresses): { spec+: { strategy+: { canary+: { trafficRouting+: { nginx+: { stableIngresses: if std.isArray(v=stableIngresses) then stableIngresses else [stableIngresses] } } } } } },
            '#withStableIngressesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='stableIngresses', type=d.T.array)]),
            withStableIngressesMixin(stableIngresses): { spec+: { strategy+: { canary+: { trafficRouting+: { nginx+: { stableIngresses+: if std.isArray(v=stableIngresses) then stableIngresses else [stableIngresses] } } } } } },
          },
          '#smi':: d.obj(help=''),
          smi: {
            '#withRootService':: d.fn(help='', args=[d.arg(name='rootService', type=d.T.string)]),
            withRootService(rootService): { spec+: { strategy+: { canary+: { trafficRouting+: { smi+: { rootService: rootService } } } } } },
            '#withTrafficSplitName':: d.fn(help='', args=[d.arg(name='trafficSplitName', type=d.T.string)]),
            withTrafficSplitName(trafficSplitName): { spec+: { strategy+: { canary+: { trafficRouting+: { smi+: { trafficSplitName: trafficSplitName } } } } } },
          },
          '#traefik':: d.obj(help=''),
          traefik: {
            '#withWeightedTraefikServiceName':: d.fn(help='', args=[d.arg(name='weightedTraefikServiceName', type=d.T.string)]),
            withWeightedTraefikServiceName(weightedTraefikServiceName): { spec+: { strategy+: { canary+: { trafficRouting+: { traefik+: { weightedTraefikServiceName: weightedTraefikServiceName } } } } } },
          },
          '#withManagedRoutes':: d.fn(help='', args=[d.arg(name='managedRoutes', type=d.T.array)]),
          withManagedRoutes(managedRoutes): { spec+: { strategy+: { canary+: { trafficRouting+: { managedRoutes: if std.isArray(v=managedRoutes) then managedRoutes else [managedRoutes] } } } } },
          '#withManagedRoutesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='managedRoutes', type=d.T.array)]),
          withManagedRoutesMixin(managedRoutes): { spec+: { strategy+: { canary+: { trafficRouting+: { managedRoutes+: if std.isArray(v=managedRoutes) then managedRoutes else [managedRoutes] } } } } },
          '#withMaxTrafficWeight':: d.fn(help='', args=[d.arg(name='maxTrafficWeight', type=d.T.integer)]),
          withMaxTrafficWeight(maxTrafficWeight): { spec+: { strategy+: { canary+: { trafficRouting+: { maxTrafficWeight: maxTrafficWeight } } } } },
          '#withPlugins':: d.fn(help='', args=[d.arg(name='plugins', type=d.T.object)]),
          withPlugins(plugins): { spec+: { strategy+: { canary+: { trafficRouting+: { plugins: plugins } } } } },
          '#withPluginsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='plugins', type=d.T.object)]),
          withPluginsMixin(plugins): { spec+: { strategy+: { canary+: { trafficRouting+: { plugins+: plugins } } } } },
        },
        '#withAbortScaleDownDelaySeconds':: d.fn(help='', args=[d.arg(name='abortScaleDownDelaySeconds', type=d.T.integer)]),
        withAbortScaleDownDelaySeconds(abortScaleDownDelaySeconds): { spec+: { strategy+: { canary+: { abortScaleDownDelaySeconds: abortScaleDownDelaySeconds } } } },
        '#withCanaryService':: d.fn(help='', args=[d.arg(name='canaryService', type=d.T.string)]),
        withCanaryService(canaryService): { spec+: { strategy+: { canary+: { canaryService: canaryService } } } },
        '#withDynamicStableScale':: d.fn(help='', args=[d.arg(name='dynamicStableScale', type=d.T.boolean)]),
        withDynamicStableScale(dynamicStableScale): { spec+: { strategy+: { canary+: { dynamicStableScale: dynamicStableScale } } } },
        '#withMaxSurge':: d.fn(help='', args=[d.arg(name='maxSurge', type=d.T.any)]),
        withMaxSurge(maxSurge): { spec+: { strategy+: { canary+: { maxSurge: maxSurge } } } },
        '#withMaxUnavailable':: d.fn(help='', args=[d.arg(name='maxUnavailable', type=d.T.any)]),
        withMaxUnavailable(maxUnavailable): { spec+: { strategy+: { canary+: { maxUnavailable: maxUnavailable } } } },
        '#withMinPodsPerReplicaSet':: d.fn(help='', args=[d.arg(name='minPodsPerReplicaSet', type=d.T.integer)]),
        withMinPodsPerReplicaSet(minPodsPerReplicaSet): { spec+: { strategy+: { canary+: { minPodsPerReplicaSet: minPodsPerReplicaSet } } } },
        '#withScaleDownDelayRevisionLimit':: d.fn(help='', args=[d.arg(name='scaleDownDelayRevisionLimit', type=d.T.integer)]),
        withScaleDownDelayRevisionLimit(scaleDownDelayRevisionLimit): { spec+: { strategy+: { canary+: { scaleDownDelayRevisionLimit: scaleDownDelayRevisionLimit } } } },
        '#withScaleDownDelaySeconds':: d.fn(help='', args=[d.arg(name='scaleDownDelaySeconds', type=d.T.integer)]),
        withScaleDownDelaySeconds(scaleDownDelaySeconds): { spec+: { strategy+: { canary+: { scaleDownDelaySeconds: scaleDownDelaySeconds } } } },
        '#withStableService':: d.fn(help='', args=[d.arg(name='stableService', type=d.T.string)]),
        withStableService(stableService): { spec+: { strategy+: { canary+: { stableService: stableService } } } },
        '#withSteps':: d.fn(help='', args=[d.arg(name='steps', type=d.T.array)]),
        withSteps(steps): { spec+: { strategy+: { canary+: { steps: if std.isArray(v=steps) then steps else [steps] } } } },
        '#withStepsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='steps', type=d.T.array)]),
        withStepsMixin(steps): { spec+: { strategy+: { canary+: { steps+: if std.isArray(v=steps) then steps else [steps] } } } },
      },
    },
    '#template':: d.obj(help=''),
    template: {
      '#metadata':: d.obj(help=''),
      metadata: {
        '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotations(annotations): { spec+: { template+: { metadata+: { annotations: annotations } } } },
        '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotationsMixin(annotations): { spec+: { template+: { metadata+: { annotations+: annotations } } } },
        '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
        withLabels(labels): { spec+: { template+: { metadata+: { labels: labels } } } },
        '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
        withLabelsMixin(labels): { spec+: { template+: { metadata+: { labels+: labels } } } },
      },
      '#spec':: d.obj(help=''),
      spec: {
        '#affinity':: d.obj(help=''),
        affinity: {
          '#nodeAffinity':: d.obj(help=''),
          nodeAffinity: {
            '#preferredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
            preferredDuringSchedulingIgnoredDuringExecution: {
              '#preference':: d.obj(help=''),
              preference: {
                '#matchExpressions':: d.obj(help=''),
                matchExpressions: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                  withOperator(operator): { operator: operator },
                  '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                  withValues(values): { values: if std.isArray(v=values) then values else [values] },
                  '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                  withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                },
                '#matchFields':: d.obj(help=''),
                matchFields: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                  withOperator(operator): { operator: operator },
                  '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                  withValues(values): { values: if std.isArray(v=values) then values else [values] },
                  '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                  withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                },
                '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressions(matchExpressions): { preference+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressionsMixin(matchExpressions): { preference+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                '#withMatchFields':: d.fn(help='', args=[d.arg(name='matchFields', type=d.T.array)]),
                withMatchFields(matchFields): { preference+: { matchFields: if std.isArray(v=matchFields) then matchFields else [matchFields] } },
                '#withMatchFieldsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchFields', type=d.T.array)]),
                withMatchFieldsMixin(matchFields): { preference+: { matchFields+: if std.isArray(v=matchFields) then matchFields else [matchFields] } },
              },
              '#withWeight':: d.fn(help='', args=[d.arg(name='weight', type=d.T.integer)]),
              withWeight(weight): { weight: weight },
            },
            '#requiredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
            requiredDuringSchedulingIgnoredDuringExecution: {
              '#nodeSelectorTerms':: d.obj(help=''),
              nodeSelectorTerms: {
                '#matchExpressions':: d.obj(help=''),
                matchExpressions: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                  withOperator(operator): { operator: operator },
                  '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                  withValues(values): { values: if std.isArray(v=values) then values else [values] },
                  '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                  withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                },
                '#matchFields':: d.obj(help=''),
                matchFields: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                  withOperator(operator): { operator: operator },
                  '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                  withValues(values): { values: if std.isArray(v=values) then values else [values] },
                  '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                  withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                },
                '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressions(matchExpressions): { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] },
                '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressionsMixin(matchExpressions): { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] },
                '#withMatchFields':: d.fn(help='', args=[d.arg(name='matchFields', type=d.T.array)]),
                withMatchFields(matchFields): { matchFields: if std.isArray(v=matchFields) then matchFields else [matchFields] },
                '#withMatchFieldsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchFields', type=d.T.array)]),
                withMatchFieldsMixin(matchFields): { matchFields+: if std.isArray(v=matchFields) then matchFields else [matchFields] },
              },
              '#withNodeSelectorTerms':: d.fn(help='', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
              withNodeSelectorTerms(nodeSelectorTerms): { spec+: { template+: { spec+: { affinity+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } } } } },
              '#withNodeSelectorTermsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
              withNodeSelectorTermsMixin(nodeSelectorTerms): { spec+: { template+: { spec+: { affinity+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms+: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } } } } },
            },
            '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
            withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { template+: { spec+: { affinity+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } },
            '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
            withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { template+: { spec+: { affinity+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } },
          },
          '#podAffinity':: d.obj(help=''),
          podAffinity: {
            '#preferredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
            preferredDuringSchedulingIgnoredDuringExecution: {
              '#podAffinityTerm':: d.obj(help=''),
              podAffinityTerm: {
                '#labelSelector':: d.obj(help=''),
                labelSelector: {
                  '#matchExpressions':: d.obj(help=''),
                  matchExpressions: {
                    '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                    withKey(key): { key: key },
                    '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                    withOperator(operator): { operator: operator },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                    withValues(values): { values: if std.isArray(v=values) then values else [values] },
                    '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                    withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                  },
                  '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                  withMatchExpressions(matchExpressions): { podAffinityTerm+: { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                  '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                  withMatchExpressionsMixin(matchExpressions): { podAffinityTerm+: { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                  '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                  withMatchLabels(matchLabels): { podAffinityTerm+: { labelSelector+: { matchLabels: matchLabels } } },
                  '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                  withMatchLabelsMixin(matchLabels): { podAffinityTerm+: { labelSelector+: { matchLabels+: matchLabels } } },
                },
                '#namespaceSelector':: d.obj(help=''),
                namespaceSelector: {
                  '#matchExpressions':: d.obj(help=''),
                  matchExpressions: {
                    '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                    withKey(key): { key: key },
                    '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                    withOperator(operator): { operator: operator },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                    withValues(values): { values: if std.isArray(v=values) then values else [values] },
                    '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                    withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                  },
                  '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                  withMatchExpressions(matchExpressions): { podAffinityTerm+: { namespaceSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                  '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                  withMatchExpressionsMixin(matchExpressions): { podAffinityTerm+: { namespaceSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                  '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                  withMatchLabels(matchLabels): { podAffinityTerm+: { namespaceSelector+: { matchLabels: matchLabels } } },
                  '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                  withMatchLabelsMixin(matchLabels): { podAffinityTerm+: { namespaceSelector+: { matchLabels+: matchLabels } } },
                },
                '#withMatchLabelKeys':: d.fn(help='', args=[d.arg(name='matchLabelKeys', type=d.T.array)]),
                withMatchLabelKeys(matchLabelKeys): { podAffinityTerm+: { matchLabelKeys: if std.isArray(v=matchLabelKeys) then matchLabelKeys else [matchLabelKeys] } },
                '#withMatchLabelKeysMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabelKeys', type=d.T.array)]),
                withMatchLabelKeysMixin(matchLabelKeys): { podAffinityTerm+: { matchLabelKeys+: if std.isArray(v=matchLabelKeys) then matchLabelKeys else [matchLabelKeys] } },
                '#withMismatchLabelKeys':: d.fn(help='', args=[d.arg(name='mismatchLabelKeys', type=d.T.array)]),
                withMismatchLabelKeys(mismatchLabelKeys): { podAffinityTerm+: { mismatchLabelKeys: if std.isArray(v=mismatchLabelKeys) then mismatchLabelKeys else [mismatchLabelKeys] } },
                '#withMismatchLabelKeysMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='mismatchLabelKeys', type=d.T.array)]),
                withMismatchLabelKeysMixin(mismatchLabelKeys): { podAffinityTerm+: { mismatchLabelKeys+: if std.isArray(v=mismatchLabelKeys) then mismatchLabelKeys else [mismatchLabelKeys] } },
                '#withNamespaces':: d.fn(help='', args=[d.arg(name='namespaces', type=d.T.array)]),
                withNamespaces(namespaces): { podAffinityTerm+: { namespaces: if std.isArray(v=namespaces) then namespaces else [namespaces] } },
                '#withNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='namespaces', type=d.T.array)]),
                withNamespacesMixin(namespaces): { podAffinityTerm+: { namespaces+: if std.isArray(v=namespaces) then namespaces else [namespaces] } },
                '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
                withTopologyKey(topologyKey): { podAffinityTerm+: { topologyKey: topologyKey } },
              },
              '#withWeight':: d.fn(help='', args=[d.arg(name='weight', type=d.T.integer)]),
              withWeight(weight): { weight: weight },
            },
            '#requiredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
            requiredDuringSchedulingIgnoredDuringExecution: {
              '#labelSelector':: d.obj(help=''),
              labelSelector: {
                '#matchExpressions':: d.obj(help=''),
                matchExpressions: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                  withOperator(operator): { operator: operator },
                  '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                  withValues(values): { values: if std.isArray(v=values) then values else [values] },
                  '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                  withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                },
                '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressions(matchExpressions): { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressionsMixin(matchExpressions): { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabels(matchLabels): { labelSelector+: { matchLabels: matchLabels } },
                '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabelsMixin(matchLabels): { labelSelector+: { matchLabels+: matchLabels } },
              },
              '#namespaceSelector':: d.obj(help=''),
              namespaceSelector: {
                '#matchExpressions':: d.obj(help=''),
                matchExpressions: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                  withOperator(operator): { operator: operator },
                  '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                  withValues(values): { values: if std.isArray(v=values) then values else [values] },
                  '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                  withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                },
                '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressions(matchExpressions): { namespaceSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressionsMixin(matchExpressions): { namespaceSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabels(matchLabels): { namespaceSelector+: { matchLabels: matchLabels } },
                '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabelsMixin(matchLabels): { namespaceSelector+: { matchLabels+: matchLabels } },
              },
              '#withMatchLabelKeys':: d.fn(help='', args=[d.arg(name='matchLabelKeys', type=d.T.array)]),
              withMatchLabelKeys(matchLabelKeys): { matchLabelKeys: if std.isArray(v=matchLabelKeys) then matchLabelKeys else [matchLabelKeys] },
              '#withMatchLabelKeysMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabelKeys', type=d.T.array)]),
              withMatchLabelKeysMixin(matchLabelKeys): { matchLabelKeys+: if std.isArray(v=matchLabelKeys) then matchLabelKeys else [matchLabelKeys] },
              '#withMismatchLabelKeys':: d.fn(help='', args=[d.arg(name='mismatchLabelKeys', type=d.T.array)]),
              withMismatchLabelKeys(mismatchLabelKeys): { mismatchLabelKeys: if std.isArray(v=mismatchLabelKeys) then mismatchLabelKeys else [mismatchLabelKeys] },
              '#withMismatchLabelKeysMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='mismatchLabelKeys', type=d.T.array)]),
              withMismatchLabelKeysMixin(mismatchLabelKeys): { mismatchLabelKeys+: if std.isArray(v=mismatchLabelKeys) then mismatchLabelKeys else [mismatchLabelKeys] },
              '#withNamespaces':: d.fn(help='', args=[d.arg(name='namespaces', type=d.T.array)]),
              withNamespaces(namespaces): { namespaces: if std.isArray(v=namespaces) then namespaces else [namespaces] },
              '#withNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='namespaces', type=d.T.array)]),
              withNamespacesMixin(namespaces): { namespaces+: if std.isArray(v=namespaces) then namespaces else [namespaces] },
              '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
              withTopologyKey(topologyKey): { topologyKey: topologyKey },
            },
            '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
            withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { template+: { spec+: { affinity+: { podAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } },
            '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
            withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { template+: { spec+: { affinity+: { podAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } },
            '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
            withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { template+: { spec+: { affinity+: { podAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } },
            '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
            withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { template+: { spec+: { affinity+: { podAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } },
          },
          '#podAntiAffinity':: d.obj(help=''),
          podAntiAffinity: {
            '#preferredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
            preferredDuringSchedulingIgnoredDuringExecution: {
              '#podAffinityTerm':: d.obj(help=''),
              podAffinityTerm: {
                '#labelSelector':: d.obj(help=''),
                labelSelector: {
                  '#matchExpressions':: d.obj(help=''),
                  matchExpressions: {
                    '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                    withKey(key): { key: key },
                    '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                    withOperator(operator): { operator: operator },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                    withValues(values): { values: if std.isArray(v=values) then values else [values] },
                    '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                    withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                  },
                  '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                  withMatchExpressions(matchExpressions): { podAffinityTerm+: { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                  '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                  withMatchExpressionsMixin(matchExpressions): { podAffinityTerm+: { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                  '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                  withMatchLabels(matchLabels): { podAffinityTerm+: { labelSelector+: { matchLabels: matchLabels } } },
                  '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                  withMatchLabelsMixin(matchLabels): { podAffinityTerm+: { labelSelector+: { matchLabels+: matchLabels } } },
                },
                '#namespaceSelector':: d.obj(help=''),
                namespaceSelector: {
                  '#matchExpressions':: d.obj(help=''),
                  matchExpressions: {
                    '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                    withKey(key): { key: key },
                    '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                    withOperator(operator): { operator: operator },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                    withValues(values): { values: if std.isArray(v=values) then values else [values] },
                    '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                    withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                  },
                  '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                  withMatchExpressions(matchExpressions): { podAffinityTerm+: { namespaceSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                  '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                  withMatchExpressionsMixin(matchExpressions): { podAffinityTerm+: { namespaceSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                  '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                  withMatchLabels(matchLabels): { podAffinityTerm+: { namespaceSelector+: { matchLabels: matchLabels } } },
                  '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                  withMatchLabelsMixin(matchLabels): { podAffinityTerm+: { namespaceSelector+: { matchLabels+: matchLabels } } },
                },
                '#withMatchLabelKeys':: d.fn(help='', args=[d.arg(name='matchLabelKeys', type=d.T.array)]),
                withMatchLabelKeys(matchLabelKeys): { podAffinityTerm+: { matchLabelKeys: if std.isArray(v=matchLabelKeys) then matchLabelKeys else [matchLabelKeys] } },
                '#withMatchLabelKeysMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabelKeys', type=d.T.array)]),
                withMatchLabelKeysMixin(matchLabelKeys): { podAffinityTerm+: { matchLabelKeys+: if std.isArray(v=matchLabelKeys) then matchLabelKeys else [matchLabelKeys] } },
                '#withMismatchLabelKeys':: d.fn(help='', args=[d.arg(name='mismatchLabelKeys', type=d.T.array)]),
                withMismatchLabelKeys(mismatchLabelKeys): { podAffinityTerm+: { mismatchLabelKeys: if std.isArray(v=mismatchLabelKeys) then mismatchLabelKeys else [mismatchLabelKeys] } },
                '#withMismatchLabelKeysMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='mismatchLabelKeys', type=d.T.array)]),
                withMismatchLabelKeysMixin(mismatchLabelKeys): { podAffinityTerm+: { mismatchLabelKeys+: if std.isArray(v=mismatchLabelKeys) then mismatchLabelKeys else [mismatchLabelKeys] } },
                '#withNamespaces':: d.fn(help='', args=[d.arg(name='namespaces', type=d.T.array)]),
                withNamespaces(namespaces): { podAffinityTerm+: { namespaces: if std.isArray(v=namespaces) then namespaces else [namespaces] } },
                '#withNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='namespaces', type=d.T.array)]),
                withNamespacesMixin(namespaces): { podAffinityTerm+: { namespaces+: if std.isArray(v=namespaces) then namespaces else [namespaces] } },
                '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
                withTopologyKey(topologyKey): { podAffinityTerm+: { topologyKey: topologyKey } },
              },
              '#withWeight':: d.fn(help='', args=[d.arg(name='weight', type=d.T.integer)]),
              withWeight(weight): { weight: weight },
            },
            '#requiredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
            requiredDuringSchedulingIgnoredDuringExecution: {
              '#labelSelector':: d.obj(help=''),
              labelSelector: {
                '#matchExpressions':: d.obj(help=''),
                matchExpressions: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                  withOperator(operator): { operator: operator },
                  '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                  withValues(values): { values: if std.isArray(v=values) then values else [values] },
                  '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                  withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                },
                '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressions(matchExpressions): { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressionsMixin(matchExpressions): { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabels(matchLabels): { labelSelector+: { matchLabels: matchLabels } },
                '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabelsMixin(matchLabels): { labelSelector+: { matchLabels+: matchLabels } },
              },
              '#namespaceSelector':: d.obj(help=''),
              namespaceSelector: {
                '#matchExpressions':: d.obj(help=''),
                matchExpressions: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                  withOperator(operator): { operator: operator },
                  '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                  withValues(values): { values: if std.isArray(v=values) then values else [values] },
                  '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                  withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                },
                '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressions(matchExpressions): { namespaceSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressionsMixin(matchExpressions): { namespaceSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabels(matchLabels): { namespaceSelector+: { matchLabels: matchLabels } },
                '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabelsMixin(matchLabels): { namespaceSelector+: { matchLabels+: matchLabels } },
              },
              '#withMatchLabelKeys':: d.fn(help='', args=[d.arg(name='matchLabelKeys', type=d.T.array)]),
              withMatchLabelKeys(matchLabelKeys): { matchLabelKeys: if std.isArray(v=matchLabelKeys) then matchLabelKeys else [matchLabelKeys] },
              '#withMatchLabelKeysMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabelKeys', type=d.T.array)]),
              withMatchLabelKeysMixin(matchLabelKeys): { matchLabelKeys+: if std.isArray(v=matchLabelKeys) then matchLabelKeys else [matchLabelKeys] },
              '#withMismatchLabelKeys':: d.fn(help='', args=[d.arg(name='mismatchLabelKeys', type=d.T.array)]),
              withMismatchLabelKeys(mismatchLabelKeys): { mismatchLabelKeys: if std.isArray(v=mismatchLabelKeys) then mismatchLabelKeys else [mismatchLabelKeys] },
              '#withMismatchLabelKeysMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='mismatchLabelKeys', type=d.T.array)]),
              withMismatchLabelKeysMixin(mismatchLabelKeys): { mismatchLabelKeys+: if std.isArray(v=mismatchLabelKeys) then mismatchLabelKeys else [mismatchLabelKeys] },
              '#withNamespaces':: d.fn(help='', args=[d.arg(name='namespaces', type=d.T.array)]),
              withNamespaces(namespaces): { namespaces: if std.isArray(v=namespaces) then namespaces else [namespaces] },
              '#withNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='namespaces', type=d.T.array)]),
              withNamespacesMixin(namespaces): { namespaces+: if std.isArray(v=namespaces) then namespaces else [namespaces] },
              '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
              withTopologyKey(topologyKey): { topologyKey: topologyKey },
            },
            '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
            withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { template+: { spec+: { affinity+: { podAntiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } },
            '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
            withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { template+: { spec+: { affinity+: { podAntiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } },
            '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
            withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { template+: { spec+: { affinity+: { podAntiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } },
            '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
            withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { template+: { spec+: { affinity+: { podAntiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } },
          },
        },
        '#containers':: d.obj(help=''),
        containers: {
          '#env':: d.obj(help=''),
          env: {
            '#valueFrom':: d.obj(help=''),
            valueFrom: {
              '#configMapKeyRef':: d.obj(help=''),
              configMapKeyRef: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { valueFrom+: { configMapKeyRef+: { key: key } } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { valueFrom+: { configMapKeyRef+: { name: name } } },
                '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { valueFrom+: { configMapKeyRef+: { optional: optional } } },
              },
              '#fieldRef':: d.obj(help=''),
              fieldRef: {
                '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
                withApiVersion(apiVersion): { valueFrom+: { fieldRef+: { apiVersion: apiVersion } } },
                '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
                withFieldPath(fieldPath): { valueFrom+: { fieldRef+: { fieldPath: fieldPath } } },
              },
              '#resourceFieldRef':: d.obj(help=''),
              resourceFieldRef: {
                '#withContainerName':: d.fn(help='', args=[d.arg(name='containerName', type=d.T.string)]),
                withContainerName(containerName): { valueFrom+: { resourceFieldRef+: { containerName: containerName } } },
                '#withDivisor':: d.fn(help='', args=[d.arg(name='divisor', type=d.T.any)]),
                withDivisor(divisor): { valueFrom+: { resourceFieldRef+: { divisor: divisor } } },
                '#withResource':: d.fn(help='', args=[d.arg(name='resource', type=d.T.string)]),
                withResource(resource): { valueFrom+: { resourceFieldRef+: { resource: resource } } },
              },
              '#secretKeyRef':: d.obj(help=''),
              secretKeyRef: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { valueFrom+: { secretKeyRef+: { key: key } } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { valueFrom+: { secretKeyRef+: { name: name } } },
                '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { valueFrom+: { secretKeyRef+: { optional: optional } } },
              },
            },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
            withValue(value): { value: value },
          },
          '#envFrom':: d.obj(help=''),
          envFrom: {
            '#configMapRef':: d.obj(help=''),
            configMapRef: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { configMapRef+: { name: name } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { configMapRef+: { optional: optional } },
            },
            '#secretRef':: d.obj(help=''),
            secretRef: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { secretRef+: { name: name } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { secretRef+: { optional: optional } },
            },
            '#withPrefix':: d.fn(help='', args=[d.arg(name='prefix', type=d.T.string)]),
            withPrefix(prefix): { prefix: prefix },
          },
          '#lifecycle':: d.obj(help=''),
          lifecycle: {
            '#postStart':: d.obj(help=''),
            postStart: {
              '#exec':: d.obj(help=''),
              exec: {
                '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                withCommand(command): { lifecycle+: { postStart+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
                '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                withCommandMixin(command): { lifecycle+: { postStart+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
              },
              '#httpGet':: d.obj(help=''),
              httpGet: {
                '#httpHeaders':: d.obj(help=''),
                httpHeaders: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { lifecycle+: { postStart+: { httpGet+: { host: host } } } },
                '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeaders(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeadersMixin(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                withPath(path): { lifecycle+: { postStart+: { httpGet+: { path: path } } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { lifecycle+: { postStart+: { httpGet+: { port: port } } } },
                '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                withScheme(scheme): { lifecycle+: { postStart+: { httpGet+: { scheme: scheme } } } },
              },
              '#sleep':: d.obj(help=''),
              sleep: {
                '#withSeconds':: d.fn(help='', args=[d.arg(name='seconds', type=d.T.integer)]),
                withSeconds(seconds): { lifecycle+: { postStart+: { sleep+: { seconds: seconds } } } },
              },
              '#tcpSocket':: d.obj(help=''),
              tcpSocket: {
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { lifecycle+: { postStart+: { tcpSocket+: { host: host } } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { lifecycle+: { postStart+: { tcpSocket+: { port: port } } } },
              },
            },
            '#preStop':: d.obj(help=''),
            preStop: {
              '#exec':: d.obj(help=''),
              exec: {
                '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                withCommand(command): { lifecycle+: { preStop+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
                '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                withCommandMixin(command): { lifecycle+: { preStop+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
              },
              '#httpGet':: d.obj(help=''),
              httpGet: {
                '#httpHeaders':: d.obj(help=''),
                httpHeaders: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { lifecycle+: { preStop+: { httpGet+: { host: host } } } },
                '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeaders(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeadersMixin(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                withPath(path): { lifecycle+: { preStop+: { httpGet+: { path: path } } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { lifecycle+: { preStop+: { httpGet+: { port: port } } } },
                '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                withScheme(scheme): { lifecycle+: { preStop+: { httpGet+: { scheme: scheme } } } },
              },
              '#sleep':: d.obj(help=''),
              sleep: {
                '#withSeconds':: d.fn(help='', args=[d.arg(name='seconds', type=d.T.integer)]),
                withSeconds(seconds): { lifecycle+: { preStop+: { sleep+: { seconds: seconds } } } },
              },
              '#tcpSocket':: d.obj(help=''),
              tcpSocket: {
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { lifecycle+: { preStop+: { tcpSocket+: { host: host } } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { lifecycle+: { preStop+: { tcpSocket+: { port: port } } } },
              },
            },
          },
          '#livenessProbe':: d.obj(help=''),
          livenessProbe: {
            '#exec':: d.obj(help=''),
            exec: {
              '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
              withCommand(command): { livenessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
              '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
              withCommandMixin(command): { livenessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
            },
            '#grpc':: d.obj(help=''),
            grpc: {
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
              withPort(port): { livenessProbe+: { grpc+: { port: port } } },
              '#withService':: d.fn(help='', args=[d.arg(name='service', type=d.T.string)]),
              withService(service): { livenessProbe+: { grpc+: { service: service } } },
            },
            '#httpGet':: d.obj(help=''),
            httpGet: {
              '#httpHeaders':: d.obj(help=''),
              httpHeaders: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { livenessProbe+: { httpGet+: { host: host } } },
              '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeaders(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
              '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeadersMixin(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { livenessProbe+: { httpGet+: { path: path } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { livenessProbe+: { httpGet+: { port: port } } },
              '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
              withScheme(scheme): { livenessProbe+: { httpGet+: { scheme: scheme } } },
            },
            '#tcpSocket':: d.obj(help=''),
            tcpSocket: {
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { livenessProbe+: { tcpSocket+: { host: host } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { livenessProbe+: { tcpSocket+: { port: port } } },
            },
            '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
            withFailureThreshold(failureThreshold): { livenessProbe+: { failureThreshold: failureThreshold } },
            '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
            withInitialDelaySeconds(initialDelaySeconds): { livenessProbe+: { initialDelaySeconds: initialDelaySeconds } },
            '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
            withPeriodSeconds(periodSeconds): { livenessProbe+: { periodSeconds: periodSeconds } },
            '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
            withSuccessThreshold(successThreshold): { livenessProbe+: { successThreshold: successThreshold } },
            '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
            withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { livenessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
            '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
            withTimeoutSeconds(timeoutSeconds): { livenessProbe+: { timeoutSeconds: timeoutSeconds } },
          },
          '#ports':: d.obj(help=''),
          ports: {
            '#withContainerPort':: d.fn(help='', args=[d.arg(name='containerPort', type=d.T.integer)]),
            withContainerPort(containerPort): { containerPort: containerPort },
            '#withHostIP':: d.fn(help='', args=[d.arg(name='hostIP', type=d.T.string)]),
            withHostIP(hostIP): { hostIP: hostIP },
            '#withHostPort':: d.fn(help='', args=[d.arg(name='hostPort', type=d.T.integer)]),
            withHostPort(hostPort): { hostPort: hostPort },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withProtocol':: d.fn(help='', args=[d.arg(name='protocol', type=d.T.string)]),
            withProtocol(protocol): { protocol: protocol },
          },
          '#readinessProbe':: d.obj(help=''),
          readinessProbe: {
            '#exec':: d.obj(help=''),
            exec: {
              '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
              withCommand(command): { readinessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
              '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
              withCommandMixin(command): { readinessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
            },
            '#grpc':: d.obj(help=''),
            grpc: {
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
              withPort(port): { readinessProbe+: { grpc+: { port: port } } },
              '#withService':: d.fn(help='', args=[d.arg(name='service', type=d.T.string)]),
              withService(service): { readinessProbe+: { grpc+: { service: service } } },
            },
            '#httpGet':: d.obj(help=''),
            httpGet: {
              '#httpHeaders':: d.obj(help=''),
              httpHeaders: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { readinessProbe+: { httpGet+: { host: host } } },
              '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeaders(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
              '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeadersMixin(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { readinessProbe+: { httpGet+: { path: path } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { readinessProbe+: { httpGet+: { port: port } } },
              '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
              withScheme(scheme): { readinessProbe+: { httpGet+: { scheme: scheme } } },
            },
            '#tcpSocket':: d.obj(help=''),
            tcpSocket: {
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { readinessProbe+: { tcpSocket+: { host: host } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { readinessProbe+: { tcpSocket+: { port: port } } },
            },
            '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
            withFailureThreshold(failureThreshold): { readinessProbe+: { failureThreshold: failureThreshold } },
            '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
            withInitialDelaySeconds(initialDelaySeconds): { readinessProbe+: { initialDelaySeconds: initialDelaySeconds } },
            '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
            withPeriodSeconds(periodSeconds): { readinessProbe+: { periodSeconds: periodSeconds } },
            '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
            withSuccessThreshold(successThreshold): { readinessProbe+: { successThreshold: successThreshold } },
            '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
            withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { readinessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
            '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
            withTimeoutSeconds(timeoutSeconds): { readinessProbe+: { timeoutSeconds: timeoutSeconds } },
          },
          '#resizePolicy':: d.obj(help=''),
          resizePolicy: {
            '#withResourceName':: d.fn(help='', args=[d.arg(name='resourceName', type=d.T.string)]),
            withResourceName(resourceName): { resourceName: resourceName },
            '#withRestartPolicy':: d.fn(help='', args=[d.arg(name='restartPolicy', type=d.T.string)]),
            withRestartPolicy(restartPolicy): { restartPolicy: restartPolicy },
          },
          '#resources':: d.obj(help=''),
          resources: {
            '#claims':: d.obj(help=''),
            claims: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
            },
            '#withClaims':: d.fn(help='', args=[d.arg(name='claims', type=d.T.array)]),
            withClaims(claims): { resources+: { claims: if std.isArray(v=claims) then claims else [claims] } },
            '#withClaimsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='claims', type=d.T.array)]),
            withClaimsMixin(claims): { resources+: { claims+: if std.isArray(v=claims) then claims else [claims] } },
            '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.any)]),
            withLimits(limits): { resources+: { limits: limits } },
            '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.any)]),
            withRequests(requests): { resources+: { requests: requests } },
          },
          '#securityContext':: d.obj(help=''),
          securityContext: {
            '#capabilities':: d.obj(help=''),
            capabilities: {
              '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
              withAdd(add): { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } },
              '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
              withAddMixin(add): { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } },
              '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
              withDrop(drop): { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } },
              '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
              withDropMixin(drop): { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } },
            },
            '#seLinuxOptions':: d.obj(help=''),
            seLinuxOptions: {
              '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
              withLevel(level): { securityContext+: { seLinuxOptions+: { level: level } } },
              '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
              withRole(role): { securityContext+: { seLinuxOptions+: { role: role } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { securityContext+: { seLinuxOptions+: { type: type } } },
              '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
              withUser(user): { securityContext+: { seLinuxOptions+: { user: user } } },
            },
            '#seccompProfile':: d.obj(help=''),
            seccompProfile: {
              '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
              withLocalhostProfile(localhostProfile): { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { securityContext+: { seccompProfile+: { type: type } } },
            },
            '#windowsOptions':: d.obj(help=''),
            windowsOptions: {
              '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
              withGmsaCredentialSpec(gmsaCredentialSpec): { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } },
              '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
              withGmsaCredentialSpecName(gmsaCredentialSpecName): { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } },
              '#withHostProcess':: d.fn(help='', args=[d.arg(name='hostProcess', type=d.T.boolean)]),
              withHostProcess(hostProcess): { securityContext+: { windowsOptions+: { hostProcess: hostProcess } } },
              '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
              withRunAsUserName(runAsUserName): { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } },
            },
            '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
            withAllowPrivilegeEscalation(allowPrivilegeEscalation): { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } },
            '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
            withPrivileged(privileged): { securityContext+: { privileged: privileged } },
            '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
            withProcMount(procMount): { securityContext+: { procMount: procMount } },
            '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
            withReadOnlyRootFilesystem(readOnlyRootFilesystem): { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } },
            '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
            withRunAsGroup(runAsGroup): { securityContext+: { runAsGroup: runAsGroup } },
            '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
            withRunAsNonRoot(runAsNonRoot): { securityContext+: { runAsNonRoot: runAsNonRoot } },
            '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
            withRunAsUser(runAsUser): { securityContext+: { runAsUser: runAsUser } },
          },
          '#startupProbe':: d.obj(help=''),
          startupProbe: {
            '#exec':: d.obj(help=''),
            exec: {
              '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
              withCommand(command): { startupProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
              '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
              withCommandMixin(command): { startupProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
            },
            '#grpc':: d.obj(help=''),
            grpc: {
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
              withPort(port): { startupProbe+: { grpc+: { port: port } } },
              '#withService':: d.fn(help='', args=[d.arg(name='service', type=d.T.string)]),
              withService(service): { startupProbe+: { grpc+: { service: service } } },
            },
            '#httpGet':: d.obj(help=''),
            httpGet: {
              '#httpHeaders':: d.obj(help=''),
              httpHeaders: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { startupProbe+: { httpGet+: { host: host } } },
              '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeaders(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
              '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeadersMixin(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { startupProbe+: { httpGet+: { path: path } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { startupProbe+: { httpGet+: { port: port } } },
              '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
              withScheme(scheme): { startupProbe+: { httpGet+: { scheme: scheme } } },
            },
            '#tcpSocket':: d.obj(help=''),
            tcpSocket: {
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { startupProbe+: { tcpSocket+: { host: host } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { startupProbe+: { tcpSocket+: { port: port } } },
            },
            '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
            withFailureThreshold(failureThreshold): { startupProbe+: { failureThreshold: failureThreshold } },
            '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
            withInitialDelaySeconds(initialDelaySeconds): { startupProbe+: { initialDelaySeconds: initialDelaySeconds } },
            '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
            withPeriodSeconds(periodSeconds): { startupProbe+: { periodSeconds: periodSeconds } },
            '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
            withSuccessThreshold(successThreshold): { startupProbe+: { successThreshold: successThreshold } },
            '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
            withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { startupProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
            '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
            withTimeoutSeconds(timeoutSeconds): { startupProbe+: { timeoutSeconds: timeoutSeconds } },
          },
          '#volumeDevices':: d.obj(help=''),
          volumeDevices: {
            '#withDevicePath':: d.fn(help='', args=[d.arg(name='devicePath', type=d.T.string)]),
            withDevicePath(devicePath): { devicePath: devicePath },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
          },
          '#volumeMounts':: d.obj(help=''),
          volumeMounts: {
            '#withMountPath':: d.fn(help='', args=[d.arg(name='mountPath', type=d.T.string)]),
            withMountPath(mountPath): { mountPath: mountPath },
            '#withMountPropagation':: d.fn(help='', args=[d.arg(name='mountPropagation', type=d.T.string)]),
            withMountPropagation(mountPropagation): { mountPropagation: mountPropagation },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
            withReadOnly(readOnly): { readOnly: readOnly },
            '#withSubPath':: d.fn(help='', args=[d.arg(name='subPath', type=d.T.string)]),
            withSubPath(subPath): { subPath: subPath },
            '#withSubPathExpr':: d.fn(help='', args=[d.arg(name='subPathExpr', type=d.T.string)]),
            withSubPathExpr(subPathExpr): { subPathExpr: subPathExpr },
          },
          '#withArgs':: d.fn(help='', args=[d.arg(name='args', type=d.T.array)]),
          withArgs(args): { args: if std.isArray(v=args) then args else [args] },
          '#withArgsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='args', type=d.T.array)]),
          withArgsMixin(args): { args+: if std.isArray(v=args) then args else [args] },
          '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
          withCommand(command): { command: if std.isArray(v=command) then command else [command] },
          '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
          withCommandMixin(command): { command+: if std.isArray(v=command) then command else [command] },
          '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
          withEnv(env): { env: if std.isArray(v=env) then env else [env] },
          '#withEnvFrom':: d.fn(help='', args=[d.arg(name='envFrom', type=d.T.array)]),
          withEnvFrom(envFrom): { envFrom: if std.isArray(v=envFrom) then envFrom else [envFrom] },
          '#withEnvFromMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='envFrom', type=d.T.array)]),
          withEnvFromMixin(envFrom): { envFrom+: if std.isArray(v=envFrom) then envFrom else [envFrom] },
          '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
          withEnvMixin(env): { env+: if std.isArray(v=env) then env else [env] },
          '#withImage':: d.fn(help='', args=[d.arg(name='image', type=d.T.string)]),
          withImage(image): { image: image },
          '#withImagePullPolicy':: d.fn(help='', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
          withImagePullPolicy(imagePullPolicy): { imagePullPolicy: imagePullPolicy },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withPorts':: d.fn(help='', args=[d.arg(name='ports', type=d.T.array)]),
          withPorts(ports): { ports: if std.isArray(v=ports) then ports else [ports] },
          '#withPortsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ports', type=d.T.array)]),
          withPortsMixin(ports): { ports+: if std.isArray(v=ports) then ports else [ports] },
          '#withResizePolicy':: d.fn(help='', args=[d.arg(name='resizePolicy', type=d.T.array)]),
          withResizePolicy(resizePolicy): { resizePolicy: if std.isArray(v=resizePolicy) then resizePolicy else [resizePolicy] },
          '#withResizePolicyMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='resizePolicy', type=d.T.array)]),
          withResizePolicyMixin(resizePolicy): { resizePolicy+: if std.isArray(v=resizePolicy) then resizePolicy else [resizePolicy] },
          '#withRestartPolicy':: d.fn(help='', args=[d.arg(name='restartPolicy', type=d.T.string)]),
          withRestartPolicy(restartPolicy): { restartPolicy: restartPolicy },
          '#withStdin':: d.fn(help='', args=[d.arg(name='stdin', type=d.T.boolean)]),
          withStdin(stdin): { stdin: stdin },
          '#withStdinOnce':: d.fn(help='', args=[d.arg(name='stdinOnce', type=d.T.boolean)]),
          withStdinOnce(stdinOnce): { stdinOnce: stdinOnce },
          '#withTerminationMessagePath':: d.fn(help='', args=[d.arg(name='terminationMessagePath', type=d.T.string)]),
          withTerminationMessagePath(terminationMessagePath): { terminationMessagePath: terminationMessagePath },
          '#withTerminationMessagePolicy':: d.fn(help='', args=[d.arg(name='terminationMessagePolicy', type=d.T.string)]),
          withTerminationMessagePolicy(terminationMessagePolicy): { terminationMessagePolicy: terminationMessagePolicy },
          '#withTty':: d.fn(help='', args=[d.arg(name='tty', type=d.T.boolean)]),
          withTty(tty): { tty: tty },
          '#withVolumeDevices':: d.fn(help='', args=[d.arg(name='volumeDevices', type=d.T.array)]),
          withVolumeDevices(volumeDevices): { volumeDevices: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
          '#withVolumeDevicesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeDevices', type=d.T.array)]),
          withVolumeDevicesMixin(volumeDevices): { volumeDevices+: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
          '#withVolumeMounts':: d.fn(help='', args=[d.arg(name='volumeMounts', type=d.T.array)]),
          withVolumeMounts(volumeMounts): { volumeMounts: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
          '#withVolumeMountsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeMounts', type=d.T.array)]),
          withVolumeMountsMixin(volumeMounts): { volumeMounts+: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
          '#withWorkingDir':: d.fn(help='', args=[d.arg(name='workingDir', type=d.T.string)]),
          withWorkingDir(workingDir): { workingDir: workingDir },
        },
        '#dnsConfig':: d.obj(help=''),
        dnsConfig: {
          '#options':: d.obj(help=''),
          options: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
            withValue(value): { value: value },
          },
          '#withNameservers':: d.fn(help='', args=[d.arg(name='nameservers', type=d.T.array)]),
          withNameservers(nameservers): { spec+: { template+: { spec+: { dnsConfig+: { nameservers: if std.isArray(v=nameservers) then nameservers else [nameservers] } } } } },
          '#withNameserversMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nameservers', type=d.T.array)]),
          withNameserversMixin(nameservers): { spec+: { template+: { spec+: { dnsConfig+: { nameservers+: if std.isArray(v=nameservers) then nameservers else [nameservers] } } } } },
          '#withOptions':: d.fn(help='', args=[d.arg(name='options', type=d.T.array)]),
          withOptions(options): { spec+: { template+: { spec+: { dnsConfig+: { options: if std.isArray(v=options) then options else [options] } } } } },
          '#withOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='options', type=d.T.array)]),
          withOptionsMixin(options): { spec+: { template+: { spec+: { dnsConfig+: { options+: if std.isArray(v=options) then options else [options] } } } } },
          '#withSearches':: d.fn(help='', args=[d.arg(name='searches', type=d.T.array)]),
          withSearches(searches): { spec+: { template+: { spec+: { dnsConfig+: { searches: if std.isArray(v=searches) then searches else [searches] } } } } },
          '#withSearchesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='searches', type=d.T.array)]),
          withSearchesMixin(searches): { spec+: { template+: { spec+: { dnsConfig+: { searches+: if std.isArray(v=searches) then searches else [searches] } } } } },
        },
        '#ephemeralContainers':: d.obj(help=''),
        ephemeralContainers: {
          '#env':: d.obj(help=''),
          env: {
            '#valueFrom':: d.obj(help=''),
            valueFrom: {
              '#configMapKeyRef':: d.obj(help=''),
              configMapKeyRef: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { valueFrom+: { configMapKeyRef+: { key: key } } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { valueFrom+: { configMapKeyRef+: { name: name } } },
                '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { valueFrom+: { configMapKeyRef+: { optional: optional } } },
              },
              '#fieldRef':: d.obj(help=''),
              fieldRef: {
                '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
                withApiVersion(apiVersion): { valueFrom+: { fieldRef+: { apiVersion: apiVersion } } },
                '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
                withFieldPath(fieldPath): { valueFrom+: { fieldRef+: { fieldPath: fieldPath } } },
              },
              '#resourceFieldRef':: d.obj(help=''),
              resourceFieldRef: {
                '#withContainerName':: d.fn(help='', args=[d.arg(name='containerName', type=d.T.string)]),
                withContainerName(containerName): { valueFrom+: { resourceFieldRef+: { containerName: containerName } } },
                '#withDivisor':: d.fn(help='', args=[d.arg(name='divisor', type=d.T.any)]),
                withDivisor(divisor): { valueFrom+: { resourceFieldRef+: { divisor: divisor } } },
                '#withResource':: d.fn(help='', args=[d.arg(name='resource', type=d.T.string)]),
                withResource(resource): { valueFrom+: { resourceFieldRef+: { resource: resource } } },
              },
              '#secretKeyRef':: d.obj(help=''),
              secretKeyRef: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { valueFrom+: { secretKeyRef+: { key: key } } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { valueFrom+: { secretKeyRef+: { name: name } } },
                '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { valueFrom+: { secretKeyRef+: { optional: optional } } },
              },
            },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
            withValue(value): { value: value },
          },
          '#envFrom':: d.obj(help=''),
          envFrom: {
            '#configMapRef':: d.obj(help=''),
            configMapRef: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { configMapRef+: { name: name } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { configMapRef+: { optional: optional } },
            },
            '#secretRef':: d.obj(help=''),
            secretRef: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { secretRef+: { name: name } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { secretRef+: { optional: optional } },
            },
            '#withPrefix':: d.fn(help='', args=[d.arg(name='prefix', type=d.T.string)]),
            withPrefix(prefix): { prefix: prefix },
          },
          '#lifecycle':: d.obj(help=''),
          lifecycle: {
            '#postStart':: d.obj(help=''),
            postStart: {
              '#exec':: d.obj(help=''),
              exec: {
                '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                withCommand(command): { lifecycle+: { postStart+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
                '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                withCommandMixin(command): { lifecycle+: { postStart+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
              },
              '#httpGet':: d.obj(help=''),
              httpGet: {
                '#httpHeaders':: d.obj(help=''),
                httpHeaders: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { lifecycle+: { postStart+: { httpGet+: { host: host } } } },
                '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeaders(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeadersMixin(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                withPath(path): { lifecycle+: { postStart+: { httpGet+: { path: path } } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { lifecycle+: { postStart+: { httpGet+: { port: port } } } },
                '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                withScheme(scheme): { lifecycle+: { postStart+: { httpGet+: { scheme: scheme } } } },
              },
              '#sleep':: d.obj(help=''),
              sleep: {
                '#withSeconds':: d.fn(help='', args=[d.arg(name='seconds', type=d.T.integer)]),
                withSeconds(seconds): { lifecycle+: { postStart+: { sleep+: { seconds: seconds } } } },
              },
              '#tcpSocket':: d.obj(help=''),
              tcpSocket: {
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { lifecycle+: { postStart+: { tcpSocket+: { host: host } } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { lifecycle+: { postStart+: { tcpSocket+: { port: port } } } },
              },
            },
            '#preStop':: d.obj(help=''),
            preStop: {
              '#exec':: d.obj(help=''),
              exec: {
                '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                withCommand(command): { lifecycle+: { preStop+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
                '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                withCommandMixin(command): { lifecycle+: { preStop+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
              },
              '#httpGet':: d.obj(help=''),
              httpGet: {
                '#httpHeaders':: d.obj(help=''),
                httpHeaders: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { lifecycle+: { preStop+: { httpGet+: { host: host } } } },
                '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeaders(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeadersMixin(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                withPath(path): { lifecycle+: { preStop+: { httpGet+: { path: path } } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { lifecycle+: { preStop+: { httpGet+: { port: port } } } },
                '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                withScheme(scheme): { lifecycle+: { preStop+: { httpGet+: { scheme: scheme } } } },
              },
              '#sleep':: d.obj(help=''),
              sleep: {
                '#withSeconds':: d.fn(help='', args=[d.arg(name='seconds', type=d.T.integer)]),
                withSeconds(seconds): { lifecycle+: { preStop+: { sleep+: { seconds: seconds } } } },
              },
              '#tcpSocket':: d.obj(help=''),
              tcpSocket: {
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { lifecycle+: { preStop+: { tcpSocket+: { host: host } } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { lifecycle+: { preStop+: { tcpSocket+: { port: port } } } },
              },
            },
          },
          '#livenessProbe':: d.obj(help=''),
          livenessProbe: {
            '#exec':: d.obj(help=''),
            exec: {
              '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
              withCommand(command): { livenessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
              '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
              withCommandMixin(command): { livenessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
            },
            '#grpc':: d.obj(help=''),
            grpc: {
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
              withPort(port): { livenessProbe+: { grpc+: { port: port } } },
              '#withService':: d.fn(help='', args=[d.arg(name='service', type=d.T.string)]),
              withService(service): { livenessProbe+: { grpc+: { service: service } } },
            },
            '#httpGet':: d.obj(help=''),
            httpGet: {
              '#httpHeaders':: d.obj(help=''),
              httpHeaders: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { livenessProbe+: { httpGet+: { host: host } } },
              '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeaders(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
              '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeadersMixin(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { livenessProbe+: { httpGet+: { path: path } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { livenessProbe+: { httpGet+: { port: port } } },
              '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
              withScheme(scheme): { livenessProbe+: { httpGet+: { scheme: scheme } } },
            },
            '#tcpSocket':: d.obj(help=''),
            tcpSocket: {
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { livenessProbe+: { tcpSocket+: { host: host } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { livenessProbe+: { tcpSocket+: { port: port } } },
            },
            '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
            withFailureThreshold(failureThreshold): { livenessProbe+: { failureThreshold: failureThreshold } },
            '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
            withInitialDelaySeconds(initialDelaySeconds): { livenessProbe+: { initialDelaySeconds: initialDelaySeconds } },
            '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
            withPeriodSeconds(periodSeconds): { livenessProbe+: { periodSeconds: periodSeconds } },
            '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
            withSuccessThreshold(successThreshold): { livenessProbe+: { successThreshold: successThreshold } },
            '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
            withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { livenessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
            '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
            withTimeoutSeconds(timeoutSeconds): { livenessProbe+: { timeoutSeconds: timeoutSeconds } },
          },
          '#ports':: d.obj(help=''),
          ports: {
            '#withContainerPort':: d.fn(help='', args=[d.arg(name='containerPort', type=d.T.integer)]),
            withContainerPort(containerPort): { containerPort: containerPort },
            '#withHostIP':: d.fn(help='', args=[d.arg(name='hostIP', type=d.T.string)]),
            withHostIP(hostIP): { hostIP: hostIP },
            '#withHostPort':: d.fn(help='', args=[d.arg(name='hostPort', type=d.T.integer)]),
            withHostPort(hostPort): { hostPort: hostPort },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withProtocol':: d.fn(help='', args=[d.arg(name='protocol', type=d.T.string)]),
            withProtocol(protocol): { protocol: protocol },
          },
          '#readinessProbe':: d.obj(help=''),
          readinessProbe: {
            '#exec':: d.obj(help=''),
            exec: {
              '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
              withCommand(command): { readinessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
              '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
              withCommandMixin(command): { readinessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
            },
            '#grpc':: d.obj(help=''),
            grpc: {
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
              withPort(port): { readinessProbe+: { grpc+: { port: port } } },
              '#withService':: d.fn(help='', args=[d.arg(name='service', type=d.T.string)]),
              withService(service): { readinessProbe+: { grpc+: { service: service } } },
            },
            '#httpGet':: d.obj(help=''),
            httpGet: {
              '#httpHeaders':: d.obj(help=''),
              httpHeaders: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { readinessProbe+: { httpGet+: { host: host } } },
              '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeaders(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
              '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeadersMixin(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { readinessProbe+: { httpGet+: { path: path } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { readinessProbe+: { httpGet+: { port: port } } },
              '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
              withScheme(scheme): { readinessProbe+: { httpGet+: { scheme: scheme } } },
            },
            '#tcpSocket':: d.obj(help=''),
            tcpSocket: {
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { readinessProbe+: { tcpSocket+: { host: host } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { readinessProbe+: { tcpSocket+: { port: port } } },
            },
            '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
            withFailureThreshold(failureThreshold): { readinessProbe+: { failureThreshold: failureThreshold } },
            '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
            withInitialDelaySeconds(initialDelaySeconds): { readinessProbe+: { initialDelaySeconds: initialDelaySeconds } },
            '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
            withPeriodSeconds(periodSeconds): { readinessProbe+: { periodSeconds: periodSeconds } },
            '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
            withSuccessThreshold(successThreshold): { readinessProbe+: { successThreshold: successThreshold } },
            '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
            withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { readinessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
            '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
            withTimeoutSeconds(timeoutSeconds): { readinessProbe+: { timeoutSeconds: timeoutSeconds } },
          },
          '#resizePolicy':: d.obj(help=''),
          resizePolicy: {
            '#withResourceName':: d.fn(help='', args=[d.arg(name='resourceName', type=d.T.string)]),
            withResourceName(resourceName): { resourceName: resourceName },
            '#withRestartPolicy':: d.fn(help='', args=[d.arg(name='restartPolicy', type=d.T.string)]),
            withRestartPolicy(restartPolicy): { restartPolicy: restartPolicy },
          },
          '#resources':: d.obj(help=''),
          resources: {
            '#claims':: d.obj(help=''),
            claims: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
            },
            '#withClaims':: d.fn(help='', args=[d.arg(name='claims', type=d.T.array)]),
            withClaims(claims): { resources+: { claims: if std.isArray(v=claims) then claims else [claims] } },
            '#withClaimsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='claims', type=d.T.array)]),
            withClaimsMixin(claims): { resources+: { claims+: if std.isArray(v=claims) then claims else [claims] } },
            '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.any)]),
            withLimits(limits): { resources+: { limits: limits } },
            '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.any)]),
            withRequests(requests): { resources+: { requests: requests } },
          },
          '#securityContext':: d.obj(help=''),
          securityContext: {
            '#capabilities':: d.obj(help=''),
            capabilities: {
              '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
              withAdd(add): { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } },
              '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
              withAddMixin(add): { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } },
              '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
              withDrop(drop): { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } },
              '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
              withDropMixin(drop): { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } },
            },
            '#seLinuxOptions':: d.obj(help=''),
            seLinuxOptions: {
              '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
              withLevel(level): { securityContext+: { seLinuxOptions+: { level: level } } },
              '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
              withRole(role): { securityContext+: { seLinuxOptions+: { role: role } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { securityContext+: { seLinuxOptions+: { type: type } } },
              '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
              withUser(user): { securityContext+: { seLinuxOptions+: { user: user } } },
            },
            '#seccompProfile':: d.obj(help=''),
            seccompProfile: {
              '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
              withLocalhostProfile(localhostProfile): { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { securityContext+: { seccompProfile+: { type: type } } },
            },
            '#windowsOptions':: d.obj(help=''),
            windowsOptions: {
              '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
              withGmsaCredentialSpec(gmsaCredentialSpec): { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } },
              '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
              withGmsaCredentialSpecName(gmsaCredentialSpecName): { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } },
              '#withHostProcess':: d.fn(help='', args=[d.arg(name='hostProcess', type=d.T.boolean)]),
              withHostProcess(hostProcess): { securityContext+: { windowsOptions+: { hostProcess: hostProcess } } },
              '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
              withRunAsUserName(runAsUserName): { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } },
            },
            '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
            withAllowPrivilegeEscalation(allowPrivilegeEscalation): { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } },
            '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
            withPrivileged(privileged): { securityContext+: { privileged: privileged } },
            '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
            withProcMount(procMount): { securityContext+: { procMount: procMount } },
            '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
            withReadOnlyRootFilesystem(readOnlyRootFilesystem): { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } },
            '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
            withRunAsGroup(runAsGroup): { securityContext+: { runAsGroup: runAsGroup } },
            '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
            withRunAsNonRoot(runAsNonRoot): { securityContext+: { runAsNonRoot: runAsNonRoot } },
            '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
            withRunAsUser(runAsUser): { securityContext+: { runAsUser: runAsUser } },
          },
          '#startupProbe':: d.obj(help=''),
          startupProbe: {
            '#exec':: d.obj(help=''),
            exec: {
              '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
              withCommand(command): { startupProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
              '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
              withCommandMixin(command): { startupProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
            },
            '#grpc':: d.obj(help=''),
            grpc: {
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
              withPort(port): { startupProbe+: { grpc+: { port: port } } },
              '#withService':: d.fn(help='', args=[d.arg(name='service', type=d.T.string)]),
              withService(service): { startupProbe+: { grpc+: { service: service } } },
            },
            '#httpGet':: d.obj(help=''),
            httpGet: {
              '#httpHeaders':: d.obj(help=''),
              httpHeaders: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { startupProbe+: { httpGet+: { host: host } } },
              '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeaders(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
              '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeadersMixin(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { startupProbe+: { httpGet+: { path: path } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { startupProbe+: { httpGet+: { port: port } } },
              '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
              withScheme(scheme): { startupProbe+: { httpGet+: { scheme: scheme } } },
            },
            '#tcpSocket':: d.obj(help=''),
            tcpSocket: {
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { startupProbe+: { tcpSocket+: { host: host } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { startupProbe+: { tcpSocket+: { port: port } } },
            },
            '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
            withFailureThreshold(failureThreshold): { startupProbe+: { failureThreshold: failureThreshold } },
            '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
            withInitialDelaySeconds(initialDelaySeconds): { startupProbe+: { initialDelaySeconds: initialDelaySeconds } },
            '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
            withPeriodSeconds(periodSeconds): { startupProbe+: { periodSeconds: periodSeconds } },
            '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
            withSuccessThreshold(successThreshold): { startupProbe+: { successThreshold: successThreshold } },
            '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
            withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { startupProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
            '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
            withTimeoutSeconds(timeoutSeconds): { startupProbe+: { timeoutSeconds: timeoutSeconds } },
          },
          '#volumeDevices':: d.obj(help=''),
          volumeDevices: {
            '#withDevicePath':: d.fn(help='', args=[d.arg(name='devicePath', type=d.T.string)]),
            withDevicePath(devicePath): { devicePath: devicePath },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
          },
          '#volumeMounts':: d.obj(help=''),
          volumeMounts: {
            '#withMountPath':: d.fn(help='', args=[d.arg(name='mountPath', type=d.T.string)]),
            withMountPath(mountPath): { mountPath: mountPath },
            '#withMountPropagation':: d.fn(help='', args=[d.arg(name='mountPropagation', type=d.T.string)]),
            withMountPropagation(mountPropagation): { mountPropagation: mountPropagation },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
            withReadOnly(readOnly): { readOnly: readOnly },
            '#withSubPath':: d.fn(help='', args=[d.arg(name='subPath', type=d.T.string)]),
            withSubPath(subPath): { subPath: subPath },
            '#withSubPathExpr':: d.fn(help='', args=[d.arg(name='subPathExpr', type=d.T.string)]),
            withSubPathExpr(subPathExpr): { subPathExpr: subPathExpr },
          },
          '#withArgs':: d.fn(help='', args=[d.arg(name='args', type=d.T.array)]),
          withArgs(args): { args: if std.isArray(v=args) then args else [args] },
          '#withArgsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='args', type=d.T.array)]),
          withArgsMixin(args): { args+: if std.isArray(v=args) then args else [args] },
          '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
          withCommand(command): { command: if std.isArray(v=command) then command else [command] },
          '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
          withCommandMixin(command): { command+: if std.isArray(v=command) then command else [command] },
          '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
          withEnv(env): { env: if std.isArray(v=env) then env else [env] },
          '#withEnvFrom':: d.fn(help='', args=[d.arg(name='envFrom', type=d.T.array)]),
          withEnvFrom(envFrom): { envFrom: if std.isArray(v=envFrom) then envFrom else [envFrom] },
          '#withEnvFromMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='envFrom', type=d.T.array)]),
          withEnvFromMixin(envFrom): { envFrom+: if std.isArray(v=envFrom) then envFrom else [envFrom] },
          '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
          withEnvMixin(env): { env+: if std.isArray(v=env) then env else [env] },
          '#withImage':: d.fn(help='', args=[d.arg(name='image', type=d.T.string)]),
          withImage(image): { image: image },
          '#withImagePullPolicy':: d.fn(help='', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
          withImagePullPolicy(imagePullPolicy): { imagePullPolicy: imagePullPolicy },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withPorts':: d.fn(help='', args=[d.arg(name='ports', type=d.T.array)]),
          withPorts(ports): { ports: if std.isArray(v=ports) then ports else [ports] },
          '#withPortsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ports', type=d.T.array)]),
          withPortsMixin(ports): { ports+: if std.isArray(v=ports) then ports else [ports] },
          '#withResizePolicy':: d.fn(help='', args=[d.arg(name='resizePolicy', type=d.T.array)]),
          withResizePolicy(resizePolicy): { resizePolicy: if std.isArray(v=resizePolicy) then resizePolicy else [resizePolicy] },
          '#withResizePolicyMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='resizePolicy', type=d.T.array)]),
          withResizePolicyMixin(resizePolicy): { resizePolicy+: if std.isArray(v=resizePolicy) then resizePolicy else [resizePolicy] },
          '#withRestartPolicy':: d.fn(help='', args=[d.arg(name='restartPolicy', type=d.T.string)]),
          withRestartPolicy(restartPolicy): { restartPolicy: restartPolicy },
          '#withStdin':: d.fn(help='', args=[d.arg(name='stdin', type=d.T.boolean)]),
          withStdin(stdin): { stdin: stdin },
          '#withStdinOnce':: d.fn(help='', args=[d.arg(name='stdinOnce', type=d.T.boolean)]),
          withStdinOnce(stdinOnce): { stdinOnce: stdinOnce },
          '#withTargetContainerName':: d.fn(help='', args=[d.arg(name='targetContainerName', type=d.T.string)]),
          withTargetContainerName(targetContainerName): { targetContainerName: targetContainerName },
          '#withTerminationMessagePath':: d.fn(help='', args=[d.arg(name='terminationMessagePath', type=d.T.string)]),
          withTerminationMessagePath(terminationMessagePath): { terminationMessagePath: terminationMessagePath },
          '#withTerminationMessagePolicy':: d.fn(help='', args=[d.arg(name='terminationMessagePolicy', type=d.T.string)]),
          withTerminationMessagePolicy(terminationMessagePolicy): { terminationMessagePolicy: terminationMessagePolicy },
          '#withTty':: d.fn(help='', args=[d.arg(name='tty', type=d.T.boolean)]),
          withTty(tty): { tty: tty },
          '#withVolumeDevices':: d.fn(help='', args=[d.arg(name='volumeDevices', type=d.T.array)]),
          withVolumeDevices(volumeDevices): { volumeDevices: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
          '#withVolumeDevicesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeDevices', type=d.T.array)]),
          withVolumeDevicesMixin(volumeDevices): { volumeDevices+: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
          '#withVolumeMounts':: d.fn(help='', args=[d.arg(name='volumeMounts', type=d.T.array)]),
          withVolumeMounts(volumeMounts): { volumeMounts: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
          '#withVolumeMountsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeMounts', type=d.T.array)]),
          withVolumeMountsMixin(volumeMounts): { volumeMounts+: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
          '#withWorkingDir':: d.fn(help='', args=[d.arg(name='workingDir', type=d.T.string)]),
          withWorkingDir(workingDir): { workingDir: workingDir },
        },
        '#hostAliases':: d.obj(help=''),
        hostAliases: {
          '#withHostnames':: d.fn(help='', args=[d.arg(name='hostnames', type=d.T.array)]),
          withHostnames(hostnames): { hostnames: if std.isArray(v=hostnames) then hostnames else [hostnames] },
          '#withHostnamesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='hostnames', type=d.T.array)]),
          withHostnamesMixin(hostnames): { hostnames+: if std.isArray(v=hostnames) then hostnames else [hostnames] },
          '#withIp':: d.fn(help='', args=[d.arg(name='ip', type=d.T.string)]),
          withIp(ip): { ip: ip },
        },
        '#imagePullSecrets':: d.obj(help=''),
        imagePullSecrets: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
        },
        '#initContainers':: d.obj(help=''),
        initContainers: {
          '#env':: d.obj(help=''),
          env: {
            '#valueFrom':: d.obj(help=''),
            valueFrom: {
              '#configMapKeyRef':: d.obj(help=''),
              configMapKeyRef: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { valueFrom+: { configMapKeyRef+: { key: key } } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { valueFrom+: { configMapKeyRef+: { name: name } } },
                '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { valueFrom+: { configMapKeyRef+: { optional: optional } } },
              },
              '#fieldRef':: d.obj(help=''),
              fieldRef: {
                '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
                withApiVersion(apiVersion): { valueFrom+: { fieldRef+: { apiVersion: apiVersion } } },
                '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
                withFieldPath(fieldPath): { valueFrom+: { fieldRef+: { fieldPath: fieldPath } } },
              },
              '#resourceFieldRef':: d.obj(help=''),
              resourceFieldRef: {
                '#withContainerName':: d.fn(help='', args=[d.arg(name='containerName', type=d.T.string)]),
                withContainerName(containerName): { valueFrom+: { resourceFieldRef+: { containerName: containerName } } },
                '#withDivisor':: d.fn(help='', args=[d.arg(name='divisor', type=d.T.any)]),
                withDivisor(divisor): { valueFrom+: { resourceFieldRef+: { divisor: divisor } } },
                '#withResource':: d.fn(help='', args=[d.arg(name='resource', type=d.T.string)]),
                withResource(resource): { valueFrom+: { resourceFieldRef+: { resource: resource } } },
              },
              '#secretKeyRef':: d.obj(help=''),
              secretKeyRef: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { valueFrom+: { secretKeyRef+: { key: key } } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { valueFrom+: { secretKeyRef+: { name: name } } },
                '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { valueFrom+: { secretKeyRef+: { optional: optional } } },
              },
            },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
            withValue(value): { value: value },
          },
          '#envFrom':: d.obj(help=''),
          envFrom: {
            '#configMapRef':: d.obj(help=''),
            configMapRef: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { configMapRef+: { name: name } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { configMapRef+: { optional: optional } },
            },
            '#secretRef':: d.obj(help=''),
            secretRef: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { secretRef+: { name: name } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { secretRef+: { optional: optional } },
            },
            '#withPrefix':: d.fn(help='', args=[d.arg(name='prefix', type=d.T.string)]),
            withPrefix(prefix): { prefix: prefix },
          },
          '#lifecycle':: d.obj(help=''),
          lifecycle: {
            '#postStart':: d.obj(help=''),
            postStart: {
              '#exec':: d.obj(help=''),
              exec: {
                '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                withCommand(command): { lifecycle+: { postStart+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
                '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                withCommandMixin(command): { lifecycle+: { postStart+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
              },
              '#httpGet':: d.obj(help=''),
              httpGet: {
                '#httpHeaders':: d.obj(help=''),
                httpHeaders: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { lifecycle+: { postStart+: { httpGet+: { host: host } } } },
                '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeaders(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeadersMixin(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                withPath(path): { lifecycle+: { postStart+: { httpGet+: { path: path } } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { lifecycle+: { postStart+: { httpGet+: { port: port } } } },
                '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                withScheme(scheme): { lifecycle+: { postStart+: { httpGet+: { scheme: scheme } } } },
              },
              '#sleep':: d.obj(help=''),
              sleep: {
                '#withSeconds':: d.fn(help='', args=[d.arg(name='seconds', type=d.T.integer)]),
                withSeconds(seconds): { lifecycle+: { postStart+: { sleep+: { seconds: seconds } } } },
              },
              '#tcpSocket':: d.obj(help=''),
              tcpSocket: {
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { lifecycle+: { postStart+: { tcpSocket+: { host: host } } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { lifecycle+: { postStart+: { tcpSocket+: { port: port } } } },
              },
            },
            '#preStop':: d.obj(help=''),
            preStop: {
              '#exec':: d.obj(help=''),
              exec: {
                '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                withCommand(command): { lifecycle+: { preStop+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
                '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                withCommandMixin(command): { lifecycle+: { preStop+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
              },
              '#httpGet':: d.obj(help=''),
              httpGet: {
                '#httpHeaders':: d.obj(help=''),
                httpHeaders: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { lifecycle+: { preStop+: { httpGet+: { host: host } } } },
                '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeaders(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeadersMixin(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                withPath(path): { lifecycle+: { preStop+: { httpGet+: { path: path } } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { lifecycle+: { preStop+: { httpGet+: { port: port } } } },
                '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                withScheme(scheme): { lifecycle+: { preStop+: { httpGet+: { scheme: scheme } } } },
              },
              '#sleep':: d.obj(help=''),
              sleep: {
                '#withSeconds':: d.fn(help='', args=[d.arg(name='seconds', type=d.T.integer)]),
                withSeconds(seconds): { lifecycle+: { preStop+: { sleep+: { seconds: seconds } } } },
              },
              '#tcpSocket':: d.obj(help=''),
              tcpSocket: {
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { lifecycle+: { preStop+: { tcpSocket+: { host: host } } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { lifecycle+: { preStop+: { tcpSocket+: { port: port } } } },
              },
            },
          },
          '#livenessProbe':: d.obj(help=''),
          livenessProbe: {
            '#exec':: d.obj(help=''),
            exec: {
              '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
              withCommand(command): { livenessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
              '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
              withCommandMixin(command): { livenessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
            },
            '#grpc':: d.obj(help=''),
            grpc: {
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
              withPort(port): { livenessProbe+: { grpc+: { port: port } } },
              '#withService':: d.fn(help='', args=[d.arg(name='service', type=d.T.string)]),
              withService(service): { livenessProbe+: { grpc+: { service: service } } },
            },
            '#httpGet':: d.obj(help=''),
            httpGet: {
              '#httpHeaders':: d.obj(help=''),
              httpHeaders: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { livenessProbe+: { httpGet+: { host: host } } },
              '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeaders(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
              '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeadersMixin(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { livenessProbe+: { httpGet+: { path: path } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { livenessProbe+: { httpGet+: { port: port } } },
              '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
              withScheme(scheme): { livenessProbe+: { httpGet+: { scheme: scheme } } },
            },
            '#tcpSocket':: d.obj(help=''),
            tcpSocket: {
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { livenessProbe+: { tcpSocket+: { host: host } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { livenessProbe+: { tcpSocket+: { port: port } } },
            },
            '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
            withFailureThreshold(failureThreshold): { livenessProbe+: { failureThreshold: failureThreshold } },
            '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
            withInitialDelaySeconds(initialDelaySeconds): { livenessProbe+: { initialDelaySeconds: initialDelaySeconds } },
            '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
            withPeriodSeconds(periodSeconds): { livenessProbe+: { periodSeconds: periodSeconds } },
            '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
            withSuccessThreshold(successThreshold): { livenessProbe+: { successThreshold: successThreshold } },
            '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
            withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { livenessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
            '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
            withTimeoutSeconds(timeoutSeconds): { livenessProbe+: { timeoutSeconds: timeoutSeconds } },
          },
          '#ports':: d.obj(help=''),
          ports: {
            '#withContainerPort':: d.fn(help='', args=[d.arg(name='containerPort', type=d.T.integer)]),
            withContainerPort(containerPort): { containerPort: containerPort },
            '#withHostIP':: d.fn(help='', args=[d.arg(name='hostIP', type=d.T.string)]),
            withHostIP(hostIP): { hostIP: hostIP },
            '#withHostPort':: d.fn(help='', args=[d.arg(name='hostPort', type=d.T.integer)]),
            withHostPort(hostPort): { hostPort: hostPort },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withProtocol':: d.fn(help='', args=[d.arg(name='protocol', type=d.T.string)]),
            withProtocol(protocol): { protocol: protocol },
          },
          '#readinessProbe':: d.obj(help=''),
          readinessProbe: {
            '#exec':: d.obj(help=''),
            exec: {
              '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
              withCommand(command): { readinessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
              '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
              withCommandMixin(command): { readinessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
            },
            '#grpc':: d.obj(help=''),
            grpc: {
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
              withPort(port): { readinessProbe+: { grpc+: { port: port } } },
              '#withService':: d.fn(help='', args=[d.arg(name='service', type=d.T.string)]),
              withService(service): { readinessProbe+: { grpc+: { service: service } } },
            },
            '#httpGet':: d.obj(help=''),
            httpGet: {
              '#httpHeaders':: d.obj(help=''),
              httpHeaders: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { readinessProbe+: { httpGet+: { host: host } } },
              '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeaders(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
              '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeadersMixin(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { readinessProbe+: { httpGet+: { path: path } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { readinessProbe+: { httpGet+: { port: port } } },
              '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
              withScheme(scheme): { readinessProbe+: { httpGet+: { scheme: scheme } } },
            },
            '#tcpSocket':: d.obj(help=''),
            tcpSocket: {
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { readinessProbe+: { tcpSocket+: { host: host } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { readinessProbe+: { tcpSocket+: { port: port } } },
            },
            '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
            withFailureThreshold(failureThreshold): { readinessProbe+: { failureThreshold: failureThreshold } },
            '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
            withInitialDelaySeconds(initialDelaySeconds): { readinessProbe+: { initialDelaySeconds: initialDelaySeconds } },
            '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
            withPeriodSeconds(periodSeconds): { readinessProbe+: { periodSeconds: periodSeconds } },
            '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
            withSuccessThreshold(successThreshold): { readinessProbe+: { successThreshold: successThreshold } },
            '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
            withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { readinessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
            '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
            withTimeoutSeconds(timeoutSeconds): { readinessProbe+: { timeoutSeconds: timeoutSeconds } },
          },
          '#resizePolicy':: d.obj(help=''),
          resizePolicy: {
            '#withResourceName':: d.fn(help='', args=[d.arg(name='resourceName', type=d.T.string)]),
            withResourceName(resourceName): { resourceName: resourceName },
            '#withRestartPolicy':: d.fn(help='', args=[d.arg(name='restartPolicy', type=d.T.string)]),
            withRestartPolicy(restartPolicy): { restartPolicy: restartPolicy },
          },
          '#resources':: d.obj(help=''),
          resources: {
            '#claims':: d.obj(help=''),
            claims: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
            },
            '#withClaims':: d.fn(help='', args=[d.arg(name='claims', type=d.T.array)]),
            withClaims(claims): { resources+: { claims: if std.isArray(v=claims) then claims else [claims] } },
            '#withClaimsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='claims', type=d.T.array)]),
            withClaimsMixin(claims): { resources+: { claims+: if std.isArray(v=claims) then claims else [claims] } },
            '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.any)]),
            withLimits(limits): { resources+: { limits: limits } },
            '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.any)]),
            withRequests(requests): { resources+: { requests: requests } },
          },
          '#securityContext':: d.obj(help=''),
          securityContext: {
            '#capabilities':: d.obj(help=''),
            capabilities: {
              '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
              withAdd(add): { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } },
              '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
              withAddMixin(add): { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } },
              '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
              withDrop(drop): { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } },
              '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
              withDropMixin(drop): { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } },
            },
            '#seLinuxOptions':: d.obj(help=''),
            seLinuxOptions: {
              '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
              withLevel(level): { securityContext+: { seLinuxOptions+: { level: level } } },
              '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
              withRole(role): { securityContext+: { seLinuxOptions+: { role: role } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { securityContext+: { seLinuxOptions+: { type: type } } },
              '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
              withUser(user): { securityContext+: { seLinuxOptions+: { user: user } } },
            },
            '#seccompProfile':: d.obj(help=''),
            seccompProfile: {
              '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
              withLocalhostProfile(localhostProfile): { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { securityContext+: { seccompProfile+: { type: type } } },
            },
            '#windowsOptions':: d.obj(help=''),
            windowsOptions: {
              '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
              withGmsaCredentialSpec(gmsaCredentialSpec): { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } },
              '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
              withGmsaCredentialSpecName(gmsaCredentialSpecName): { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } },
              '#withHostProcess':: d.fn(help='', args=[d.arg(name='hostProcess', type=d.T.boolean)]),
              withHostProcess(hostProcess): { securityContext+: { windowsOptions+: { hostProcess: hostProcess } } },
              '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
              withRunAsUserName(runAsUserName): { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } },
            },
            '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
            withAllowPrivilegeEscalation(allowPrivilegeEscalation): { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } },
            '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
            withPrivileged(privileged): { securityContext+: { privileged: privileged } },
            '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
            withProcMount(procMount): { securityContext+: { procMount: procMount } },
            '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
            withReadOnlyRootFilesystem(readOnlyRootFilesystem): { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } },
            '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
            withRunAsGroup(runAsGroup): { securityContext+: { runAsGroup: runAsGroup } },
            '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
            withRunAsNonRoot(runAsNonRoot): { securityContext+: { runAsNonRoot: runAsNonRoot } },
            '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
            withRunAsUser(runAsUser): { securityContext+: { runAsUser: runAsUser } },
          },
          '#startupProbe':: d.obj(help=''),
          startupProbe: {
            '#exec':: d.obj(help=''),
            exec: {
              '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
              withCommand(command): { startupProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
              '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
              withCommandMixin(command): { startupProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
            },
            '#grpc':: d.obj(help=''),
            grpc: {
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
              withPort(port): { startupProbe+: { grpc+: { port: port } } },
              '#withService':: d.fn(help='', args=[d.arg(name='service', type=d.T.string)]),
              withService(service): { startupProbe+: { grpc+: { service: service } } },
            },
            '#httpGet':: d.obj(help=''),
            httpGet: {
              '#httpHeaders':: d.obj(help=''),
              httpHeaders: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { startupProbe+: { httpGet+: { host: host } } },
              '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeaders(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
              '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeadersMixin(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { startupProbe+: { httpGet+: { path: path } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { startupProbe+: { httpGet+: { port: port } } },
              '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
              withScheme(scheme): { startupProbe+: { httpGet+: { scheme: scheme } } },
            },
            '#tcpSocket':: d.obj(help=''),
            tcpSocket: {
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { startupProbe+: { tcpSocket+: { host: host } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { startupProbe+: { tcpSocket+: { port: port } } },
            },
            '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
            withFailureThreshold(failureThreshold): { startupProbe+: { failureThreshold: failureThreshold } },
            '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
            withInitialDelaySeconds(initialDelaySeconds): { startupProbe+: { initialDelaySeconds: initialDelaySeconds } },
            '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
            withPeriodSeconds(periodSeconds): { startupProbe+: { periodSeconds: periodSeconds } },
            '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
            withSuccessThreshold(successThreshold): { startupProbe+: { successThreshold: successThreshold } },
            '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
            withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { startupProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
            '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
            withTimeoutSeconds(timeoutSeconds): { startupProbe+: { timeoutSeconds: timeoutSeconds } },
          },
          '#volumeDevices':: d.obj(help=''),
          volumeDevices: {
            '#withDevicePath':: d.fn(help='', args=[d.arg(name='devicePath', type=d.T.string)]),
            withDevicePath(devicePath): { devicePath: devicePath },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
          },
          '#volumeMounts':: d.obj(help=''),
          volumeMounts: {
            '#withMountPath':: d.fn(help='', args=[d.arg(name='mountPath', type=d.T.string)]),
            withMountPath(mountPath): { mountPath: mountPath },
            '#withMountPropagation':: d.fn(help='', args=[d.arg(name='mountPropagation', type=d.T.string)]),
            withMountPropagation(mountPropagation): { mountPropagation: mountPropagation },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
            withReadOnly(readOnly): { readOnly: readOnly },
            '#withSubPath':: d.fn(help='', args=[d.arg(name='subPath', type=d.T.string)]),
            withSubPath(subPath): { subPath: subPath },
            '#withSubPathExpr':: d.fn(help='', args=[d.arg(name='subPathExpr', type=d.T.string)]),
            withSubPathExpr(subPathExpr): { subPathExpr: subPathExpr },
          },
          '#withArgs':: d.fn(help='', args=[d.arg(name='args', type=d.T.array)]),
          withArgs(args): { args: if std.isArray(v=args) then args else [args] },
          '#withArgsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='args', type=d.T.array)]),
          withArgsMixin(args): { args+: if std.isArray(v=args) then args else [args] },
          '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
          withCommand(command): { command: if std.isArray(v=command) then command else [command] },
          '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
          withCommandMixin(command): { command+: if std.isArray(v=command) then command else [command] },
          '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
          withEnv(env): { env: if std.isArray(v=env) then env else [env] },
          '#withEnvFrom':: d.fn(help='', args=[d.arg(name='envFrom', type=d.T.array)]),
          withEnvFrom(envFrom): { envFrom: if std.isArray(v=envFrom) then envFrom else [envFrom] },
          '#withEnvFromMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='envFrom', type=d.T.array)]),
          withEnvFromMixin(envFrom): { envFrom+: if std.isArray(v=envFrom) then envFrom else [envFrom] },
          '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
          withEnvMixin(env): { env+: if std.isArray(v=env) then env else [env] },
          '#withImage':: d.fn(help='', args=[d.arg(name='image', type=d.T.string)]),
          withImage(image): { image: image },
          '#withImagePullPolicy':: d.fn(help='', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
          withImagePullPolicy(imagePullPolicy): { imagePullPolicy: imagePullPolicy },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withPorts':: d.fn(help='', args=[d.arg(name='ports', type=d.T.array)]),
          withPorts(ports): { ports: if std.isArray(v=ports) then ports else [ports] },
          '#withPortsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ports', type=d.T.array)]),
          withPortsMixin(ports): { ports+: if std.isArray(v=ports) then ports else [ports] },
          '#withResizePolicy':: d.fn(help='', args=[d.arg(name='resizePolicy', type=d.T.array)]),
          withResizePolicy(resizePolicy): { resizePolicy: if std.isArray(v=resizePolicy) then resizePolicy else [resizePolicy] },
          '#withResizePolicyMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='resizePolicy', type=d.T.array)]),
          withResizePolicyMixin(resizePolicy): { resizePolicy+: if std.isArray(v=resizePolicy) then resizePolicy else [resizePolicy] },
          '#withRestartPolicy':: d.fn(help='', args=[d.arg(name='restartPolicy', type=d.T.string)]),
          withRestartPolicy(restartPolicy): { restartPolicy: restartPolicy },
          '#withStdin':: d.fn(help='', args=[d.arg(name='stdin', type=d.T.boolean)]),
          withStdin(stdin): { stdin: stdin },
          '#withStdinOnce':: d.fn(help='', args=[d.arg(name='stdinOnce', type=d.T.boolean)]),
          withStdinOnce(stdinOnce): { stdinOnce: stdinOnce },
          '#withTerminationMessagePath':: d.fn(help='', args=[d.arg(name='terminationMessagePath', type=d.T.string)]),
          withTerminationMessagePath(terminationMessagePath): { terminationMessagePath: terminationMessagePath },
          '#withTerminationMessagePolicy':: d.fn(help='', args=[d.arg(name='terminationMessagePolicy', type=d.T.string)]),
          withTerminationMessagePolicy(terminationMessagePolicy): { terminationMessagePolicy: terminationMessagePolicy },
          '#withTty':: d.fn(help='', args=[d.arg(name='tty', type=d.T.boolean)]),
          withTty(tty): { tty: tty },
          '#withVolumeDevices':: d.fn(help='', args=[d.arg(name='volumeDevices', type=d.T.array)]),
          withVolumeDevices(volumeDevices): { volumeDevices: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
          '#withVolumeDevicesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeDevices', type=d.T.array)]),
          withVolumeDevicesMixin(volumeDevices): { volumeDevices+: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
          '#withVolumeMounts':: d.fn(help='', args=[d.arg(name='volumeMounts', type=d.T.array)]),
          withVolumeMounts(volumeMounts): { volumeMounts: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
          '#withVolumeMountsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeMounts', type=d.T.array)]),
          withVolumeMountsMixin(volumeMounts): { volumeMounts+: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
          '#withWorkingDir':: d.fn(help='', args=[d.arg(name='workingDir', type=d.T.string)]),
          withWorkingDir(workingDir): { workingDir: workingDir },
        },
        '#os':: d.obj(help=''),
        os: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { spec+: { template+: { spec+: { os+: { name: name } } } } },
        },
        '#readinessGates':: d.obj(help=''),
        readinessGates: {
          '#withConditionType':: d.fn(help='', args=[d.arg(name='conditionType', type=d.T.string)]),
          withConditionType(conditionType): { conditionType: conditionType },
        },
        '#resourceClaims':: d.obj(help=''),
        resourceClaims: {
          '#source':: d.obj(help=''),
          source: {
            '#withResourceClaimName':: d.fn(help='', args=[d.arg(name='resourceClaimName', type=d.T.string)]),
            withResourceClaimName(resourceClaimName): { source+: { resourceClaimName: resourceClaimName } },
            '#withResourceClaimTemplateName':: d.fn(help='', args=[d.arg(name='resourceClaimTemplateName', type=d.T.string)]),
            withResourceClaimTemplateName(resourceClaimTemplateName): { source+: { resourceClaimTemplateName: resourceClaimTemplateName } },
          },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
        },
        '#schedulingGates':: d.obj(help=''),
        schedulingGates: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
        },
        '#securityContext':: d.obj(help=''),
        securityContext: {
          '#seLinuxOptions':: d.obj(help=''),
          seLinuxOptions: {
            '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
            withLevel(level): { spec+: { template+: { spec+: { securityContext+: { seLinuxOptions+: { level: level } } } } } },
            '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
            withRole(role): { spec+: { template+: { spec+: { securityContext+: { seLinuxOptions+: { role: role } } } } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { spec+: { template+: { spec+: { securityContext+: { seLinuxOptions+: { type: type } } } } } },
            '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
            withUser(user): { spec+: { template+: { spec+: { securityContext+: { seLinuxOptions+: { user: user } } } } } },
          },
          '#seccompProfile':: d.obj(help=''),
          seccompProfile: {
            '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
            withLocalhostProfile(localhostProfile): { spec+: { template+: { spec+: { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } } } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { spec+: { template+: { spec+: { securityContext+: { seccompProfile+: { type: type } } } } } },
          },
          '#sysctls':: d.obj(help=''),
          sysctls: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
            withValue(value): { value: value },
          },
          '#windowsOptions':: d.obj(help=''),
          windowsOptions: {
            '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
            withGmsaCredentialSpec(gmsaCredentialSpec): { spec+: { template+: { spec+: { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } } } } },
            '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
            withGmsaCredentialSpecName(gmsaCredentialSpecName): { spec+: { template+: { spec+: { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } } } } },
            '#withHostProcess':: d.fn(help='', args=[d.arg(name='hostProcess', type=d.T.boolean)]),
            withHostProcess(hostProcess): { spec+: { template+: { spec+: { securityContext+: { windowsOptions+: { hostProcess: hostProcess } } } } } },
            '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
            withRunAsUserName(runAsUserName): { spec+: { template+: { spec+: { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } } } } },
          },
          '#withFsGroup':: d.fn(help='', args=[d.arg(name='fsGroup', type=d.T.integer)]),
          withFsGroup(fsGroup): { spec+: { template+: { spec+: { securityContext+: { fsGroup: fsGroup } } } } },
          '#withFsGroupChangePolicy':: d.fn(help='', args=[d.arg(name='fsGroupChangePolicy', type=d.T.string)]),
          withFsGroupChangePolicy(fsGroupChangePolicy): { spec+: { template+: { spec+: { securityContext+: { fsGroupChangePolicy: fsGroupChangePolicy } } } } },
          '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
          withRunAsGroup(runAsGroup): { spec+: { template+: { spec+: { securityContext+: { runAsGroup: runAsGroup } } } } },
          '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
          withRunAsNonRoot(runAsNonRoot): { spec+: { template+: { spec+: { securityContext+: { runAsNonRoot: runAsNonRoot } } } } },
          '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
          withRunAsUser(runAsUser): { spec+: { template+: { spec+: { securityContext+: { runAsUser: runAsUser } } } } },
          '#withSupplementalGroups':: d.fn(help='', args=[d.arg(name='supplementalGroups', type=d.T.array)]),
          withSupplementalGroups(supplementalGroups): { spec+: { template+: { spec+: { securityContext+: { supplementalGroups: if std.isArray(v=supplementalGroups) then supplementalGroups else [supplementalGroups] } } } } },
          '#withSupplementalGroupsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='supplementalGroups', type=d.T.array)]),
          withSupplementalGroupsMixin(supplementalGroups): { spec+: { template+: { spec+: { securityContext+: { supplementalGroups+: if std.isArray(v=supplementalGroups) then supplementalGroups else [supplementalGroups] } } } } },
          '#withSysctls':: d.fn(help='', args=[d.arg(name='sysctls', type=d.T.array)]),
          withSysctls(sysctls): { spec+: { template+: { spec+: { securityContext+: { sysctls: if std.isArray(v=sysctls) then sysctls else [sysctls] } } } } },
          '#withSysctlsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sysctls', type=d.T.array)]),
          withSysctlsMixin(sysctls): { spec+: { template+: { spec+: { securityContext+: { sysctls+: if std.isArray(v=sysctls) then sysctls else [sysctls] } } } } },
        },
        '#tolerations':: d.obj(help=''),
        tolerations: {
          '#withEffect':: d.fn(help='', args=[d.arg(name='effect', type=d.T.string)]),
          withEffect(effect): { effect: effect },
          '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { key: key },
          '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
          withOperator(operator): { operator: operator },
          '#withTolerationSeconds':: d.fn(help='', args=[d.arg(name='tolerationSeconds', type=d.T.integer)]),
          withTolerationSeconds(tolerationSeconds): { tolerationSeconds: tolerationSeconds },
          '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { value: value },
        },
        '#topologySpreadConstraints':: d.obj(help=''),
        topologySpreadConstraints: {
          '#labelSelector':: d.obj(help=''),
          labelSelector: {
            '#matchExpressions':: d.obj(help=''),
            matchExpressions: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { key: key },
              '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
              withOperator(operator): { operator: operator },
              '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
              withValues(values): { values: if std.isArray(v=values) then values else [values] },
              '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
              withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
            },
            '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
            withMatchExpressions(matchExpressions): { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
            '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
            withMatchExpressionsMixin(matchExpressions): { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
            '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
            withMatchLabels(matchLabels): { labelSelector+: { matchLabels: matchLabels } },
            '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
            withMatchLabelsMixin(matchLabels): { labelSelector+: { matchLabels+: matchLabels } },
          },
          '#withMatchLabelKeys':: d.fn(help='', args=[d.arg(name='matchLabelKeys', type=d.T.array)]),
          withMatchLabelKeys(matchLabelKeys): { matchLabelKeys: if std.isArray(v=matchLabelKeys) then matchLabelKeys else [matchLabelKeys] },
          '#withMatchLabelKeysMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabelKeys', type=d.T.array)]),
          withMatchLabelKeysMixin(matchLabelKeys): { matchLabelKeys+: if std.isArray(v=matchLabelKeys) then matchLabelKeys else [matchLabelKeys] },
          '#withMaxSkew':: d.fn(help='', args=[d.arg(name='maxSkew', type=d.T.integer)]),
          withMaxSkew(maxSkew): { maxSkew: maxSkew },
          '#withMinDomains':: d.fn(help='', args=[d.arg(name='minDomains', type=d.T.integer)]),
          withMinDomains(minDomains): { minDomains: minDomains },
          '#withNodeAffinityPolicy':: d.fn(help='', args=[d.arg(name='nodeAffinityPolicy', type=d.T.string)]),
          withNodeAffinityPolicy(nodeAffinityPolicy): { nodeAffinityPolicy: nodeAffinityPolicy },
          '#withNodeTaintsPolicy':: d.fn(help='', args=[d.arg(name='nodeTaintsPolicy', type=d.T.string)]),
          withNodeTaintsPolicy(nodeTaintsPolicy): { nodeTaintsPolicy: nodeTaintsPolicy },
          '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
          withTopologyKey(topologyKey): { topologyKey: topologyKey },
          '#withWhenUnsatisfiable':: d.fn(help='', args=[d.arg(name='whenUnsatisfiable', type=d.T.string)]),
          withWhenUnsatisfiable(whenUnsatisfiable): { whenUnsatisfiable: whenUnsatisfiable },
        },
        '#withActiveDeadlineSeconds':: d.fn(help='', args=[d.arg(name='activeDeadlineSeconds', type=d.T.integer)]),
        withActiveDeadlineSeconds(activeDeadlineSeconds): { spec+: { template+: { spec+: { activeDeadlineSeconds: activeDeadlineSeconds } } } },
        '#withAutomountServiceAccountToken':: d.fn(help='', args=[d.arg(name='automountServiceAccountToken', type=d.T.boolean)]),
        withAutomountServiceAccountToken(automountServiceAccountToken): { spec+: { template+: { spec+: { automountServiceAccountToken: automountServiceAccountToken } } } },
        '#withContainers':: d.fn(help='', args=[d.arg(name='containers', type=d.T.array)]),
        withContainers(containers): { spec+: { template+: { spec+: { containers: if std.isArray(v=containers) then containers else [containers] } } } },
        '#withContainersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='containers', type=d.T.array)]),
        withContainersMixin(containers): { spec+: { template+: { spec+: { containers+: if std.isArray(v=containers) then containers else [containers] } } } },
        '#withDnsPolicy':: d.fn(help='', args=[d.arg(name='dnsPolicy', type=d.T.string)]),
        withDnsPolicy(dnsPolicy): { spec+: { template+: { spec+: { dnsPolicy: dnsPolicy } } } },
        '#withEnableServiceLinks':: d.fn(help='', args=[d.arg(name='enableServiceLinks', type=d.T.boolean)]),
        withEnableServiceLinks(enableServiceLinks): { spec+: { template+: { spec+: { enableServiceLinks: enableServiceLinks } } } },
        '#withEphemeralContainers':: d.fn(help='', args=[d.arg(name='ephemeralContainers', type=d.T.array)]),
        withEphemeralContainers(ephemeralContainers): { spec+: { template+: { spec+: { ephemeralContainers: if std.isArray(v=ephemeralContainers) then ephemeralContainers else [ephemeralContainers] } } } },
        '#withEphemeralContainersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ephemeralContainers', type=d.T.array)]),
        withEphemeralContainersMixin(ephemeralContainers): { spec+: { template+: { spec+: { ephemeralContainers+: if std.isArray(v=ephemeralContainers) then ephemeralContainers else [ephemeralContainers] } } } },
        '#withHostAliases':: d.fn(help='', args=[d.arg(name='hostAliases', type=d.T.array)]),
        withHostAliases(hostAliases): { spec+: { template+: { spec+: { hostAliases: if std.isArray(v=hostAliases) then hostAliases else [hostAliases] } } } },
        '#withHostAliasesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='hostAliases', type=d.T.array)]),
        withHostAliasesMixin(hostAliases): { spec+: { template+: { spec+: { hostAliases+: if std.isArray(v=hostAliases) then hostAliases else [hostAliases] } } } },
        '#withHostIPC':: d.fn(help='', args=[d.arg(name='hostIPC', type=d.T.boolean)]),
        withHostIPC(hostIPC): { spec+: { template+: { spec+: { hostIPC: hostIPC } } } },
        '#withHostNetwork':: d.fn(help='', args=[d.arg(name='hostNetwork', type=d.T.boolean)]),
        withHostNetwork(hostNetwork): { spec+: { template+: { spec+: { hostNetwork: hostNetwork } } } },
        '#withHostPID':: d.fn(help='', args=[d.arg(name='hostPID', type=d.T.boolean)]),
        withHostPID(hostPID): { spec+: { template+: { spec+: { hostPID: hostPID } } } },
        '#withHostUsers':: d.fn(help='', args=[d.arg(name='hostUsers', type=d.T.boolean)]),
        withHostUsers(hostUsers): { spec+: { template+: { spec+: { hostUsers: hostUsers } } } },
        '#withHostname':: d.fn(help='', args=[d.arg(name='hostname', type=d.T.string)]),
        withHostname(hostname): { spec+: { template+: { spec+: { hostname: hostname } } } },
        '#withImagePullSecrets':: d.fn(help='', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
        withImagePullSecrets(imagePullSecrets): { spec+: { template+: { spec+: { imagePullSecrets: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } },
        '#withImagePullSecretsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
        withImagePullSecretsMixin(imagePullSecrets): { spec+: { template+: { spec+: { imagePullSecrets+: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } },
        '#withInitContainers':: d.fn(help='', args=[d.arg(name='initContainers', type=d.T.array)]),
        withInitContainers(initContainers): { spec+: { template+: { spec+: { initContainers: if std.isArray(v=initContainers) then initContainers else [initContainers] } } } },
        '#withInitContainersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='initContainers', type=d.T.array)]),
        withInitContainersMixin(initContainers): { spec+: { template+: { spec+: { initContainers+: if std.isArray(v=initContainers) then initContainers else [initContainers] } } } },
        '#withNodeName':: d.fn(help='', args=[d.arg(name='nodeName', type=d.T.string)]),
        withNodeName(nodeName): { spec+: { template+: { spec+: { nodeName: nodeName } } } },
        '#withNodeSelector':: d.fn(help='', args=[d.arg(name='nodeSelector', type=d.T.object)]),
        withNodeSelector(nodeSelector): { spec+: { template+: { spec+: { nodeSelector: nodeSelector } } } },
        '#withNodeSelectorMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nodeSelector', type=d.T.object)]),
        withNodeSelectorMixin(nodeSelector): { spec+: { template+: { spec+: { nodeSelector+: nodeSelector } } } },
        '#withOverhead':: d.fn(help='', args=[d.arg(name='overhead', type=d.T.object)]),
        withOverhead(overhead): { spec+: { template+: { spec+: { overhead: overhead } } } },
        '#withOverheadMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='overhead', type=d.T.object)]),
        withOverheadMixin(overhead): { spec+: { template+: { spec+: { overhead+: overhead } } } },
        '#withPreemptionPolicy':: d.fn(help='', args=[d.arg(name='preemptionPolicy', type=d.T.string)]),
        withPreemptionPolicy(preemptionPolicy): { spec+: { template+: { spec+: { preemptionPolicy: preemptionPolicy } } } },
        '#withPriority':: d.fn(help='', args=[d.arg(name='priority', type=d.T.integer)]),
        withPriority(priority): { spec+: { template+: { spec+: { priority: priority } } } },
        '#withPriorityClassName':: d.fn(help='', args=[d.arg(name='priorityClassName', type=d.T.string)]),
        withPriorityClassName(priorityClassName): { spec+: { template+: { spec+: { priorityClassName: priorityClassName } } } },
        '#withReadinessGates':: d.fn(help='', args=[d.arg(name='readinessGates', type=d.T.array)]),
        withReadinessGates(readinessGates): { spec+: { template+: { spec+: { readinessGates: if std.isArray(v=readinessGates) then readinessGates else [readinessGates] } } } },
        '#withReadinessGatesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='readinessGates', type=d.T.array)]),
        withReadinessGatesMixin(readinessGates): { spec+: { template+: { spec+: { readinessGates+: if std.isArray(v=readinessGates) then readinessGates else [readinessGates] } } } },
        '#withResourceClaims':: d.fn(help='', args=[d.arg(name='resourceClaims', type=d.T.array)]),
        withResourceClaims(resourceClaims): { spec+: { template+: { spec+: { resourceClaims: if std.isArray(v=resourceClaims) then resourceClaims else [resourceClaims] } } } },
        '#withResourceClaimsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='resourceClaims', type=d.T.array)]),
        withResourceClaimsMixin(resourceClaims): { spec+: { template+: { spec+: { resourceClaims+: if std.isArray(v=resourceClaims) then resourceClaims else [resourceClaims] } } } },
        '#withRestartPolicy':: d.fn(help='', args=[d.arg(name='restartPolicy', type=d.T.string)]),
        withRestartPolicy(restartPolicy): { spec+: { template+: { spec+: { restartPolicy: restartPolicy } } } },
        '#withRuntimeClassName':: d.fn(help='', args=[d.arg(name='runtimeClassName', type=d.T.string)]),
        withRuntimeClassName(runtimeClassName): { spec+: { template+: { spec+: { runtimeClassName: runtimeClassName } } } },
        '#withSchedulerName':: d.fn(help='', args=[d.arg(name='schedulerName', type=d.T.string)]),
        withSchedulerName(schedulerName): { spec+: { template+: { spec+: { schedulerName: schedulerName } } } },
        '#withSchedulingGates':: d.fn(help='', args=[d.arg(name='schedulingGates', type=d.T.array)]),
        withSchedulingGates(schedulingGates): { spec+: { template+: { spec+: { schedulingGates: if std.isArray(v=schedulingGates) then schedulingGates else [schedulingGates] } } } },
        '#withSchedulingGatesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='schedulingGates', type=d.T.array)]),
        withSchedulingGatesMixin(schedulingGates): { spec+: { template+: { spec+: { schedulingGates+: if std.isArray(v=schedulingGates) then schedulingGates else [schedulingGates] } } } },
        '#withServiceAccount':: d.fn(help='', args=[d.arg(name='serviceAccount', type=d.T.string)]),
        withServiceAccount(serviceAccount): { spec+: { template+: { spec+: { serviceAccount: serviceAccount } } } },
        '#withServiceAccountName':: d.fn(help='', args=[d.arg(name='serviceAccountName', type=d.T.string)]),
        withServiceAccountName(serviceAccountName): { spec+: { template+: { spec+: { serviceAccountName: serviceAccountName } } } },
        '#withSetHostnameAsFQDN':: d.fn(help='', args=[d.arg(name='setHostnameAsFQDN', type=d.T.boolean)]),
        withSetHostnameAsFQDN(setHostnameAsFQDN): { spec+: { template+: { spec+: { setHostnameAsFQDN: setHostnameAsFQDN } } } },
        '#withShareProcessNamespace':: d.fn(help='', args=[d.arg(name='shareProcessNamespace', type=d.T.boolean)]),
        withShareProcessNamespace(shareProcessNamespace): { spec+: { template+: { spec+: { shareProcessNamespace: shareProcessNamespace } } } },
        '#withSubdomain':: d.fn(help='', args=[d.arg(name='subdomain', type=d.T.string)]),
        withSubdomain(subdomain): { spec+: { template+: { spec+: { subdomain: subdomain } } } },
        '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
        withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { spec+: { template+: { spec+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } } } },
        '#withTolerations':: d.fn(help='', args=[d.arg(name='tolerations', type=d.T.array)]),
        withTolerations(tolerations): { spec+: { template+: { spec+: { tolerations: if std.isArray(v=tolerations) then tolerations else [tolerations] } } } },
        '#withTolerationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tolerations', type=d.T.array)]),
        withTolerationsMixin(tolerations): { spec+: { template+: { spec+: { tolerations+: if std.isArray(v=tolerations) then tolerations else [tolerations] } } } },
        '#withTopologySpreadConstraints':: d.fn(help='', args=[d.arg(name='topologySpreadConstraints', type=d.T.array)]),
        withTopologySpreadConstraints(topologySpreadConstraints): { spec+: { template+: { spec+: { topologySpreadConstraints: if std.isArray(v=topologySpreadConstraints) then topologySpreadConstraints else [topologySpreadConstraints] } } } },
        '#withTopologySpreadConstraintsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='topologySpreadConstraints', type=d.T.array)]),
        withTopologySpreadConstraintsMixin(topologySpreadConstraints): { spec+: { template+: { spec+: { topologySpreadConstraints+: if std.isArray(v=topologySpreadConstraints) then topologySpreadConstraints else [topologySpreadConstraints] } } } },
        '#withVolumes':: d.fn(help='', args=[d.arg(name='volumes', type=d.T.array)]),
        withVolumes(volumes): { spec+: { template+: { spec+: { volumes: if std.isArray(v=volumes) then volumes else [volumes] } } } },
        '#withVolumesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumes', type=d.T.array)]),
        withVolumesMixin(volumes): { spec+: { template+: { spec+: { volumes+: if std.isArray(v=volumes) then volumes else [volumes] } } } },
      },
    },
    '#withMinReadySeconds':: d.fn(help='', args=[d.arg(name='minReadySeconds', type=d.T.integer)]),
    withMinReadySeconds(minReadySeconds): { spec+: { minReadySeconds: minReadySeconds } },
    '#withPaused':: d.fn(help='', args=[d.arg(name='paused', type=d.T.boolean)]),
    withPaused(paused): { spec+: { paused: paused } },
    '#withProgressDeadlineAbort':: d.fn(help='', args=[d.arg(name='progressDeadlineAbort', type=d.T.boolean)]),
    withProgressDeadlineAbort(progressDeadlineAbort): { spec+: { progressDeadlineAbort: progressDeadlineAbort } },
    '#withProgressDeadlineSeconds':: d.fn(help='', args=[d.arg(name='progressDeadlineSeconds', type=d.T.integer)]),
    withProgressDeadlineSeconds(progressDeadlineSeconds): { spec+: { progressDeadlineSeconds: progressDeadlineSeconds } },
    '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.integer)]),
    withReplicas(replicas): { spec+: { replicas: replicas } },
    '#withRestartAt':: d.fn(help='', args=[d.arg(name='restartAt', type=d.T.string)]),
    withRestartAt(restartAt): { spec+: { restartAt: restartAt } },
    '#withRevisionHistoryLimit':: d.fn(help='', args=[d.arg(name='revisionHistoryLimit', type=d.T.integer)]),
    withRevisionHistoryLimit(revisionHistoryLimit): { spec+: { revisionHistoryLimit: revisionHistoryLimit } },
    '#workloadRef':: d.obj(help=''),
    workloadRef: {
      '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
      withApiVersion(apiVersion): { spec+: { workloadRef+: { apiVersion: apiVersion } } },
      '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
      withKind(kind): { spec+: { workloadRef+: { kind: kind } } },
      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { workloadRef+: { name: name } } },
      '#withScaleDown':: d.fn(help='', args=[d.arg(name='scaleDown', type=d.T.string)]),
      withScaleDown(scaleDown): { spec+: { workloadRef+: { scaleDown: scaleDown } } },
    },
  },
  '#mixin': 'ignore',
  mixin: self,
}
