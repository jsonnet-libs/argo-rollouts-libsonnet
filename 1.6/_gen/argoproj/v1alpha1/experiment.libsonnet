{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='experiment', url='', help=''),
  '#metadata':: d.obj(help='"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."'),
  metadata: {
    '#withAnnotations':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { metadata+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
    '#withClusterName':: d.fn(help='"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { metadata+: { clusterName: clusterName } },
    '#withCreationTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='creationTimestamp', type=d.T.string)]),
    withCreationTimestamp(creationTimestamp): { metadata+: { creationTimestamp: creationTimestamp } },
    '#withDeletionGracePeriodSeconds':: d.fn(help='"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."', args=[d.arg(name='deletionGracePeriodSeconds', type=d.T.integer)]),
    withDeletionGracePeriodSeconds(deletionGracePeriodSeconds): { metadata+: { deletionGracePeriodSeconds: deletionGracePeriodSeconds } },
    '#withDeletionTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='deletionTimestamp', type=d.T.string)]),
    withDeletionTimestamp(deletionTimestamp): { metadata+: { deletionTimestamp: deletionTimestamp } },
    '#withFinalizers':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizers(finalizers): { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withFinalizersMixin':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizersMixin(finalizers): { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withGenerateName':: d.fn(help='"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"', args=[d.arg(name='generateName', type=d.T.string)]),
    withGenerateName(generateName): { metadata+: { generateName: generateName } },
    '#withGeneration':: d.fn(help='"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."', args=[d.arg(name='generation', type=d.T.integer)]),
    withGeneration(generation): { metadata+: { generation: generation } },
    '#withLabels':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
    withLabels(labels): { metadata+: { labels: labels } },
    '#withLabelsMixin':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
    withLabelsMixin(labels): { metadata+: { labels+: labels } },
    '#withName':: d.fn(help='"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { metadata+: { name: name } },
    '#withNamespace':: d.fn(help='"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\"default\\" namespace, but \\"default\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { metadata+: { namespace: namespace } },
    '#withOwnerReferences':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferences(ownerReferences): { metadata+: { ownerReferences: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withOwnerReferencesMixin':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferencesMixin(ownerReferences): { metadata+: { ownerReferences+: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withResourceVersion':: d.fn(help='"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
    withResourceVersion(resourceVersion): { metadata+: { resourceVersion: resourceVersion } },
    '#withSelfLink':: d.fn(help='"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."', args=[d.arg(name='selfLink', type=d.T.string)]),
    withSelfLink(selfLink): { metadata+: { selfLink: selfLink } },
    '#withUid':: d.fn(help='"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"', args=[d.arg(name='uid', type=d.T.string)]),
    withUid(uid): { metadata+: { uid: uid } },
  },
  '#new':: d.fn(help='new returns an instance of Experiment', args=[d.arg(name='name', type=d.T.string)]),
  new(name): {
    apiVersion: 'argoproj.io/v1alpha1',
    kind: 'Experiment',
  } + self.metadata.withName(name=name),
  '#spec':: d.obj(help=''),
  spec: {
    '#analyses':: d.obj(help=''),
    analyses: {
      '#args':: d.obj(help=''),
      args: {
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#fieldRef':: d.obj(help=''),
          fieldRef: {
            '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
            withFieldPath(fieldPath): { valueFrom+: { fieldRef+: { fieldPath: fieldPath } } },
          },
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { valueFrom+: { secretKeyRef+: { key: key } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { valueFrom+: { secretKeyRef+: { name: name } } },
          },
        },
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { value: value },
      },
      '#withArgs':: d.fn(help='', args=[d.arg(name='args', type=d.T.array)]),
      withArgs(args): { args: if std.isArray(v=args) then args else [args] },
      '#withArgsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='args', type=d.T.array)]),
      withArgsMixin(args): { args+: if std.isArray(v=args) then args else [args] },
      '#withClusterScope':: d.fn(help='', args=[d.arg(name='clusterScope', type=d.T.boolean)]),
      withClusterScope(clusterScope): { clusterScope: clusterScope },
      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { name: name },
      '#withRequiredForCompletion':: d.fn(help='', args=[d.arg(name='requiredForCompletion', type=d.T.boolean)]),
      withRequiredForCompletion(requiredForCompletion): { requiredForCompletion: requiredForCompletion },
      '#withTemplateName':: d.fn(help='', args=[d.arg(name='templateName', type=d.T.string)]),
      withTemplateName(templateName): { templateName: templateName },
    },
    '#dryRun':: d.obj(help=''),
    dryRun: {
      '#withMetricName':: d.fn(help='', args=[d.arg(name='metricName', type=d.T.string)]),
      withMetricName(metricName): { metricName: metricName },
    },
    '#measurementRetention':: d.obj(help=''),
    measurementRetention: {
      '#withLimit':: d.fn(help='', args=[d.arg(name='limit', type=d.T.integer)]),
      withLimit(limit): { limit: limit },
      '#withMetricName':: d.fn(help='', args=[d.arg(name='metricName', type=d.T.string)]),
      withMetricName(metricName): { metricName: metricName },
    },
    '#templates':: d.obj(help=''),
    templates: {
      '#selector':: d.obj(help=''),
      selector: {
        '#matchExpressions':: d.obj(help=''),
        matchExpressions: {
          '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { key: key },
          '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
          withOperator(operator): { operator: operator },
          '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
          withValues(values): { values: if std.isArray(v=values) then values else [values] },
          '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
          withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
        },
        '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
        withMatchExpressions(matchExpressions): { selector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
        '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
        withMatchExpressionsMixin(matchExpressions): { selector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
        '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
        withMatchLabels(matchLabels): { selector+: { matchLabels: matchLabels } },
        '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
        withMatchLabelsMixin(matchLabels): { selector+: { matchLabels+: matchLabels } },
      },
      '#service':: d.obj(help=''),
      service: {
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { service+: { name: name } },
      },
      '#template':: d.obj(help=''),
      template: {
        '#metadata':: d.obj(help=''),
        metadata: {
          '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
          withAnnotations(annotations): { template+: { metadata+: { annotations: annotations } } },
          '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
          withAnnotationsMixin(annotations): { template+: { metadata+: { annotations+: annotations } } },
          '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
          withLabels(labels): { template+: { metadata+: { labels: labels } } },
          '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
          withLabelsMixin(labels): { template+: { metadata+: { labels+: labels } } },
        },
        '#spec':: d.obj(help=''),
        spec: {
          '#affinity':: d.obj(help=''),
          affinity: {
            '#nodeAffinity':: d.obj(help=''),
            nodeAffinity: {
              '#preferredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
              preferredDuringSchedulingIgnoredDuringExecution: {
                '#preference':: d.obj(help=''),
                preference: {
                  '#matchExpressions':: d.obj(help=''),
                  matchExpressions: {
                    '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                    withKey(key): { key: key },
                    '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                    withOperator(operator): { operator: operator },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                    withValues(values): { values: if std.isArray(v=values) then values else [values] },
                    '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                    withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                  },
                  '#matchFields':: d.obj(help=''),
                  matchFields: {
                    '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                    withKey(key): { key: key },
                    '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                    withOperator(operator): { operator: operator },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                    withValues(values): { values: if std.isArray(v=values) then values else [values] },
                    '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                    withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                  },
                  '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                  withMatchExpressions(matchExpressions): { preference+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                  '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                  withMatchExpressionsMixin(matchExpressions): { preference+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                  '#withMatchFields':: d.fn(help='', args=[d.arg(name='matchFields', type=d.T.array)]),
                  withMatchFields(matchFields): { preference+: { matchFields: if std.isArray(v=matchFields) then matchFields else [matchFields] } },
                  '#withMatchFieldsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchFields', type=d.T.array)]),
                  withMatchFieldsMixin(matchFields): { preference+: { matchFields+: if std.isArray(v=matchFields) then matchFields else [matchFields] } },
                },
                '#withWeight':: d.fn(help='', args=[d.arg(name='weight', type=d.T.integer)]),
                withWeight(weight): { weight: weight },
              },
              '#requiredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
              requiredDuringSchedulingIgnoredDuringExecution: {
                '#nodeSelectorTerms':: d.obj(help=''),
                nodeSelectorTerms: {
                  '#matchExpressions':: d.obj(help=''),
                  matchExpressions: {
                    '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                    withKey(key): { key: key },
                    '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                    withOperator(operator): { operator: operator },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                    withValues(values): { values: if std.isArray(v=values) then values else [values] },
                    '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                    withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                  },
                  '#matchFields':: d.obj(help=''),
                  matchFields: {
                    '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                    withKey(key): { key: key },
                    '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                    withOperator(operator): { operator: operator },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                    withValues(values): { values: if std.isArray(v=values) then values else [values] },
                    '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                    withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                  },
                  '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                  withMatchExpressions(matchExpressions): { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] },
                  '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                  withMatchExpressionsMixin(matchExpressions): { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] },
                  '#withMatchFields':: d.fn(help='', args=[d.arg(name='matchFields', type=d.T.array)]),
                  withMatchFields(matchFields): { matchFields: if std.isArray(v=matchFields) then matchFields else [matchFields] },
                  '#withMatchFieldsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchFields', type=d.T.array)]),
                  withMatchFieldsMixin(matchFields): { matchFields+: if std.isArray(v=matchFields) then matchFields else [matchFields] },
                },
                '#withNodeSelectorTerms':: d.fn(help='', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
                withNodeSelectorTerms(nodeSelectorTerms): { template+: { spec+: { affinity+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } } } },
                '#withNodeSelectorTermsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
                withNodeSelectorTermsMixin(nodeSelectorTerms): { template+: { spec+: { affinity+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms+: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } } } },
              },
              '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { template+: { spec+: { affinity+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } },
              '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { template+: { spec+: { affinity+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } },
            },
            '#podAffinity':: d.obj(help=''),
            podAffinity: {
              '#preferredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
              preferredDuringSchedulingIgnoredDuringExecution: {
                '#podAffinityTerm':: d.obj(help=''),
                podAffinityTerm: {
                  '#labelSelector':: d.obj(help=''),
                  labelSelector: {
                    '#matchExpressions':: d.obj(help=''),
                    matchExpressions: {
                      '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                      withKey(key): { key: key },
                      '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                      withOperator(operator): { operator: operator },
                      '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                      withValues(values): { values: if std.isArray(v=values) then values else [values] },
                      '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                      withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                    },
                    '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                    withMatchExpressions(matchExpressions): { podAffinityTerm+: { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                    '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                    withMatchExpressionsMixin(matchExpressions): { podAffinityTerm+: { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                    '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                    withMatchLabels(matchLabels): { podAffinityTerm+: { labelSelector+: { matchLabels: matchLabels } } },
                    '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                    withMatchLabelsMixin(matchLabels): { podAffinityTerm+: { labelSelector+: { matchLabels+: matchLabels } } },
                  },
                  '#namespaceSelector':: d.obj(help=''),
                  namespaceSelector: {
                    '#matchExpressions':: d.obj(help=''),
                    matchExpressions: {
                      '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                      withKey(key): { key: key },
                      '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                      withOperator(operator): { operator: operator },
                      '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                      withValues(values): { values: if std.isArray(v=values) then values else [values] },
                      '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                      withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                    },
                    '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                    withMatchExpressions(matchExpressions): { podAffinityTerm+: { namespaceSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                    '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                    withMatchExpressionsMixin(matchExpressions): { podAffinityTerm+: { namespaceSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                    '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                    withMatchLabels(matchLabels): { podAffinityTerm+: { namespaceSelector+: { matchLabels: matchLabels } } },
                    '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                    withMatchLabelsMixin(matchLabels): { podAffinityTerm+: { namespaceSelector+: { matchLabels+: matchLabels } } },
                  },
                  '#withNamespaces':: d.fn(help='', args=[d.arg(name='namespaces', type=d.T.array)]),
                  withNamespaces(namespaces): { podAffinityTerm+: { namespaces: if std.isArray(v=namespaces) then namespaces else [namespaces] } },
                  '#withNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='namespaces', type=d.T.array)]),
                  withNamespacesMixin(namespaces): { podAffinityTerm+: { namespaces+: if std.isArray(v=namespaces) then namespaces else [namespaces] } },
                  '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
                  withTopologyKey(topologyKey): { podAffinityTerm+: { topologyKey: topologyKey } },
                },
                '#withWeight':: d.fn(help='', args=[d.arg(name='weight', type=d.T.integer)]),
                withWeight(weight): { weight: weight },
              },
              '#requiredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
              requiredDuringSchedulingIgnoredDuringExecution: {
                '#labelSelector':: d.obj(help=''),
                labelSelector: {
                  '#matchExpressions':: d.obj(help=''),
                  matchExpressions: {
                    '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                    withKey(key): { key: key },
                    '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                    withOperator(operator): { operator: operator },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                    withValues(values): { values: if std.isArray(v=values) then values else [values] },
                    '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                    withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                  },
                  '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                  withMatchExpressions(matchExpressions): { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                  '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                  withMatchExpressionsMixin(matchExpressions): { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                  '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                  withMatchLabels(matchLabels): { labelSelector+: { matchLabels: matchLabels } },
                  '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                  withMatchLabelsMixin(matchLabels): { labelSelector+: { matchLabels+: matchLabels } },
                },
                '#namespaceSelector':: d.obj(help=''),
                namespaceSelector: {
                  '#matchExpressions':: d.obj(help=''),
                  matchExpressions: {
                    '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                    withKey(key): { key: key },
                    '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                    withOperator(operator): { operator: operator },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                    withValues(values): { values: if std.isArray(v=values) then values else [values] },
                    '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                    withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                  },
                  '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                  withMatchExpressions(matchExpressions): { namespaceSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                  '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                  withMatchExpressionsMixin(matchExpressions): { namespaceSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                  '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                  withMatchLabels(matchLabels): { namespaceSelector+: { matchLabels: matchLabels } },
                  '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                  withMatchLabelsMixin(matchLabels): { namespaceSelector+: { matchLabels+: matchLabels } },
                },
                '#withNamespaces':: d.fn(help='', args=[d.arg(name='namespaces', type=d.T.array)]),
                withNamespaces(namespaces): { namespaces: if std.isArray(v=namespaces) then namespaces else [namespaces] },
                '#withNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='namespaces', type=d.T.array)]),
                withNamespacesMixin(namespaces): { namespaces+: if std.isArray(v=namespaces) then namespaces else [namespaces] },
                '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
                withTopologyKey(topologyKey): { topologyKey: topologyKey },
              },
              '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { template+: { spec+: { affinity+: { podAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } },
              '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { template+: { spec+: { affinity+: { podAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } },
              '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { template+: { spec+: { affinity+: { podAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } },
              '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { template+: { spec+: { affinity+: { podAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } },
            },
            '#podAntiAffinity':: d.obj(help=''),
            podAntiAffinity: {
              '#preferredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
              preferredDuringSchedulingIgnoredDuringExecution: {
                '#podAffinityTerm':: d.obj(help=''),
                podAffinityTerm: {
                  '#labelSelector':: d.obj(help=''),
                  labelSelector: {
                    '#matchExpressions':: d.obj(help=''),
                    matchExpressions: {
                      '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                      withKey(key): { key: key },
                      '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                      withOperator(operator): { operator: operator },
                      '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                      withValues(values): { values: if std.isArray(v=values) then values else [values] },
                      '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                      withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                    },
                    '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                    withMatchExpressions(matchExpressions): { podAffinityTerm+: { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                    '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                    withMatchExpressionsMixin(matchExpressions): { podAffinityTerm+: { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                    '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                    withMatchLabels(matchLabels): { podAffinityTerm+: { labelSelector+: { matchLabels: matchLabels } } },
                    '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                    withMatchLabelsMixin(matchLabels): { podAffinityTerm+: { labelSelector+: { matchLabels+: matchLabels } } },
                  },
                  '#namespaceSelector':: d.obj(help=''),
                  namespaceSelector: {
                    '#matchExpressions':: d.obj(help=''),
                    matchExpressions: {
                      '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                      withKey(key): { key: key },
                      '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                      withOperator(operator): { operator: operator },
                      '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                      withValues(values): { values: if std.isArray(v=values) then values else [values] },
                      '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                      withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                    },
                    '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                    withMatchExpressions(matchExpressions): { podAffinityTerm+: { namespaceSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                    '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                    withMatchExpressionsMixin(matchExpressions): { podAffinityTerm+: { namespaceSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                    '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                    withMatchLabels(matchLabels): { podAffinityTerm+: { namespaceSelector+: { matchLabels: matchLabels } } },
                    '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                    withMatchLabelsMixin(matchLabels): { podAffinityTerm+: { namespaceSelector+: { matchLabels+: matchLabels } } },
                  },
                  '#withNamespaces':: d.fn(help='', args=[d.arg(name='namespaces', type=d.T.array)]),
                  withNamespaces(namespaces): { podAffinityTerm+: { namespaces: if std.isArray(v=namespaces) then namespaces else [namespaces] } },
                  '#withNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='namespaces', type=d.T.array)]),
                  withNamespacesMixin(namespaces): { podAffinityTerm+: { namespaces+: if std.isArray(v=namespaces) then namespaces else [namespaces] } },
                  '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
                  withTopologyKey(topologyKey): { podAffinityTerm+: { topologyKey: topologyKey } },
                },
                '#withWeight':: d.fn(help='', args=[d.arg(name='weight', type=d.T.integer)]),
                withWeight(weight): { weight: weight },
              },
              '#requiredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
              requiredDuringSchedulingIgnoredDuringExecution: {
                '#labelSelector':: d.obj(help=''),
                labelSelector: {
                  '#matchExpressions':: d.obj(help=''),
                  matchExpressions: {
                    '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                    withKey(key): { key: key },
                    '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                    withOperator(operator): { operator: operator },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                    withValues(values): { values: if std.isArray(v=values) then values else [values] },
                    '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                    withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                  },
                  '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                  withMatchExpressions(matchExpressions): { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                  '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                  withMatchExpressionsMixin(matchExpressions): { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                  '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                  withMatchLabels(matchLabels): { labelSelector+: { matchLabels: matchLabels } },
                  '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                  withMatchLabelsMixin(matchLabels): { labelSelector+: { matchLabels+: matchLabels } },
                },
                '#namespaceSelector':: d.obj(help=''),
                namespaceSelector: {
                  '#matchExpressions':: d.obj(help=''),
                  matchExpressions: {
                    '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                    withKey(key): { key: key },
                    '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                    withOperator(operator): { operator: operator },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                    withValues(values): { values: if std.isArray(v=values) then values else [values] },
                    '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                    withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                  },
                  '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                  withMatchExpressions(matchExpressions): { namespaceSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                  '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                  withMatchExpressionsMixin(matchExpressions): { namespaceSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                  '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                  withMatchLabels(matchLabels): { namespaceSelector+: { matchLabels: matchLabels } },
                  '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                  withMatchLabelsMixin(matchLabels): { namespaceSelector+: { matchLabels+: matchLabels } },
                },
                '#withNamespaces':: d.fn(help='', args=[d.arg(name='namespaces', type=d.T.array)]),
                withNamespaces(namespaces): { namespaces: if std.isArray(v=namespaces) then namespaces else [namespaces] },
                '#withNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='namespaces', type=d.T.array)]),
                withNamespacesMixin(namespaces): { namespaces+: if std.isArray(v=namespaces) then namespaces else [namespaces] },
                '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
                withTopologyKey(topologyKey): { topologyKey: topologyKey },
              },
              '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { template+: { spec+: { affinity+: { podAntiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } },
              '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { template+: { spec+: { affinity+: { podAntiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } },
              '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { template+: { spec+: { affinity+: { podAntiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } },
              '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { template+: { spec+: { affinity+: { podAntiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } },
            },
          },
          '#containers':: d.obj(help=''),
          containers: {
            '#env':: d.obj(help=''),
            env: {
              '#valueFrom':: d.obj(help=''),
              valueFrom: {
                '#configMapKeyRef':: d.obj(help=''),
                configMapKeyRef: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { valueFrom+: { configMapKeyRef+: { key: key } } },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { valueFrom+: { configMapKeyRef+: { name: name } } },
                  '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                  withOptional(optional): { valueFrom+: { configMapKeyRef+: { optional: optional } } },
                },
                '#fieldRef':: d.obj(help=''),
                fieldRef: {
                  '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
                  withApiVersion(apiVersion): { valueFrom+: { fieldRef+: { apiVersion: apiVersion } } },
                  '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
                  withFieldPath(fieldPath): { valueFrom+: { fieldRef+: { fieldPath: fieldPath } } },
                },
                '#resourceFieldRef':: d.obj(help=''),
                resourceFieldRef: {
                  '#withContainerName':: d.fn(help='', args=[d.arg(name='containerName', type=d.T.string)]),
                  withContainerName(containerName): { valueFrom+: { resourceFieldRef+: { containerName: containerName } } },
                  '#withDivisor':: d.fn(help='', args=[d.arg(name='divisor', type=d.T.any)]),
                  withDivisor(divisor): { valueFrom+: { resourceFieldRef+: { divisor: divisor } } },
                  '#withResource':: d.fn(help='', args=[d.arg(name='resource', type=d.T.string)]),
                  withResource(resource): { valueFrom+: { resourceFieldRef+: { resource: resource } } },
                },
                '#secretKeyRef':: d.obj(help=''),
                secretKeyRef: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { valueFrom+: { secretKeyRef+: { key: key } } },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { valueFrom+: { secretKeyRef+: { name: name } } },
                  '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                  withOptional(optional): { valueFrom+: { secretKeyRef+: { optional: optional } } },
                },
              },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#envFrom':: d.obj(help=''),
            envFrom: {
              '#configMapRef':: d.obj(help=''),
              configMapRef: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { configMapRef+: { name: name } },
                '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { configMapRef+: { optional: optional } },
              },
              '#secretRef':: d.obj(help=''),
              secretRef: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { secretRef+: { name: name } },
                '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { secretRef+: { optional: optional } },
              },
              '#withPrefix':: d.fn(help='', args=[d.arg(name='prefix', type=d.T.string)]),
              withPrefix(prefix): { prefix: prefix },
            },
            '#lifecycle':: d.obj(help=''),
            lifecycle: {
              '#postStart':: d.obj(help=''),
              postStart: {
                '#exec':: d.obj(help=''),
                exec: {
                  '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                  withCommand(command): { lifecycle+: { postStart+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
                  '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                  withCommandMixin(command): { lifecycle+: { postStart+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
                },
                '#httpGet':: d.obj(help=''),
                httpGet: {
                  '#httpHeaders':: d.obj(help=''),
                  httpHeaders: {
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { lifecycle+: { postStart+: { httpGet+: { host: host } } } },
                  '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeaders(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                  '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeadersMixin(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { lifecycle+: { postStart+: { httpGet+: { path: path } } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { lifecycle+: { postStart+: { httpGet+: { port: port } } } },
                  '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                  withScheme(scheme): { lifecycle+: { postStart+: { httpGet+: { scheme: scheme } } } },
                },
                '#tcpSocket':: d.obj(help=''),
                tcpSocket: {
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { lifecycle+: { postStart+: { tcpSocket+: { host: host } } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { lifecycle+: { postStart+: { tcpSocket+: { port: port } } } },
                },
              },
              '#preStop':: d.obj(help=''),
              preStop: {
                '#exec':: d.obj(help=''),
                exec: {
                  '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                  withCommand(command): { lifecycle+: { preStop+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
                  '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                  withCommandMixin(command): { lifecycle+: { preStop+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
                },
                '#httpGet':: d.obj(help=''),
                httpGet: {
                  '#httpHeaders':: d.obj(help=''),
                  httpHeaders: {
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { lifecycle+: { preStop+: { httpGet+: { host: host } } } },
                  '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeaders(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                  '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeadersMixin(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { lifecycle+: { preStop+: { httpGet+: { path: path } } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { lifecycle+: { preStop+: { httpGet+: { port: port } } } },
                  '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                  withScheme(scheme): { lifecycle+: { preStop+: { httpGet+: { scheme: scheme } } } },
                },
                '#tcpSocket':: d.obj(help=''),
                tcpSocket: {
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { lifecycle+: { preStop+: { tcpSocket+: { host: host } } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { lifecycle+: { preStop+: { tcpSocket+: { port: port } } } },
                },
              },
            },
            '#livenessProbe':: d.obj(help=''),
            livenessProbe: {
              '#exec':: d.obj(help=''),
              exec: {
                '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                withCommand(command): { livenessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
                '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                withCommandMixin(command): { livenessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
              },
              '#grpc':: d.obj(help=''),
              grpc: {
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
                withPort(port): { livenessProbe+: { grpc+: { port: port } } },
                '#withService':: d.fn(help='', args=[d.arg(name='service', type=d.T.string)]),
                withService(service): { livenessProbe+: { grpc+: { service: service } } },
              },
              '#httpGet':: d.obj(help=''),
              httpGet: {
                '#httpHeaders':: d.obj(help=''),
                httpHeaders: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { livenessProbe+: { httpGet+: { host: host } } },
                '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeaders(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeadersMixin(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                withPath(path): { livenessProbe+: { httpGet+: { path: path } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { livenessProbe+: { httpGet+: { port: port } } },
                '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                withScheme(scheme): { livenessProbe+: { httpGet+: { scheme: scheme } } },
              },
              '#tcpSocket':: d.obj(help=''),
              tcpSocket: {
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { livenessProbe+: { tcpSocket+: { host: host } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { livenessProbe+: { tcpSocket+: { port: port } } },
              },
              '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
              withFailureThreshold(failureThreshold): { livenessProbe+: { failureThreshold: failureThreshold } },
              '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
              withInitialDelaySeconds(initialDelaySeconds): { livenessProbe+: { initialDelaySeconds: initialDelaySeconds } },
              '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
              withPeriodSeconds(periodSeconds): { livenessProbe+: { periodSeconds: periodSeconds } },
              '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
              withSuccessThreshold(successThreshold): { livenessProbe+: { successThreshold: successThreshold } },
              '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
              withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { livenessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
              '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
              withTimeoutSeconds(timeoutSeconds): { livenessProbe+: { timeoutSeconds: timeoutSeconds } },
            },
            '#ports':: d.obj(help=''),
            ports: {
              '#withContainerPort':: d.fn(help='', args=[d.arg(name='containerPort', type=d.T.integer)]),
              withContainerPort(containerPort): { containerPort: containerPort },
              '#withHostIP':: d.fn(help='', args=[d.arg(name='hostIP', type=d.T.string)]),
              withHostIP(hostIP): { hostIP: hostIP },
              '#withHostPort':: d.fn(help='', args=[d.arg(name='hostPort', type=d.T.integer)]),
              withHostPort(hostPort): { hostPort: hostPort },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withProtocol':: d.fn(help='', args=[d.arg(name='protocol', type=d.T.string)]),
              withProtocol(protocol): { protocol: protocol },
            },
            '#readinessProbe':: d.obj(help=''),
            readinessProbe: {
              '#exec':: d.obj(help=''),
              exec: {
                '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                withCommand(command): { readinessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
                '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                withCommandMixin(command): { readinessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
              },
              '#grpc':: d.obj(help=''),
              grpc: {
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
                withPort(port): { readinessProbe+: { grpc+: { port: port } } },
                '#withService':: d.fn(help='', args=[d.arg(name='service', type=d.T.string)]),
                withService(service): { readinessProbe+: { grpc+: { service: service } } },
              },
              '#httpGet':: d.obj(help=''),
              httpGet: {
                '#httpHeaders':: d.obj(help=''),
                httpHeaders: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { readinessProbe+: { httpGet+: { host: host } } },
                '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeaders(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeadersMixin(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                withPath(path): { readinessProbe+: { httpGet+: { path: path } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { readinessProbe+: { httpGet+: { port: port } } },
                '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                withScheme(scheme): { readinessProbe+: { httpGet+: { scheme: scheme } } },
              },
              '#tcpSocket':: d.obj(help=''),
              tcpSocket: {
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { readinessProbe+: { tcpSocket+: { host: host } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { readinessProbe+: { tcpSocket+: { port: port } } },
              },
              '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
              withFailureThreshold(failureThreshold): { readinessProbe+: { failureThreshold: failureThreshold } },
              '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
              withInitialDelaySeconds(initialDelaySeconds): { readinessProbe+: { initialDelaySeconds: initialDelaySeconds } },
              '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
              withPeriodSeconds(periodSeconds): { readinessProbe+: { periodSeconds: periodSeconds } },
              '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
              withSuccessThreshold(successThreshold): { readinessProbe+: { successThreshold: successThreshold } },
              '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
              withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { readinessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
              '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
              withTimeoutSeconds(timeoutSeconds): { readinessProbe+: { timeoutSeconds: timeoutSeconds } },
            },
            '#resources':: d.obj(help=''),
            resources: {
              '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.any)]),
              withLimits(limits): { resources+: { limits: limits } },
              '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.any)]),
              withRequests(requests): { resources+: { requests: requests } },
            },
            '#securityContext':: d.obj(help=''),
            securityContext: {
              '#capabilities':: d.obj(help=''),
              capabilities: {
                '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
                withAdd(add): { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } },
                '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
                withAddMixin(add): { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } },
                '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
                withDrop(drop): { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } },
                '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
                withDropMixin(drop): { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } },
              },
              '#seLinuxOptions':: d.obj(help=''),
              seLinuxOptions: {
                '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
                withLevel(level): { securityContext+: { seLinuxOptions+: { level: level } } },
                '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
                withRole(role): { securityContext+: { seLinuxOptions+: { role: role } } },
                '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
                withType(type): { securityContext+: { seLinuxOptions+: { type: type } } },
                '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
                withUser(user): { securityContext+: { seLinuxOptions+: { user: user } } },
              },
              '#seccompProfile':: d.obj(help=''),
              seccompProfile: {
                '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
                withLocalhostProfile(localhostProfile): { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } },
                '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
                withType(type): { securityContext+: { seccompProfile+: { type: type } } },
              },
              '#windowsOptions':: d.obj(help=''),
              windowsOptions: {
                '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
                withGmsaCredentialSpec(gmsaCredentialSpec): { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } },
                '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
                withGmsaCredentialSpecName(gmsaCredentialSpecName): { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } },
                '#withHostProcess':: d.fn(help='', args=[d.arg(name='hostProcess', type=d.T.boolean)]),
                withHostProcess(hostProcess): { securityContext+: { windowsOptions+: { hostProcess: hostProcess } } },
                '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
                withRunAsUserName(runAsUserName): { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } },
              },
              '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
              withAllowPrivilegeEscalation(allowPrivilegeEscalation): { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } },
              '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
              withPrivileged(privileged): { securityContext+: { privileged: privileged } },
              '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
              withProcMount(procMount): { securityContext+: { procMount: procMount } },
              '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
              withReadOnlyRootFilesystem(readOnlyRootFilesystem): { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } },
              '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
              withRunAsGroup(runAsGroup): { securityContext+: { runAsGroup: runAsGroup } },
              '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
              withRunAsNonRoot(runAsNonRoot): { securityContext+: { runAsNonRoot: runAsNonRoot } },
              '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
              withRunAsUser(runAsUser): { securityContext+: { runAsUser: runAsUser } },
            },
            '#startupProbe':: d.obj(help=''),
            startupProbe: {
              '#exec':: d.obj(help=''),
              exec: {
                '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                withCommand(command): { startupProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
                '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                withCommandMixin(command): { startupProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
              },
              '#grpc':: d.obj(help=''),
              grpc: {
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
                withPort(port): { startupProbe+: { grpc+: { port: port } } },
                '#withService':: d.fn(help='', args=[d.arg(name='service', type=d.T.string)]),
                withService(service): { startupProbe+: { grpc+: { service: service } } },
              },
              '#httpGet':: d.obj(help=''),
              httpGet: {
                '#httpHeaders':: d.obj(help=''),
                httpHeaders: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { startupProbe+: { httpGet+: { host: host } } },
                '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeaders(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeadersMixin(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                withPath(path): { startupProbe+: { httpGet+: { path: path } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { startupProbe+: { httpGet+: { port: port } } },
                '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                withScheme(scheme): { startupProbe+: { httpGet+: { scheme: scheme } } },
              },
              '#tcpSocket':: d.obj(help=''),
              tcpSocket: {
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { startupProbe+: { tcpSocket+: { host: host } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { startupProbe+: { tcpSocket+: { port: port } } },
              },
              '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
              withFailureThreshold(failureThreshold): { startupProbe+: { failureThreshold: failureThreshold } },
              '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
              withInitialDelaySeconds(initialDelaySeconds): { startupProbe+: { initialDelaySeconds: initialDelaySeconds } },
              '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
              withPeriodSeconds(periodSeconds): { startupProbe+: { periodSeconds: periodSeconds } },
              '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
              withSuccessThreshold(successThreshold): { startupProbe+: { successThreshold: successThreshold } },
              '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
              withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { startupProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
              '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
              withTimeoutSeconds(timeoutSeconds): { startupProbe+: { timeoutSeconds: timeoutSeconds } },
            },
            '#volumeDevices':: d.obj(help=''),
            volumeDevices: {
              '#withDevicePath':: d.fn(help='', args=[d.arg(name='devicePath', type=d.T.string)]),
              withDevicePath(devicePath): { devicePath: devicePath },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
            },
            '#volumeMounts':: d.obj(help=''),
            volumeMounts: {
              '#withMountPath':: d.fn(help='', args=[d.arg(name='mountPath', type=d.T.string)]),
              withMountPath(mountPath): { mountPath: mountPath },
              '#withMountPropagation':: d.fn(help='', args=[d.arg(name='mountPropagation', type=d.T.string)]),
              withMountPropagation(mountPropagation): { mountPropagation: mountPropagation },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
              withReadOnly(readOnly): { readOnly: readOnly },
              '#withSubPath':: d.fn(help='', args=[d.arg(name='subPath', type=d.T.string)]),
              withSubPath(subPath): { subPath: subPath },
              '#withSubPathExpr':: d.fn(help='', args=[d.arg(name='subPathExpr', type=d.T.string)]),
              withSubPathExpr(subPathExpr): { subPathExpr: subPathExpr },
            },
            '#withArgs':: d.fn(help='', args=[d.arg(name='args', type=d.T.array)]),
            withArgs(args): { args: if std.isArray(v=args) then args else [args] },
            '#withArgsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='args', type=d.T.array)]),
            withArgsMixin(args): { args+: if std.isArray(v=args) then args else [args] },
            '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
            withCommand(command): { command: if std.isArray(v=command) then command else [command] },
            '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
            withCommandMixin(command): { command+: if std.isArray(v=command) then command else [command] },
            '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
            withEnv(env): { env: if std.isArray(v=env) then env else [env] },
            '#withEnvFrom':: d.fn(help='', args=[d.arg(name='envFrom', type=d.T.array)]),
            withEnvFrom(envFrom): { envFrom: if std.isArray(v=envFrom) then envFrom else [envFrom] },
            '#withEnvFromMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='envFrom', type=d.T.array)]),
            withEnvFromMixin(envFrom): { envFrom+: if std.isArray(v=envFrom) then envFrom else [envFrom] },
            '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
            withEnvMixin(env): { env+: if std.isArray(v=env) then env else [env] },
            '#withImage':: d.fn(help='', args=[d.arg(name='image', type=d.T.string)]),
            withImage(image): { image: image },
            '#withImagePullPolicy':: d.fn(help='', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
            withImagePullPolicy(imagePullPolicy): { imagePullPolicy: imagePullPolicy },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withPorts':: d.fn(help='', args=[d.arg(name='ports', type=d.T.array)]),
            withPorts(ports): { ports: if std.isArray(v=ports) then ports else [ports] },
            '#withPortsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ports', type=d.T.array)]),
            withPortsMixin(ports): { ports+: if std.isArray(v=ports) then ports else [ports] },
            '#withStdin':: d.fn(help='', args=[d.arg(name='stdin', type=d.T.boolean)]),
            withStdin(stdin): { stdin: stdin },
            '#withStdinOnce':: d.fn(help='', args=[d.arg(name='stdinOnce', type=d.T.boolean)]),
            withStdinOnce(stdinOnce): { stdinOnce: stdinOnce },
            '#withTerminationMessagePath':: d.fn(help='', args=[d.arg(name='terminationMessagePath', type=d.T.string)]),
            withTerminationMessagePath(terminationMessagePath): { terminationMessagePath: terminationMessagePath },
            '#withTerminationMessagePolicy':: d.fn(help='', args=[d.arg(name='terminationMessagePolicy', type=d.T.string)]),
            withTerminationMessagePolicy(terminationMessagePolicy): { terminationMessagePolicy: terminationMessagePolicy },
            '#withTty':: d.fn(help='', args=[d.arg(name='tty', type=d.T.boolean)]),
            withTty(tty): { tty: tty },
            '#withVolumeDevices':: d.fn(help='', args=[d.arg(name='volumeDevices', type=d.T.array)]),
            withVolumeDevices(volumeDevices): { volumeDevices: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
            '#withVolumeDevicesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeDevices', type=d.T.array)]),
            withVolumeDevicesMixin(volumeDevices): { volumeDevices+: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
            '#withVolumeMounts':: d.fn(help='', args=[d.arg(name='volumeMounts', type=d.T.array)]),
            withVolumeMounts(volumeMounts): { volumeMounts: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
            '#withVolumeMountsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeMounts', type=d.T.array)]),
            withVolumeMountsMixin(volumeMounts): { volumeMounts+: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
            '#withWorkingDir':: d.fn(help='', args=[d.arg(name='workingDir', type=d.T.string)]),
            withWorkingDir(workingDir): { workingDir: workingDir },
          },
          '#dnsConfig':: d.obj(help=''),
          dnsConfig: {
            '#options':: d.obj(help=''),
            options: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#withNameservers':: d.fn(help='', args=[d.arg(name='nameservers', type=d.T.array)]),
            withNameservers(nameservers): { template+: { spec+: { dnsConfig+: { nameservers: if std.isArray(v=nameservers) then nameservers else [nameservers] } } } },
            '#withNameserversMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nameservers', type=d.T.array)]),
            withNameserversMixin(nameservers): { template+: { spec+: { dnsConfig+: { nameservers+: if std.isArray(v=nameservers) then nameservers else [nameservers] } } } },
            '#withOptions':: d.fn(help='', args=[d.arg(name='options', type=d.T.array)]),
            withOptions(options): { template+: { spec+: { dnsConfig+: { options: if std.isArray(v=options) then options else [options] } } } },
            '#withOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='options', type=d.T.array)]),
            withOptionsMixin(options): { template+: { spec+: { dnsConfig+: { options+: if std.isArray(v=options) then options else [options] } } } },
            '#withSearches':: d.fn(help='', args=[d.arg(name='searches', type=d.T.array)]),
            withSearches(searches): { template+: { spec+: { dnsConfig+: { searches: if std.isArray(v=searches) then searches else [searches] } } } },
            '#withSearchesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='searches', type=d.T.array)]),
            withSearchesMixin(searches): { template+: { spec+: { dnsConfig+: { searches+: if std.isArray(v=searches) then searches else [searches] } } } },
          },
          '#ephemeralContainers':: d.obj(help=''),
          ephemeralContainers: {
            '#env':: d.obj(help=''),
            env: {
              '#valueFrom':: d.obj(help=''),
              valueFrom: {
                '#configMapKeyRef':: d.obj(help=''),
                configMapKeyRef: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { valueFrom+: { configMapKeyRef+: { key: key } } },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { valueFrom+: { configMapKeyRef+: { name: name } } },
                  '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                  withOptional(optional): { valueFrom+: { configMapKeyRef+: { optional: optional } } },
                },
                '#fieldRef':: d.obj(help=''),
                fieldRef: {
                  '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
                  withApiVersion(apiVersion): { valueFrom+: { fieldRef+: { apiVersion: apiVersion } } },
                  '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
                  withFieldPath(fieldPath): { valueFrom+: { fieldRef+: { fieldPath: fieldPath } } },
                },
                '#resourceFieldRef':: d.obj(help=''),
                resourceFieldRef: {
                  '#withContainerName':: d.fn(help='', args=[d.arg(name='containerName', type=d.T.string)]),
                  withContainerName(containerName): { valueFrom+: { resourceFieldRef+: { containerName: containerName } } },
                  '#withDivisor':: d.fn(help='', args=[d.arg(name='divisor', type=d.T.any)]),
                  withDivisor(divisor): { valueFrom+: { resourceFieldRef+: { divisor: divisor } } },
                  '#withResource':: d.fn(help='', args=[d.arg(name='resource', type=d.T.string)]),
                  withResource(resource): { valueFrom+: { resourceFieldRef+: { resource: resource } } },
                },
                '#secretKeyRef':: d.obj(help=''),
                secretKeyRef: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { valueFrom+: { secretKeyRef+: { key: key } } },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { valueFrom+: { secretKeyRef+: { name: name } } },
                  '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                  withOptional(optional): { valueFrom+: { secretKeyRef+: { optional: optional } } },
                },
              },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#envFrom':: d.obj(help=''),
            envFrom: {
              '#configMapRef':: d.obj(help=''),
              configMapRef: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { configMapRef+: { name: name } },
                '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { configMapRef+: { optional: optional } },
              },
              '#secretRef':: d.obj(help=''),
              secretRef: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { secretRef+: { name: name } },
                '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { secretRef+: { optional: optional } },
              },
              '#withPrefix':: d.fn(help='', args=[d.arg(name='prefix', type=d.T.string)]),
              withPrefix(prefix): { prefix: prefix },
            },
            '#lifecycle':: d.obj(help=''),
            lifecycle: {
              '#postStart':: d.obj(help=''),
              postStart: {
                '#exec':: d.obj(help=''),
                exec: {
                  '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                  withCommand(command): { lifecycle+: { postStart+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
                  '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                  withCommandMixin(command): { lifecycle+: { postStart+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
                },
                '#httpGet':: d.obj(help=''),
                httpGet: {
                  '#httpHeaders':: d.obj(help=''),
                  httpHeaders: {
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { lifecycle+: { postStart+: { httpGet+: { host: host } } } },
                  '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeaders(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                  '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeadersMixin(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { lifecycle+: { postStart+: { httpGet+: { path: path } } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { lifecycle+: { postStart+: { httpGet+: { port: port } } } },
                  '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                  withScheme(scheme): { lifecycle+: { postStart+: { httpGet+: { scheme: scheme } } } },
                },
                '#tcpSocket':: d.obj(help=''),
                tcpSocket: {
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { lifecycle+: { postStart+: { tcpSocket+: { host: host } } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { lifecycle+: { postStart+: { tcpSocket+: { port: port } } } },
                },
              },
              '#preStop':: d.obj(help=''),
              preStop: {
                '#exec':: d.obj(help=''),
                exec: {
                  '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                  withCommand(command): { lifecycle+: { preStop+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
                  '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                  withCommandMixin(command): { lifecycle+: { preStop+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
                },
                '#httpGet':: d.obj(help=''),
                httpGet: {
                  '#httpHeaders':: d.obj(help=''),
                  httpHeaders: {
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { lifecycle+: { preStop+: { httpGet+: { host: host } } } },
                  '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeaders(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                  '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeadersMixin(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { lifecycle+: { preStop+: { httpGet+: { path: path } } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { lifecycle+: { preStop+: { httpGet+: { port: port } } } },
                  '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                  withScheme(scheme): { lifecycle+: { preStop+: { httpGet+: { scheme: scheme } } } },
                },
                '#tcpSocket':: d.obj(help=''),
                tcpSocket: {
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { lifecycle+: { preStop+: { tcpSocket+: { host: host } } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { lifecycle+: { preStop+: { tcpSocket+: { port: port } } } },
                },
              },
            },
            '#livenessProbe':: d.obj(help=''),
            livenessProbe: {
              '#exec':: d.obj(help=''),
              exec: {
                '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                withCommand(command): { livenessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
                '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                withCommandMixin(command): { livenessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
              },
              '#grpc':: d.obj(help=''),
              grpc: {
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
                withPort(port): { livenessProbe+: { grpc+: { port: port } } },
                '#withService':: d.fn(help='', args=[d.arg(name='service', type=d.T.string)]),
                withService(service): { livenessProbe+: { grpc+: { service: service } } },
              },
              '#httpGet':: d.obj(help=''),
              httpGet: {
                '#httpHeaders':: d.obj(help=''),
                httpHeaders: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { livenessProbe+: { httpGet+: { host: host } } },
                '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeaders(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeadersMixin(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                withPath(path): { livenessProbe+: { httpGet+: { path: path } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { livenessProbe+: { httpGet+: { port: port } } },
                '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                withScheme(scheme): { livenessProbe+: { httpGet+: { scheme: scheme } } },
              },
              '#tcpSocket':: d.obj(help=''),
              tcpSocket: {
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { livenessProbe+: { tcpSocket+: { host: host } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { livenessProbe+: { tcpSocket+: { port: port } } },
              },
              '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
              withFailureThreshold(failureThreshold): { livenessProbe+: { failureThreshold: failureThreshold } },
              '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
              withInitialDelaySeconds(initialDelaySeconds): { livenessProbe+: { initialDelaySeconds: initialDelaySeconds } },
              '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
              withPeriodSeconds(periodSeconds): { livenessProbe+: { periodSeconds: periodSeconds } },
              '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
              withSuccessThreshold(successThreshold): { livenessProbe+: { successThreshold: successThreshold } },
              '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
              withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { livenessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
              '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
              withTimeoutSeconds(timeoutSeconds): { livenessProbe+: { timeoutSeconds: timeoutSeconds } },
            },
            '#ports':: d.obj(help=''),
            ports: {
              '#withContainerPort':: d.fn(help='', args=[d.arg(name='containerPort', type=d.T.integer)]),
              withContainerPort(containerPort): { containerPort: containerPort },
              '#withHostIP':: d.fn(help='', args=[d.arg(name='hostIP', type=d.T.string)]),
              withHostIP(hostIP): { hostIP: hostIP },
              '#withHostPort':: d.fn(help='', args=[d.arg(name='hostPort', type=d.T.integer)]),
              withHostPort(hostPort): { hostPort: hostPort },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withProtocol':: d.fn(help='', args=[d.arg(name='protocol', type=d.T.string)]),
              withProtocol(protocol): { protocol: protocol },
            },
            '#readinessProbe':: d.obj(help=''),
            readinessProbe: {
              '#exec':: d.obj(help=''),
              exec: {
                '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                withCommand(command): { readinessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
                '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                withCommandMixin(command): { readinessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
              },
              '#grpc':: d.obj(help=''),
              grpc: {
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
                withPort(port): { readinessProbe+: { grpc+: { port: port } } },
                '#withService':: d.fn(help='', args=[d.arg(name='service', type=d.T.string)]),
                withService(service): { readinessProbe+: { grpc+: { service: service } } },
              },
              '#httpGet':: d.obj(help=''),
              httpGet: {
                '#httpHeaders':: d.obj(help=''),
                httpHeaders: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { readinessProbe+: { httpGet+: { host: host } } },
                '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeaders(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeadersMixin(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                withPath(path): { readinessProbe+: { httpGet+: { path: path } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { readinessProbe+: { httpGet+: { port: port } } },
                '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                withScheme(scheme): { readinessProbe+: { httpGet+: { scheme: scheme } } },
              },
              '#tcpSocket':: d.obj(help=''),
              tcpSocket: {
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { readinessProbe+: { tcpSocket+: { host: host } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { readinessProbe+: { tcpSocket+: { port: port } } },
              },
              '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
              withFailureThreshold(failureThreshold): { readinessProbe+: { failureThreshold: failureThreshold } },
              '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
              withInitialDelaySeconds(initialDelaySeconds): { readinessProbe+: { initialDelaySeconds: initialDelaySeconds } },
              '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
              withPeriodSeconds(periodSeconds): { readinessProbe+: { periodSeconds: periodSeconds } },
              '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
              withSuccessThreshold(successThreshold): { readinessProbe+: { successThreshold: successThreshold } },
              '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
              withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { readinessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
              '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
              withTimeoutSeconds(timeoutSeconds): { readinessProbe+: { timeoutSeconds: timeoutSeconds } },
            },
            '#resources':: d.obj(help=''),
            resources: {
              '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.any)]),
              withLimits(limits): { resources+: { limits: limits } },
              '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.any)]),
              withRequests(requests): { resources+: { requests: requests } },
            },
            '#securityContext':: d.obj(help=''),
            securityContext: {
              '#capabilities':: d.obj(help=''),
              capabilities: {
                '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
                withAdd(add): { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } },
                '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
                withAddMixin(add): { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } },
                '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
                withDrop(drop): { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } },
                '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
                withDropMixin(drop): { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } },
              },
              '#seLinuxOptions':: d.obj(help=''),
              seLinuxOptions: {
                '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
                withLevel(level): { securityContext+: { seLinuxOptions+: { level: level } } },
                '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
                withRole(role): { securityContext+: { seLinuxOptions+: { role: role } } },
                '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
                withType(type): { securityContext+: { seLinuxOptions+: { type: type } } },
                '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
                withUser(user): { securityContext+: { seLinuxOptions+: { user: user } } },
              },
              '#seccompProfile':: d.obj(help=''),
              seccompProfile: {
                '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
                withLocalhostProfile(localhostProfile): { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } },
                '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
                withType(type): { securityContext+: { seccompProfile+: { type: type } } },
              },
              '#windowsOptions':: d.obj(help=''),
              windowsOptions: {
                '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
                withGmsaCredentialSpec(gmsaCredentialSpec): { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } },
                '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
                withGmsaCredentialSpecName(gmsaCredentialSpecName): { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } },
                '#withHostProcess':: d.fn(help='', args=[d.arg(name='hostProcess', type=d.T.boolean)]),
                withHostProcess(hostProcess): { securityContext+: { windowsOptions+: { hostProcess: hostProcess } } },
                '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
                withRunAsUserName(runAsUserName): { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } },
              },
              '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
              withAllowPrivilegeEscalation(allowPrivilegeEscalation): { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } },
              '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
              withPrivileged(privileged): { securityContext+: { privileged: privileged } },
              '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
              withProcMount(procMount): { securityContext+: { procMount: procMount } },
              '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
              withReadOnlyRootFilesystem(readOnlyRootFilesystem): { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } },
              '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
              withRunAsGroup(runAsGroup): { securityContext+: { runAsGroup: runAsGroup } },
              '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
              withRunAsNonRoot(runAsNonRoot): { securityContext+: { runAsNonRoot: runAsNonRoot } },
              '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
              withRunAsUser(runAsUser): { securityContext+: { runAsUser: runAsUser } },
            },
            '#startupProbe':: d.obj(help=''),
            startupProbe: {
              '#exec':: d.obj(help=''),
              exec: {
                '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                withCommand(command): { startupProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
                '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                withCommandMixin(command): { startupProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
              },
              '#grpc':: d.obj(help=''),
              grpc: {
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
                withPort(port): { startupProbe+: { grpc+: { port: port } } },
                '#withService':: d.fn(help='', args=[d.arg(name='service', type=d.T.string)]),
                withService(service): { startupProbe+: { grpc+: { service: service } } },
              },
              '#httpGet':: d.obj(help=''),
              httpGet: {
                '#httpHeaders':: d.obj(help=''),
                httpHeaders: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { startupProbe+: { httpGet+: { host: host } } },
                '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeaders(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeadersMixin(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                withPath(path): { startupProbe+: { httpGet+: { path: path } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { startupProbe+: { httpGet+: { port: port } } },
                '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                withScheme(scheme): { startupProbe+: { httpGet+: { scheme: scheme } } },
              },
              '#tcpSocket':: d.obj(help=''),
              tcpSocket: {
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { startupProbe+: { tcpSocket+: { host: host } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { startupProbe+: { tcpSocket+: { port: port } } },
              },
              '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
              withFailureThreshold(failureThreshold): { startupProbe+: { failureThreshold: failureThreshold } },
              '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
              withInitialDelaySeconds(initialDelaySeconds): { startupProbe+: { initialDelaySeconds: initialDelaySeconds } },
              '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
              withPeriodSeconds(periodSeconds): { startupProbe+: { periodSeconds: periodSeconds } },
              '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
              withSuccessThreshold(successThreshold): { startupProbe+: { successThreshold: successThreshold } },
              '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
              withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { startupProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
              '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
              withTimeoutSeconds(timeoutSeconds): { startupProbe+: { timeoutSeconds: timeoutSeconds } },
            },
            '#volumeDevices':: d.obj(help=''),
            volumeDevices: {
              '#withDevicePath':: d.fn(help='', args=[d.arg(name='devicePath', type=d.T.string)]),
              withDevicePath(devicePath): { devicePath: devicePath },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
            },
            '#volumeMounts':: d.obj(help=''),
            volumeMounts: {
              '#withMountPath':: d.fn(help='', args=[d.arg(name='mountPath', type=d.T.string)]),
              withMountPath(mountPath): { mountPath: mountPath },
              '#withMountPropagation':: d.fn(help='', args=[d.arg(name='mountPropagation', type=d.T.string)]),
              withMountPropagation(mountPropagation): { mountPropagation: mountPropagation },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
              withReadOnly(readOnly): { readOnly: readOnly },
              '#withSubPath':: d.fn(help='', args=[d.arg(name='subPath', type=d.T.string)]),
              withSubPath(subPath): { subPath: subPath },
              '#withSubPathExpr':: d.fn(help='', args=[d.arg(name='subPathExpr', type=d.T.string)]),
              withSubPathExpr(subPathExpr): { subPathExpr: subPathExpr },
            },
            '#withArgs':: d.fn(help='', args=[d.arg(name='args', type=d.T.array)]),
            withArgs(args): { args: if std.isArray(v=args) then args else [args] },
            '#withArgsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='args', type=d.T.array)]),
            withArgsMixin(args): { args+: if std.isArray(v=args) then args else [args] },
            '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
            withCommand(command): { command: if std.isArray(v=command) then command else [command] },
            '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
            withCommandMixin(command): { command+: if std.isArray(v=command) then command else [command] },
            '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
            withEnv(env): { env: if std.isArray(v=env) then env else [env] },
            '#withEnvFrom':: d.fn(help='', args=[d.arg(name='envFrom', type=d.T.array)]),
            withEnvFrom(envFrom): { envFrom: if std.isArray(v=envFrom) then envFrom else [envFrom] },
            '#withEnvFromMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='envFrom', type=d.T.array)]),
            withEnvFromMixin(envFrom): { envFrom+: if std.isArray(v=envFrom) then envFrom else [envFrom] },
            '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
            withEnvMixin(env): { env+: if std.isArray(v=env) then env else [env] },
            '#withImage':: d.fn(help='', args=[d.arg(name='image', type=d.T.string)]),
            withImage(image): { image: image },
            '#withImagePullPolicy':: d.fn(help='', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
            withImagePullPolicy(imagePullPolicy): { imagePullPolicy: imagePullPolicy },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withPorts':: d.fn(help='', args=[d.arg(name='ports', type=d.T.array)]),
            withPorts(ports): { ports: if std.isArray(v=ports) then ports else [ports] },
            '#withPortsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ports', type=d.T.array)]),
            withPortsMixin(ports): { ports+: if std.isArray(v=ports) then ports else [ports] },
            '#withStdin':: d.fn(help='', args=[d.arg(name='stdin', type=d.T.boolean)]),
            withStdin(stdin): { stdin: stdin },
            '#withStdinOnce':: d.fn(help='', args=[d.arg(name='stdinOnce', type=d.T.boolean)]),
            withStdinOnce(stdinOnce): { stdinOnce: stdinOnce },
            '#withTargetContainerName':: d.fn(help='', args=[d.arg(name='targetContainerName', type=d.T.string)]),
            withTargetContainerName(targetContainerName): { targetContainerName: targetContainerName },
            '#withTerminationMessagePath':: d.fn(help='', args=[d.arg(name='terminationMessagePath', type=d.T.string)]),
            withTerminationMessagePath(terminationMessagePath): { terminationMessagePath: terminationMessagePath },
            '#withTerminationMessagePolicy':: d.fn(help='', args=[d.arg(name='terminationMessagePolicy', type=d.T.string)]),
            withTerminationMessagePolicy(terminationMessagePolicy): { terminationMessagePolicy: terminationMessagePolicy },
            '#withTty':: d.fn(help='', args=[d.arg(name='tty', type=d.T.boolean)]),
            withTty(tty): { tty: tty },
            '#withVolumeDevices':: d.fn(help='', args=[d.arg(name='volumeDevices', type=d.T.array)]),
            withVolumeDevices(volumeDevices): { volumeDevices: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
            '#withVolumeDevicesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeDevices', type=d.T.array)]),
            withVolumeDevicesMixin(volumeDevices): { volumeDevices+: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
            '#withVolumeMounts':: d.fn(help='', args=[d.arg(name='volumeMounts', type=d.T.array)]),
            withVolumeMounts(volumeMounts): { volumeMounts: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
            '#withVolumeMountsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeMounts', type=d.T.array)]),
            withVolumeMountsMixin(volumeMounts): { volumeMounts+: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
            '#withWorkingDir':: d.fn(help='', args=[d.arg(name='workingDir', type=d.T.string)]),
            withWorkingDir(workingDir): { workingDir: workingDir },
          },
          '#hostAliases':: d.obj(help=''),
          hostAliases: {
            '#withHostnames':: d.fn(help='', args=[d.arg(name='hostnames', type=d.T.array)]),
            withHostnames(hostnames): { hostnames: if std.isArray(v=hostnames) then hostnames else [hostnames] },
            '#withHostnamesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='hostnames', type=d.T.array)]),
            withHostnamesMixin(hostnames): { hostnames+: if std.isArray(v=hostnames) then hostnames else [hostnames] },
            '#withIp':: d.fn(help='', args=[d.arg(name='ip', type=d.T.string)]),
            withIp(ip): { ip: ip },
          },
          '#imagePullSecrets':: d.obj(help=''),
          imagePullSecrets: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
          },
          '#initContainers':: d.obj(help=''),
          initContainers: {
            '#env':: d.obj(help=''),
            env: {
              '#valueFrom':: d.obj(help=''),
              valueFrom: {
                '#configMapKeyRef':: d.obj(help=''),
                configMapKeyRef: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { valueFrom+: { configMapKeyRef+: { key: key } } },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { valueFrom+: { configMapKeyRef+: { name: name } } },
                  '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                  withOptional(optional): { valueFrom+: { configMapKeyRef+: { optional: optional } } },
                },
                '#fieldRef':: d.obj(help=''),
                fieldRef: {
                  '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
                  withApiVersion(apiVersion): { valueFrom+: { fieldRef+: { apiVersion: apiVersion } } },
                  '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
                  withFieldPath(fieldPath): { valueFrom+: { fieldRef+: { fieldPath: fieldPath } } },
                },
                '#resourceFieldRef':: d.obj(help=''),
                resourceFieldRef: {
                  '#withContainerName':: d.fn(help='', args=[d.arg(name='containerName', type=d.T.string)]),
                  withContainerName(containerName): { valueFrom+: { resourceFieldRef+: { containerName: containerName } } },
                  '#withDivisor':: d.fn(help='', args=[d.arg(name='divisor', type=d.T.any)]),
                  withDivisor(divisor): { valueFrom+: { resourceFieldRef+: { divisor: divisor } } },
                  '#withResource':: d.fn(help='', args=[d.arg(name='resource', type=d.T.string)]),
                  withResource(resource): { valueFrom+: { resourceFieldRef+: { resource: resource } } },
                },
                '#secretKeyRef':: d.obj(help=''),
                secretKeyRef: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { valueFrom+: { secretKeyRef+: { key: key } } },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { valueFrom+: { secretKeyRef+: { name: name } } },
                  '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                  withOptional(optional): { valueFrom+: { secretKeyRef+: { optional: optional } } },
                },
              },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#envFrom':: d.obj(help=''),
            envFrom: {
              '#configMapRef':: d.obj(help=''),
              configMapRef: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { configMapRef+: { name: name } },
                '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { configMapRef+: { optional: optional } },
              },
              '#secretRef':: d.obj(help=''),
              secretRef: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { secretRef+: { name: name } },
                '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
                withOptional(optional): { secretRef+: { optional: optional } },
              },
              '#withPrefix':: d.fn(help='', args=[d.arg(name='prefix', type=d.T.string)]),
              withPrefix(prefix): { prefix: prefix },
            },
            '#lifecycle':: d.obj(help=''),
            lifecycle: {
              '#postStart':: d.obj(help=''),
              postStart: {
                '#exec':: d.obj(help=''),
                exec: {
                  '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                  withCommand(command): { lifecycle+: { postStart+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
                  '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                  withCommandMixin(command): { lifecycle+: { postStart+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
                },
                '#httpGet':: d.obj(help=''),
                httpGet: {
                  '#httpHeaders':: d.obj(help=''),
                  httpHeaders: {
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { lifecycle+: { postStart+: { httpGet+: { host: host } } } },
                  '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeaders(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                  '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeadersMixin(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { lifecycle+: { postStart+: { httpGet+: { path: path } } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { lifecycle+: { postStart+: { httpGet+: { port: port } } } },
                  '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                  withScheme(scheme): { lifecycle+: { postStart+: { httpGet+: { scheme: scheme } } } },
                },
                '#tcpSocket':: d.obj(help=''),
                tcpSocket: {
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { lifecycle+: { postStart+: { tcpSocket+: { host: host } } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { lifecycle+: { postStart+: { tcpSocket+: { port: port } } } },
                },
              },
              '#preStop':: d.obj(help=''),
              preStop: {
                '#exec':: d.obj(help=''),
                exec: {
                  '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                  withCommand(command): { lifecycle+: { preStop+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
                  '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                  withCommandMixin(command): { lifecycle+: { preStop+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
                },
                '#httpGet':: d.obj(help=''),
                httpGet: {
                  '#httpHeaders':: d.obj(help=''),
                  httpHeaders: {
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { name: name },
                    '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                    withValue(value): { value: value },
                  },
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { lifecycle+: { preStop+: { httpGet+: { host: host } } } },
                  '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeaders(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                  '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                  withHttpHeadersMixin(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
                  '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                  withPath(path): { lifecycle+: { preStop+: { httpGet+: { path: path } } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { lifecycle+: { preStop+: { httpGet+: { port: port } } } },
                  '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                  withScheme(scheme): { lifecycle+: { preStop+: { httpGet+: { scheme: scheme } } } },
                },
                '#tcpSocket':: d.obj(help=''),
                tcpSocket: {
                  '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                  withHost(host): { lifecycle+: { preStop+: { tcpSocket+: { host: host } } } },
                  '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                  withPort(port): { lifecycle+: { preStop+: { tcpSocket+: { port: port } } } },
                },
              },
            },
            '#livenessProbe':: d.obj(help=''),
            livenessProbe: {
              '#exec':: d.obj(help=''),
              exec: {
                '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                withCommand(command): { livenessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
                '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                withCommandMixin(command): { livenessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
              },
              '#grpc':: d.obj(help=''),
              grpc: {
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
                withPort(port): { livenessProbe+: { grpc+: { port: port } } },
                '#withService':: d.fn(help='', args=[d.arg(name='service', type=d.T.string)]),
                withService(service): { livenessProbe+: { grpc+: { service: service } } },
              },
              '#httpGet':: d.obj(help=''),
              httpGet: {
                '#httpHeaders':: d.obj(help=''),
                httpHeaders: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { livenessProbe+: { httpGet+: { host: host } } },
                '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeaders(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeadersMixin(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                withPath(path): { livenessProbe+: { httpGet+: { path: path } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { livenessProbe+: { httpGet+: { port: port } } },
                '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                withScheme(scheme): { livenessProbe+: { httpGet+: { scheme: scheme } } },
              },
              '#tcpSocket':: d.obj(help=''),
              tcpSocket: {
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { livenessProbe+: { tcpSocket+: { host: host } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { livenessProbe+: { tcpSocket+: { port: port } } },
              },
              '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
              withFailureThreshold(failureThreshold): { livenessProbe+: { failureThreshold: failureThreshold } },
              '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
              withInitialDelaySeconds(initialDelaySeconds): { livenessProbe+: { initialDelaySeconds: initialDelaySeconds } },
              '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
              withPeriodSeconds(periodSeconds): { livenessProbe+: { periodSeconds: periodSeconds } },
              '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
              withSuccessThreshold(successThreshold): { livenessProbe+: { successThreshold: successThreshold } },
              '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
              withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { livenessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
              '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
              withTimeoutSeconds(timeoutSeconds): { livenessProbe+: { timeoutSeconds: timeoutSeconds } },
            },
            '#ports':: d.obj(help=''),
            ports: {
              '#withContainerPort':: d.fn(help='', args=[d.arg(name='containerPort', type=d.T.integer)]),
              withContainerPort(containerPort): { containerPort: containerPort },
              '#withHostIP':: d.fn(help='', args=[d.arg(name='hostIP', type=d.T.string)]),
              withHostIP(hostIP): { hostIP: hostIP },
              '#withHostPort':: d.fn(help='', args=[d.arg(name='hostPort', type=d.T.integer)]),
              withHostPort(hostPort): { hostPort: hostPort },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withProtocol':: d.fn(help='', args=[d.arg(name='protocol', type=d.T.string)]),
              withProtocol(protocol): { protocol: protocol },
            },
            '#readinessProbe':: d.obj(help=''),
            readinessProbe: {
              '#exec':: d.obj(help=''),
              exec: {
                '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                withCommand(command): { readinessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
                '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                withCommandMixin(command): { readinessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
              },
              '#grpc':: d.obj(help=''),
              grpc: {
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
                withPort(port): { readinessProbe+: { grpc+: { port: port } } },
                '#withService':: d.fn(help='', args=[d.arg(name='service', type=d.T.string)]),
                withService(service): { readinessProbe+: { grpc+: { service: service } } },
              },
              '#httpGet':: d.obj(help=''),
              httpGet: {
                '#httpHeaders':: d.obj(help=''),
                httpHeaders: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { readinessProbe+: { httpGet+: { host: host } } },
                '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeaders(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeadersMixin(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                withPath(path): { readinessProbe+: { httpGet+: { path: path } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { readinessProbe+: { httpGet+: { port: port } } },
                '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                withScheme(scheme): { readinessProbe+: { httpGet+: { scheme: scheme } } },
              },
              '#tcpSocket':: d.obj(help=''),
              tcpSocket: {
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { readinessProbe+: { tcpSocket+: { host: host } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { readinessProbe+: { tcpSocket+: { port: port } } },
              },
              '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
              withFailureThreshold(failureThreshold): { readinessProbe+: { failureThreshold: failureThreshold } },
              '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
              withInitialDelaySeconds(initialDelaySeconds): { readinessProbe+: { initialDelaySeconds: initialDelaySeconds } },
              '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
              withPeriodSeconds(periodSeconds): { readinessProbe+: { periodSeconds: periodSeconds } },
              '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
              withSuccessThreshold(successThreshold): { readinessProbe+: { successThreshold: successThreshold } },
              '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
              withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { readinessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
              '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
              withTimeoutSeconds(timeoutSeconds): { readinessProbe+: { timeoutSeconds: timeoutSeconds } },
            },
            '#resources':: d.obj(help=''),
            resources: {
              '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.any)]),
              withLimits(limits): { resources+: { limits: limits } },
              '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.any)]),
              withRequests(requests): { resources+: { requests: requests } },
            },
            '#securityContext':: d.obj(help=''),
            securityContext: {
              '#capabilities':: d.obj(help=''),
              capabilities: {
                '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
                withAdd(add): { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } },
                '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
                withAddMixin(add): { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } },
                '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
                withDrop(drop): { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } },
                '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
                withDropMixin(drop): { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } },
              },
              '#seLinuxOptions':: d.obj(help=''),
              seLinuxOptions: {
                '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
                withLevel(level): { securityContext+: { seLinuxOptions+: { level: level } } },
                '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
                withRole(role): { securityContext+: { seLinuxOptions+: { role: role } } },
                '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
                withType(type): { securityContext+: { seLinuxOptions+: { type: type } } },
                '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
                withUser(user): { securityContext+: { seLinuxOptions+: { user: user } } },
              },
              '#seccompProfile':: d.obj(help=''),
              seccompProfile: {
                '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
                withLocalhostProfile(localhostProfile): { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } },
                '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
                withType(type): { securityContext+: { seccompProfile+: { type: type } } },
              },
              '#windowsOptions':: d.obj(help=''),
              windowsOptions: {
                '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
                withGmsaCredentialSpec(gmsaCredentialSpec): { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } },
                '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
                withGmsaCredentialSpecName(gmsaCredentialSpecName): { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } },
                '#withHostProcess':: d.fn(help='', args=[d.arg(name='hostProcess', type=d.T.boolean)]),
                withHostProcess(hostProcess): { securityContext+: { windowsOptions+: { hostProcess: hostProcess } } },
                '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
                withRunAsUserName(runAsUserName): { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } },
              },
              '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
              withAllowPrivilegeEscalation(allowPrivilegeEscalation): { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } },
              '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
              withPrivileged(privileged): { securityContext+: { privileged: privileged } },
              '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
              withProcMount(procMount): { securityContext+: { procMount: procMount } },
              '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
              withReadOnlyRootFilesystem(readOnlyRootFilesystem): { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } },
              '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
              withRunAsGroup(runAsGroup): { securityContext+: { runAsGroup: runAsGroup } },
              '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
              withRunAsNonRoot(runAsNonRoot): { securityContext+: { runAsNonRoot: runAsNonRoot } },
              '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
              withRunAsUser(runAsUser): { securityContext+: { runAsUser: runAsUser } },
            },
            '#startupProbe':: d.obj(help=''),
            startupProbe: {
              '#exec':: d.obj(help=''),
              exec: {
                '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
                withCommand(command): { startupProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
                '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
                withCommandMixin(command): { startupProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
              },
              '#grpc':: d.obj(help=''),
              grpc: {
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
                withPort(port): { startupProbe+: { grpc+: { port: port } } },
                '#withService':: d.fn(help='', args=[d.arg(name='service', type=d.T.string)]),
                withService(service): { startupProbe+: { grpc+: { service: service } } },
              },
              '#httpGet':: d.obj(help=''),
              httpGet: {
                '#httpHeaders':: d.obj(help=''),
                httpHeaders: {
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                  withValue(value): { value: value },
                },
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { startupProbe+: { httpGet+: { host: host } } },
                '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeaders(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
                withHttpHeadersMixin(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
                '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                withPath(path): { startupProbe+: { httpGet+: { path: path } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { startupProbe+: { httpGet+: { port: port } } },
                '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
                withScheme(scheme): { startupProbe+: { httpGet+: { scheme: scheme } } },
              },
              '#tcpSocket':: d.obj(help=''),
              tcpSocket: {
                '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
                withHost(host): { startupProbe+: { tcpSocket+: { host: host } } },
                '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
                withPort(port): { startupProbe+: { tcpSocket+: { port: port } } },
              },
              '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
              withFailureThreshold(failureThreshold): { startupProbe+: { failureThreshold: failureThreshold } },
              '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
              withInitialDelaySeconds(initialDelaySeconds): { startupProbe+: { initialDelaySeconds: initialDelaySeconds } },
              '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
              withPeriodSeconds(periodSeconds): { startupProbe+: { periodSeconds: periodSeconds } },
              '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
              withSuccessThreshold(successThreshold): { startupProbe+: { successThreshold: successThreshold } },
              '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
              withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { startupProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
              '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
              withTimeoutSeconds(timeoutSeconds): { startupProbe+: { timeoutSeconds: timeoutSeconds } },
            },
            '#volumeDevices':: d.obj(help=''),
            volumeDevices: {
              '#withDevicePath':: d.fn(help='', args=[d.arg(name='devicePath', type=d.T.string)]),
              withDevicePath(devicePath): { devicePath: devicePath },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
            },
            '#volumeMounts':: d.obj(help=''),
            volumeMounts: {
              '#withMountPath':: d.fn(help='', args=[d.arg(name='mountPath', type=d.T.string)]),
              withMountPath(mountPath): { mountPath: mountPath },
              '#withMountPropagation':: d.fn(help='', args=[d.arg(name='mountPropagation', type=d.T.string)]),
              withMountPropagation(mountPropagation): { mountPropagation: mountPropagation },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
              withReadOnly(readOnly): { readOnly: readOnly },
              '#withSubPath':: d.fn(help='', args=[d.arg(name='subPath', type=d.T.string)]),
              withSubPath(subPath): { subPath: subPath },
              '#withSubPathExpr':: d.fn(help='', args=[d.arg(name='subPathExpr', type=d.T.string)]),
              withSubPathExpr(subPathExpr): { subPathExpr: subPathExpr },
            },
            '#withArgs':: d.fn(help='', args=[d.arg(name='args', type=d.T.array)]),
            withArgs(args): { args: if std.isArray(v=args) then args else [args] },
            '#withArgsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='args', type=d.T.array)]),
            withArgsMixin(args): { args+: if std.isArray(v=args) then args else [args] },
            '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
            withCommand(command): { command: if std.isArray(v=command) then command else [command] },
            '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
            withCommandMixin(command): { command+: if std.isArray(v=command) then command else [command] },
            '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
            withEnv(env): { env: if std.isArray(v=env) then env else [env] },
            '#withEnvFrom':: d.fn(help='', args=[d.arg(name='envFrom', type=d.T.array)]),
            withEnvFrom(envFrom): { envFrom: if std.isArray(v=envFrom) then envFrom else [envFrom] },
            '#withEnvFromMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='envFrom', type=d.T.array)]),
            withEnvFromMixin(envFrom): { envFrom+: if std.isArray(v=envFrom) then envFrom else [envFrom] },
            '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
            withEnvMixin(env): { env+: if std.isArray(v=env) then env else [env] },
            '#withImage':: d.fn(help='', args=[d.arg(name='image', type=d.T.string)]),
            withImage(image): { image: image },
            '#withImagePullPolicy':: d.fn(help='', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
            withImagePullPolicy(imagePullPolicy): { imagePullPolicy: imagePullPolicy },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withPorts':: d.fn(help='', args=[d.arg(name='ports', type=d.T.array)]),
            withPorts(ports): { ports: if std.isArray(v=ports) then ports else [ports] },
            '#withPortsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ports', type=d.T.array)]),
            withPortsMixin(ports): { ports+: if std.isArray(v=ports) then ports else [ports] },
            '#withStdin':: d.fn(help='', args=[d.arg(name='stdin', type=d.T.boolean)]),
            withStdin(stdin): { stdin: stdin },
            '#withStdinOnce':: d.fn(help='', args=[d.arg(name='stdinOnce', type=d.T.boolean)]),
            withStdinOnce(stdinOnce): { stdinOnce: stdinOnce },
            '#withTerminationMessagePath':: d.fn(help='', args=[d.arg(name='terminationMessagePath', type=d.T.string)]),
            withTerminationMessagePath(terminationMessagePath): { terminationMessagePath: terminationMessagePath },
            '#withTerminationMessagePolicy':: d.fn(help='', args=[d.arg(name='terminationMessagePolicy', type=d.T.string)]),
            withTerminationMessagePolicy(terminationMessagePolicy): { terminationMessagePolicy: terminationMessagePolicy },
            '#withTty':: d.fn(help='', args=[d.arg(name='tty', type=d.T.boolean)]),
            withTty(tty): { tty: tty },
            '#withVolumeDevices':: d.fn(help='', args=[d.arg(name='volumeDevices', type=d.T.array)]),
            withVolumeDevices(volumeDevices): { volumeDevices: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
            '#withVolumeDevicesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeDevices', type=d.T.array)]),
            withVolumeDevicesMixin(volumeDevices): { volumeDevices+: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
            '#withVolumeMounts':: d.fn(help='', args=[d.arg(name='volumeMounts', type=d.T.array)]),
            withVolumeMounts(volumeMounts): { volumeMounts: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
            '#withVolumeMountsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeMounts', type=d.T.array)]),
            withVolumeMountsMixin(volumeMounts): { volumeMounts+: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
            '#withWorkingDir':: d.fn(help='', args=[d.arg(name='workingDir', type=d.T.string)]),
            withWorkingDir(workingDir): { workingDir: workingDir },
          },
          '#os':: d.obj(help=''),
          os: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { template+: { spec+: { os+: { name: name } } } },
          },
          '#readinessGates':: d.obj(help=''),
          readinessGates: {
            '#withConditionType':: d.fn(help='', args=[d.arg(name='conditionType', type=d.T.string)]),
            withConditionType(conditionType): { conditionType: conditionType },
          },
          '#securityContext':: d.obj(help=''),
          securityContext: {
            '#seLinuxOptions':: d.obj(help=''),
            seLinuxOptions: {
              '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
              withLevel(level): { template+: { spec+: { securityContext+: { seLinuxOptions+: { level: level } } } } },
              '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
              withRole(role): { template+: { spec+: { securityContext+: { seLinuxOptions+: { role: role } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { template+: { spec+: { securityContext+: { seLinuxOptions+: { type: type } } } } },
              '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
              withUser(user): { template+: { spec+: { securityContext+: { seLinuxOptions+: { user: user } } } } },
            },
            '#seccompProfile':: d.obj(help=''),
            seccompProfile: {
              '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
              withLocalhostProfile(localhostProfile): { template+: { spec+: { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { template+: { spec+: { securityContext+: { seccompProfile+: { type: type } } } } },
            },
            '#sysctls':: d.obj(help=''),
            sysctls: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#windowsOptions':: d.obj(help=''),
            windowsOptions: {
              '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
              withGmsaCredentialSpec(gmsaCredentialSpec): { template+: { spec+: { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } } } },
              '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
              withGmsaCredentialSpecName(gmsaCredentialSpecName): { template+: { spec+: { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } } } },
              '#withHostProcess':: d.fn(help='', args=[d.arg(name='hostProcess', type=d.T.boolean)]),
              withHostProcess(hostProcess): { template+: { spec+: { securityContext+: { windowsOptions+: { hostProcess: hostProcess } } } } },
              '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
              withRunAsUserName(runAsUserName): { template+: { spec+: { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } } } },
            },
            '#withFsGroup':: d.fn(help='', args=[d.arg(name='fsGroup', type=d.T.integer)]),
            withFsGroup(fsGroup): { template+: { spec+: { securityContext+: { fsGroup: fsGroup } } } },
            '#withFsGroupChangePolicy':: d.fn(help='', args=[d.arg(name='fsGroupChangePolicy', type=d.T.string)]),
            withFsGroupChangePolicy(fsGroupChangePolicy): { template+: { spec+: { securityContext+: { fsGroupChangePolicy: fsGroupChangePolicy } } } },
            '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
            withRunAsGroup(runAsGroup): { template+: { spec+: { securityContext+: { runAsGroup: runAsGroup } } } },
            '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
            withRunAsNonRoot(runAsNonRoot): { template+: { spec+: { securityContext+: { runAsNonRoot: runAsNonRoot } } } },
            '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
            withRunAsUser(runAsUser): { template+: { spec+: { securityContext+: { runAsUser: runAsUser } } } },
            '#withSupplementalGroups':: d.fn(help='', args=[d.arg(name='supplementalGroups', type=d.T.array)]),
            withSupplementalGroups(supplementalGroups): { template+: { spec+: { securityContext+: { supplementalGroups: if std.isArray(v=supplementalGroups) then supplementalGroups else [supplementalGroups] } } } },
            '#withSupplementalGroupsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='supplementalGroups', type=d.T.array)]),
            withSupplementalGroupsMixin(supplementalGroups): { template+: { spec+: { securityContext+: { supplementalGroups+: if std.isArray(v=supplementalGroups) then supplementalGroups else [supplementalGroups] } } } },
            '#withSysctls':: d.fn(help='', args=[d.arg(name='sysctls', type=d.T.array)]),
            withSysctls(sysctls): { template+: { spec+: { securityContext+: { sysctls: if std.isArray(v=sysctls) then sysctls else [sysctls] } } } },
            '#withSysctlsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sysctls', type=d.T.array)]),
            withSysctlsMixin(sysctls): { template+: { spec+: { securityContext+: { sysctls+: if std.isArray(v=sysctls) then sysctls else [sysctls] } } } },
          },
          '#tolerations':: d.obj(help=''),
          tolerations: {
            '#withEffect':: d.fn(help='', args=[d.arg(name='effect', type=d.T.string)]),
            withEffect(effect): { effect: effect },
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { key: key },
            '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
            withOperator(operator): { operator: operator },
            '#withTolerationSeconds':: d.fn(help='', args=[d.arg(name='tolerationSeconds', type=d.T.integer)]),
            withTolerationSeconds(tolerationSeconds): { tolerationSeconds: tolerationSeconds },
            '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
            withValue(value): { value: value },
          },
          '#topologySpreadConstraints':: d.obj(help=''),
          topologySpreadConstraints: {
            '#labelSelector':: d.obj(help=''),
            labelSelector: {
              '#matchExpressions':: d.obj(help=''),
              matchExpressions: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                withOperator(operator): { operator: operator },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                withValues(values): { values: if std.isArray(v=values) then values else [values] },
                '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
              },
              '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressions(matchExpressions): { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
              '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressionsMixin(matchExpressions): { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
              '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabels(matchLabels): { labelSelector+: { matchLabels: matchLabels } },
              '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabelsMixin(matchLabels): { labelSelector+: { matchLabels+: matchLabels } },
            },
            '#withMatchLabelKeys':: d.fn(help='', args=[d.arg(name='matchLabelKeys', type=d.T.array)]),
            withMatchLabelKeys(matchLabelKeys): { matchLabelKeys: if std.isArray(v=matchLabelKeys) then matchLabelKeys else [matchLabelKeys] },
            '#withMatchLabelKeysMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabelKeys', type=d.T.array)]),
            withMatchLabelKeysMixin(matchLabelKeys): { matchLabelKeys+: if std.isArray(v=matchLabelKeys) then matchLabelKeys else [matchLabelKeys] },
            '#withMaxSkew':: d.fn(help='', args=[d.arg(name='maxSkew', type=d.T.integer)]),
            withMaxSkew(maxSkew): { maxSkew: maxSkew },
            '#withMinDomains':: d.fn(help='', args=[d.arg(name='minDomains', type=d.T.integer)]),
            withMinDomains(minDomains): { minDomains: minDomains },
            '#withNodeAffinityPolicy':: d.fn(help='', args=[d.arg(name='nodeAffinityPolicy', type=d.T.string)]),
            withNodeAffinityPolicy(nodeAffinityPolicy): { nodeAffinityPolicy: nodeAffinityPolicy },
            '#withNodeTaintsPolicy':: d.fn(help='', args=[d.arg(name='nodeTaintsPolicy', type=d.T.string)]),
            withNodeTaintsPolicy(nodeTaintsPolicy): { nodeTaintsPolicy: nodeTaintsPolicy },
            '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
            withTopologyKey(topologyKey): { topologyKey: topologyKey },
            '#withWhenUnsatisfiable':: d.fn(help='', args=[d.arg(name='whenUnsatisfiable', type=d.T.string)]),
            withWhenUnsatisfiable(whenUnsatisfiable): { whenUnsatisfiable: whenUnsatisfiable },
          },
          '#withActiveDeadlineSeconds':: d.fn(help='', args=[d.arg(name='activeDeadlineSeconds', type=d.T.integer)]),
          withActiveDeadlineSeconds(activeDeadlineSeconds): { template+: { spec+: { activeDeadlineSeconds: activeDeadlineSeconds } } },
          '#withAutomountServiceAccountToken':: d.fn(help='', args=[d.arg(name='automountServiceAccountToken', type=d.T.boolean)]),
          withAutomountServiceAccountToken(automountServiceAccountToken): { template+: { spec+: { automountServiceAccountToken: automountServiceAccountToken } } },
          '#withContainers':: d.fn(help='', args=[d.arg(name='containers', type=d.T.array)]),
          withContainers(containers): { template+: { spec+: { containers: if std.isArray(v=containers) then containers else [containers] } } },
          '#withContainersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='containers', type=d.T.array)]),
          withContainersMixin(containers): { template+: { spec+: { containers+: if std.isArray(v=containers) then containers else [containers] } } },
          '#withDnsPolicy':: d.fn(help='', args=[d.arg(name='dnsPolicy', type=d.T.string)]),
          withDnsPolicy(dnsPolicy): { template+: { spec+: { dnsPolicy: dnsPolicy } } },
          '#withEnableServiceLinks':: d.fn(help='', args=[d.arg(name='enableServiceLinks', type=d.T.boolean)]),
          withEnableServiceLinks(enableServiceLinks): { template+: { spec+: { enableServiceLinks: enableServiceLinks } } },
          '#withEphemeralContainers':: d.fn(help='', args=[d.arg(name='ephemeralContainers', type=d.T.array)]),
          withEphemeralContainers(ephemeralContainers): { template+: { spec+: { ephemeralContainers: if std.isArray(v=ephemeralContainers) then ephemeralContainers else [ephemeralContainers] } } },
          '#withEphemeralContainersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ephemeralContainers', type=d.T.array)]),
          withEphemeralContainersMixin(ephemeralContainers): { template+: { spec+: { ephemeralContainers+: if std.isArray(v=ephemeralContainers) then ephemeralContainers else [ephemeralContainers] } } },
          '#withHostAliases':: d.fn(help='', args=[d.arg(name='hostAliases', type=d.T.array)]),
          withHostAliases(hostAliases): { template+: { spec+: { hostAliases: if std.isArray(v=hostAliases) then hostAliases else [hostAliases] } } },
          '#withHostAliasesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='hostAliases', type=d.T.array)]),
          withHostAliasesMixin(hostAliases): { template+: { spec+: { hostAliases+: if std.isArray(v=hostAliases) then hostAliases else [hostAliases] } } },
          '#withHostIPC':: d.fn(help='', args=[d.arg(name='hostIPC', type=d.T.boolean)]),
          withHostIPC(hostIPC): { template+: { spec+: { hostIPC: hostIPC } } },
          '#withHostNetwork':: d.fn(help='', args=[d.arg(name='hostNetwork', type=d.T.boolean)]),
          withHostNetwork(hostNetwork): { template+: { spec+: { hostNetwork: hostNetwork } } },
          '#withHostPID':: d.fn(help='', args=[d.arg(name='hostPID', type=d.T.boolean)]),
          withHostPID(hostPID): { template+: { spec+: { hostPID: hostPID } } },
          '#withHostUsers':: d.fn(help='', args=[d.arg(name='hostUsers', type=d.T.boolean)]),
          withHostUsers(hostUsers): { template+: { spec+: { hostUsers: hostUsers } } },
          '#withHostname':: d.fn(help='', args=[d.arg(name='hostname', type=d.T.string)]),
          withHostname(hostname): { template+: { spec+: { hostname: hostname } } },
          '#withImagePullSecrets':: d.fn(help='', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
          withImagePullSecrets(imagePullSecrets): { template+: { spec+: { imagePullSecrets: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } },
          '#withImagePullSecretsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
          withImagePullSecretsMixin(imagePullSecrets): { template+: { spec+: { imagePullSecrets+: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } },
          '#withInitContainers':: d.fn(help='', args=[d.arg(name='initContainers', type=d.T.array)]),
          withInitContainers(initContainers): { template+: { spec+: { initContainers: if std.isArray(v=initContainers) then initContainers else [initContainers] } } },
          '#withInitContainersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='initContainers', type=d.T.array)]),
          withInitContainersMixin(initContainers): { template+: { spec+: { initContainers+: if std.isArray(v=initContainers) then initContainers else [initContainers] } } },
          '#withNodeName':: d.fn(help='', args=[d.arg(name='nodeName', type=d.T.string)]),
          withNodeName(nodeName): { template+: { spec+: { nodeName: nodeName } } },
          '#withNodeSelector':: d.fn(help='', args=[d.arg(name='nodeSelector', type=d.T.object)]),
          withNodeSelector(nodeSelector): { template+: { spec+: { nodeSelector: nodeSelector } } },
          '#withNodeSelectorMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nodeSelector', type=d.T.object)]),
          withNodeSelectorMixin(nodeSelector): { template+: { spec+: { nodeSelector+: nodeSelector } } },
          '#withOverhead':: d.fn(help='', args=[d.arg(name='overhead', type=d.T.object)]),
          withOverhead(overhead): { template+: { spec+: { overhead: overhead } } },
          '#withOverheadMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='overhead', type=d.T.object)]),
          withOverheadMixin(overhead): { template+: { spec+: { overhead+: overhead } } },
          '#withPreemptionPolicy':: d.fn(help='', args=[d.arg(name='preemptionPolicy', type=d.T.string)]),
          withPreemptionPolicy(preemptionPolicy): { template+: { spec+: { preemptionPolicy: preemptionPolicy } } },
          '#withPriority':: d.fn(help='', args=[d.arg(name='priority', type=d.T.integer)]),
          withPriority(priority): { template+: { spec+: { priority: priority } } },
          '#withPriorityClassName':: d.fn(help='', args=[d.arg(name='priorityClassName', type=d.T.string)]),
          withPriorityClassName(priorityClassName): { template+: { spec+: { priorityClassName: priorityClassName } } },
          '#withReadinessGates':: d.fn(help='', args=[d.arg(name='readinessGates', type=d.T.array)]),
          withReadinessGates(readinessGates): { template+: { spec+: { readinessGates: if std.isArray(v=readinessGates) then readinessGates else [readinessGates] } } },
          '#withReadinessGatesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='readinessGates', type=d.T.array)]),
          withReadinessGatesMixin(readinessGates): { template+: { spec+: { readinessGates+: if std.isArray(v=readinessGates) then readinessGates else [readinessGates] } } },
          '#withRestartPolicy':: d.fn(help='', args=[d.arg(name='restartPolicy', type=d.T.string)]),
          withRestartPolicy(restartPolicy): { template+: { spec+: { restartPolicy: restartPolicy } } },
          '#withRuntimeClassName':: d.fn(help='', args=[d.arg(name='runtimeClassName', type=d.T.string)]),
          withRuntimeClassName(runtimeClassName): { template+: { spec+: { runtimeClassName: runtimeClassName } } },
          '#withSchedulerName':: d.fn(help='', args=[d.arg(name='schedulerName', type=d.T.string)]),
          withSchedulerName(schedulerName): { template+: { spec+: { schedulerName: schedulerName } } },
          '#withServiceAccount':: d.fn(help='', args=[d.arg(name='serviceAccount', type=d.T.string)]),
          withServiceAccount(serviceAccount): { template+: { spec+: { serviceAccount: serviceAccount } } },
          '#withServiceAccountName':: d.fn(help='', args=[d.arg(name='serviceAccountName', type=d.T.string)]),
          withServiceAccountName(serviceAccountName): { template+: { spec+: { serviceAccountName: serviceAccountName } } },
          '#withSetHostnameAsFQDN':: d.fn(help='', args=[d.arg(name='setHostnameAsFQDN', type=d.T.boolean)]),
          withSetHostnameAsFQDN(setHostnameAsFQDN): { template+: { spec+: { setHostnameAsFQDN: setHostnameAsFQDN } } },
          '#withShareProcessNamespace':: d.fn(help='', args=[d.arg(name='shareProcessNamespace', type=d.T.boolean)]),
          withShareProcessNamespace(shareProcessNamespace): { template+: { spec+: { shareProcessNamespace: shareProcessNamespace } } },
          '#withSubdomain':: d.fn(help='', args=[d.arg(name='subdomain', type=d.T.string)]),
          withSubdomain(subdomain): { template+: { spec+: { subdomain: subdomain } } },
          '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
          withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { template+: { spec+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } } },
          '#withTolerations':: d.fn(help='', args=[d.arg(name='tolerations', type=d.T.array)]),
          withTolerations(tolerations): { template+: { spec+: { tolerations: if std.isArray(v=tolerations) then tolerations else [tolerations] } } },
          '#withTolerationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tolerations', type=d.T.array)]),
          withTolerationsMixin(tolerations): { template+: { spec+: { tolerations+: if std.isArray(v=tolerations) then tolerations else [tolerations] } } },
          '#withTopologySpreadConstraints':: d.fn(help='', args=[d.arg(name='topologySpreadConstraints', type=d.T.array)]),
          withTopologySpreadConstraints(topologySpreadConstraints): { template+: { spec+: { topologySpreadConstraints: if std.isArray(v=topologySpreadConstraints) then topologySpreadConstraints else [topologySpreadConstraints] } } },
          '#withTopologySpreadConstraintsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='topologySpreadConstraints', type=d.T.array)]),
          withTopologySpreadConstraintsMixin(topologySpreadConstraints): { template+: { spec+: { topologySpreadConstraints+: if std.isArray(v=topologySpreadConstraints) then topologySpreadConstraints else [topologySpreadConstraints] } } },
          '#withVolumes':: d.fn(help='', args=[d.arg(name='volumes', type=d.T.any)]),
          withVolumes(volumes): { template+: { spec+: { volumes: volumes } } },
        },
      },
      '#withMinReadySeconds':: d.fn(help='', args=[d.arg(name='minReadySeconds', type=d.T.integer)]),
      withMinReadySeconds(minReadySeconds): { minReadySeconds: minReadySeconds },
      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { name: name },
      '#withReplicas':: d.fn(help='', args=[d.arg(name='replicas', type=d.T.integer)]),
      withReplicas(replicas): { replicas: replicas },
    },
    '#withAnalyses':: d.fn(help='', args=[d.arg(name='analyses', type=d.T.array)]),
    withAnalyses(analyses): { spec+: { analyses: if std.isArray(v=analyses) then analyses else [analyses] } },
    '#withAnalysesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='analyses', type=d.T.array)]),
    withAnalysesMixin(analyses): { spec+: { analyses+: if std.isArray(v=analyses) then analyses else [analyses] } },
    '#withDryRun':: d.fn(help='', args=[d.arg(name='dryRun', type=d.T.array)]),
    withDryRun(dryRun): { spec+: { dryRun: if std.isArray(v=dryRun) then dryRun else [dryRun] } },
    '#withDryRunMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='dryRun', type=d.T.array)]),
    withDryRunMixin(dryRun): { spec+: { dryRun+: if std.isArray(v=dryRun) then dryRun else [dryRun] } },
    '#withDuration':: d.fn(help='', args=[d.arg(name='duration', type=d.T.string)]),
    withDuration(duration): { spec+: { duration: duration } },
    '#withMeasurementRetention':: d.fn(help='', args=[d.arg(name='measurementRetention', type=d.T.array)]),
    withMeasurementRetention(measurementRetention): { spec+: { measurementRetention: if std.isArray(v=measurementRetention) then measurementRetention else [measurementRetention] } },
    '#withMeasurementRetentionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='measurementRetention', type=d.T.array)]),
    withMeasurementRetentionMixin(measurementRetention): { spec+: { measurementRetention+: if std.isArray(v=measurementRetention) then measurementRetention else [measurementRetention] } },
    '#withProgressDeadlineSeconds':: d.fn(help='', args=[d.arg(name='progressDeadlineSeconds', type=d.T.integer)]),
    withProgressDeadlineSeconds(progressDeadlineSeconds): { spec+: { progressDeadlineSeconds: progressDeadlineSeconds } },
    '#withScaleDownDelaySeconds':: d.fn(help='', args=[d.arg(name='scaleDownDelaySeconds', type=d.T.integer)]),
    withScaleDownDelaySeconds(scaleDownDelaySeconds): { spec+: { scaleDownDelaySeconds: scaleDownDelaySeconds } },
    '#withTemplates':: d.fn(help='', args=[d.arg(name='templates', type=d.T.array)]),
    withTemplates(templates): { spec+: { templates: if std.isArray(v=templates) then templates else [templates] } },
    '#withTemplatesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='templates', type=d.T.array)]),
    withTemplatesMixin(templates): { spec+: { templates+: if std.isArray(v=templates) then templates else [templates] } },
    '#withTerminate':: d.fn(help='', args=[d.arg(name='terminate', type=d.T.boolean)]),
    withTerminate(terminate): { spec+: { terminate: terminate } },
  },
  '#mixin': 'ignore',
  mixin: self,
}
